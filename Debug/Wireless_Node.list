
Wireless_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fb4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005144  08005144  00006144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051e4  080051e4  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080051e4  080051e4  000061e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051ec  080051ec  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051ec  080051ec  000061ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051f0  080051f0  000061f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080051f4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          00000394  20000068  20000068  00007068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003fc  200003fc  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000134ee  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d48  00000000  00000000  0001a586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  0001d2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e5f  00000000  00000000  0001e530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a1f  00000000  00000000  0001f38f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000175c0  00000000  00000000  00042dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1f0a  00000000  00000000  0005a36e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012c278  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054c4  00000000  00000000  0012c2bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  00131780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800512c 	.word	0x0800512c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800512c 	.word	0x0800512c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08c      	sub	sp, #48	@ 0x30
 8000584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 031c 	add.w	r3, r7, #28
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	61bb      	str	r3, [r7, #24]
 800059a:	4b4b      	ldr	r3, [pc, #300]	@ (80006c8 <MX_GPIO_Init+0x148>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a4a      	ldr	r2, [pc, #296]	@ (80006c8 <MX_GPIO_Init+0x148>)
 80005a0:	f043 0310 	orr.w	r3, r3, #16
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b48      	ldr	r3, [pc, #288]	@ (80006c8 <MX_GPIO_Init+0x148>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f003 0310 	and.w	r3, r3, #16
 80005ae:	61bb      	str	r3, [r7, #24]
 80005b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
 80005b6:	4b44      	ldr	r3, [pc, #272]	@ (80006c8 <MX_GPIO_Init+0x148>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4a43      	ldr	r2, [pc, #268]	@ (80006c8 <MX_GPIO_Init+0x148>)
 80005bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c2:	4b41      	ldr	r3, [pc, #260]	@ (80006c8 <MX_GPIO_Init+0x148>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	4b3d      	ldr	r3, [pc, #244]	@ (80006c8 <MX_GPIO_Init+0x148>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	4a3c      	ldr	r2, [pc, #240]	@ (80006c8 <MX_GPIO_Init+0x148>)
 80005d8:	f043 0304 	orr.w	r3, r3, #4
 80005dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005de:	4b3a      	ldr	r3, [pc, #232]	@ (80006c8 <MX_GPIO_Init+0x148>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	f003 0304 	and.w	r3, r3, #4
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	4b36      	ldr	r3, [pc, #216]	@ (80006c8 <MX_GPIO_Init+0x148>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	4a35      	ldr	r2, [pc, #212]	@ (80006c8 <MX_GPIO_Init+0x148>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fa:	4b33      	ldr	r3, [pc, #204]	@ (80006c8 <MX_GPIO_Init+0x148>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	4b2f      	ldr	r3, [pc, #188]	@ (80006c8 <MX_GPIO_Init+0x148>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	4a2e      	ldr	r2, [pc, #184]	@ (80006c8 <MX_GPIO_Init+0x148>)
 8000610:	f043 0302 	orr.w	r3, r3, #2
 8000614:	6313      	str	r3, [r2, #48]	@ 0x30
 8000616:	4b2c      	ldr	r3, [pc, #176]	@ (80006c8 <MX_GPIO_Init+0x148>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <MX_GPIO_Init+0x148>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a27      	ldr	r2, [pc, #156]	@ (80006c8 <MX_GPIO_Init+0x148>)
 800062c:	f043 0308 	orr.w	r3, r3, #8
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b25      	ldr	r3, [pc, #148]	@ (80006c8 <MX_GPIO_Init+0x148>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0308 	and.w	r3, r3, #8
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RF_PTX1_CE_Pin|RF_PTX1_CSN_Pin|RF_PTX2_CE_Pin|RF_PTX2_CSN_Pin, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	213c      	movs	r1, #60	@ 0x3c
 8000642:	4822      	ldr	r0, [pc, #136]	@ (80006cc <MX_GPIO_Init+0x14c>)
 8000644:	f001 f946 	bl	80018d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SYS_LED0_Pin|SYS_LED1_Pin, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	2103      	movs	r1, #3
 800064c:	4820      	ldr	r0, [pc, #128]	@ (80006d0 <MX_GPIO_Init+0x150>)
 800064e:	f001 f941 	bl	80018d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = RF_PTX1_CE_Pin|RF_PTX1_CSN_Pin|RF_PTX2_CE_Pin|RF_PTX2_CSN_Pin;
 8000652:	233c      	movs	r3, #60	@ 0x3c
 8000654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	2301      	movs	r3, #1
 8000658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	2300      	movs	r3, #0
 8000660:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	4619      	mov	r1, r3
 8000668:	4818      	ldr	r0, [pc, #96]	@ (80006cc <MX_GPIO_Init+0x14c>)
 800066a:	f000 ff7f 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_PTX2_IRQ_Pin;
 800066e:	2302      	movs	r3, #2
 8000670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000672:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(RF_PTX2_IRQ_GPIO_Port, &GPIO_InitStruct);
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	4814      	ldr	r0, [pc, #80]	@ (80006d4 <MX_GPIO_Init+0x154>)
 8000684:	f000 ff72 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_PTX1_IRQ_Pin;
 8000688:	2310      	movs	r3, #16
 800068a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800068c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(RF_PTX1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	4619      	mov	r1, r3
 800069c:	480e      	ldr	r0, [pc, #56]	@ (80006d8 <MX_GPIO_Init+0x158>)
 800069e:	f000 ff65 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SYS_LED0_Pin|SYS_LED1_Pin;
 80006a2:	2303      	movs	r3, #3
 80006a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	4805      	ldr	r0, [pc, #20]	@ (80006d0 <MX_GPIO_Init+0x150>)
 80006ba:	f000 ff57 	bl	800156c <HAL_GPIO_Init>

}
 80006be:	bf00      	nop
 80006c0:	3730      	adds	r7, #48	@ 0x30
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40020c00 	.word	0x40020c00
 80006d4:	40020800 	.word	0x40020800
 80006d8:	40020000 	.word	0x40020000

080006dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <MX_I2C1_Init+0x50>)
 80006e2:	4a13      	ldr	r2, [pc, #76]	@ (8000730 <MX_I2C1_Init+0x54>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_I2C1_Init+0x50>)
 80006e8:	4a12      	ldr	r2, [pc, #72]	@ (8000734 <MX_I2C1_Init+0x58>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_I2C1_Init+0x50>)
 80006fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	@ (800072c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	@ (800072c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	@ (800072c <MX_I2C1_Init+0x50>)
 800071a:	f001 f90f 	bl	800193c <HAL_I2C_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 f972 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000084 	.word	0x20000084
 8000730:	40005400 	.word	0x40005400
 8000734:	000186a0 	.word	0x000186a0

08000738 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	@ 0x28
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a19      	ldr	r2, [pc, #100]	@ (80007bc <HAL_I2C_MspInit+0x84>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d12b      	bne.n	80007b2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <HAL_I2C_MspInit+0x88>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a17      	ldr	r2, [pc, #92]	@ (80007c0 <HAL_I2C_MspInit+0x88>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <HAL_I2C_MspInit+0x88>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000776:	23c0      	movs	r3, #192	@ 0xc0
 8000778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800077a:	2312      	movs	r3, #18
 800077c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000786:	2304      	movs	r3, #4
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	4619      	mov	r1, r3
 8000790:	480c      	ldr	r0, [pc, #48]	@ (80007c4 <HAL_I2C_MspInit+0x8c>)
 8000792:	f000 feeb 	bl	800156c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <HAL_I2C_MspInit+0x88>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079e:	4a08      	ldr	r2, [pc, #32]	@ (80007c0 <HAL_I2C_MspInit+0x88>)
 80007a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <HAL_I2C_MspInit+0x88>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007b2:	bf00      	nop
 80007b4:	3728      	adds	r7, #40	@ 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40005400 	.word	0x40005400
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020400 	.word	0x40020400

080007c8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 80007d0:	1d39      	adds	r1, r7, #4
 80007d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007d6:	2201      	movs	r2, #1
 80007d8:	4803      	ldr	r0, [pc, #12]	@ (80007e8 <__io_putchar+0x20>)
 80007da:	f002 fe91 	bl	8003500 <HAL_UART_Transmit>
    return ch;
 80007de:	687b      	ldr	r3, [r7, #4]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000021c 	.word	0x2000021c

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b090      	sub	sp, #64	@ 0x40
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f2:	f000 fd13 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f6:	f000 f89f 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fa:	f7ff fec1 	bl	8000580 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007fe:	f7ff ff6d 	bl	80006dc <MX_I2C1_Init>
  MX_SPI1_Init();
 8000802:	f000 f909 	bl	8000a18 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000806:	f000 f93d 	bl	8000a84 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800080a:	f000 fc0d 	bl	8001028 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800080e:	f000 fc35 	bl	800107c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000812:	f000 fb7d 	bl	8000f10 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000816:	f000 fb2b 	bl	8000e70 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800081a:	483e      	ldr	r0, [pc, #248]	@ (8000914 <main+0x128>)
 800081c:	f002 f9f0 	bl	8002c00 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(SYS_LED0_GPIO_Port, SYS_LED0_Pin, GPIO_PIN_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	2101      	movs	r1, #1
 8000824:	483c      	ldr	r0, [pc, #240]	@ (8000918 <main+0x12c>)
 8000826:	f001 f855 	bl	80018d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SYS_LED1_GPIO_Port, SYS_LED1_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	2102      	movs	r1, #2
 800082e:	483a      	ldr	r0, [pc, #232]	@ (8000918 <main+0x12c>)
 8000830:	f001 f850 	bl	80018d4 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start(&htim1);
 8000834:	4839      	ldr	r0, [pc, #228]	@ (800091c <main+0x130>)
 8000836:	f002 f97b 	bl	8002b30 <HAL_TIM_Base_Start>

  while (NRF24L01_Check());
 800083a:	bf00      	nop
 800083c:	f003 fa38 	bl	8003cb0 <NRF24L01_Check>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1fa      	bne.n	800083c <main+0x50>
  printf("NRF24L01 OK!\r\n");
 8000846:	4836      	ldr	r0, [pc, #216]	@ (8000920 <main+0x134>)
 8000848:	f003 fe0c 	bl	8004464 <puts>
  NRF24L01_TX_Mode();
 800084c:	f003 fb62 	bl	8003f14 <NRF24L01_TX_Mode>

  while (NRF24L02_Check());
 8000850:	bf00      	nop
 8000852:	f003 fb99 	bl	8003f88 <NRF24L02_Check>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1fa      	bne.n	8000852 <main+0x66>
  printf("NRF24L02 OK!\r\n");
 800085c:	4831      	ldr	r0, [pc, #196]	@ (8000924 <main+0x138>)
 800085e:	f003 fe01 	bl	8004464 <puts>
  NRF24L02_RX_Mode();
 8000862:	f003 fca3 	bl	80041ac <NRF24L02_RX_Mode>

  uint8_t transmit_data[16]={"REQ"};
 8000866:	4b30      	ldr	r3, [pc, #192]	@ (8000928 <main+0x13c>)
 8000868:	623b      	str	r3, [r7, #32]
 800086a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
  uint8_t receive_buff[32];
  uint8_t n = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint8_t flag = 1; // 收到数据为1，超时未收到数据为0
 800087c:	2301      	movs	r3, #1
 800087e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  uint32_t start_time = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t end_time = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t elapsed_cycles = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  flag = 1;
 800088e:	2301      	movs	r3, #1
 8000890:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	  __HAL_TIM_SET_COUNTER(&htim1, 0); // 计时器归零
 8000894:	4b21      	ldr	r3, [pc, #132]	@ (800091c <main+0x130>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2200      	movs	r2, #0
 800089a:	625a      	str	r2, [r3, #36]	@ 0x24
	  start_time = __HAL_TIM_GET_COUNTER(&htim1); // 记录发送前的时钟刻
 800089c:	4b1f      	ldr	r3, [pc, #124]	@ (800091c <main+0x130>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008a2:	63bb      	str	r3, [r7, #56]	@ 0x38
	  NRF24L01_TxPacket_Data((uint8_t *)transmit_data, 32); // 发送数据
 80008a4:	f107 0320 	add.w	r3, r7, #32
 80008a8:	2120      	movs	r1, #32
 80008aa:	4618      	mov	r0, r3
 80008ac:	f003 faee 	bl	8003e8c <NRF24L01_TxPacket_Data>
	  while (NRF24L02_RxPacket(receive_buff) != 0 || strcmp((char *)receive_buff, "ACK") != 0) // 未收到数据或数据并非期望的字段
 80008b0:	e00d      	b.n	80008ce <main+0xe2>
	  {
		  if (n++ > 99) // 99个时钟刻后仍然没有收到数据或收到指定数据，则判定为超时，不记录时间并跳出循环，进行下一次发送（重发）
 80008b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80008bc:	2b63      	cmp	r3, #99	@ 0x63
 80008be:	d906      	bls.n	80008ce <main+0xe2>
		  {
			  flag = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
			  printf("0\n");
 80008c6:	4819      	ldr	r0, [pc, #100]	@ (800092c <main+0x140>)
 80008c8:	f003 fdcc 	bl	8004464 <puts>
			  break;
 80008cc:	e00e      	b.n	80008ec <main+0x100>
	  while (NRF24L02_RxPacket(receive_buff) != 0 || strcmp((char *)receive_buff, "ACK") != 0) // 未收到数据或数据并非期望的字段
 80008ce:	463b      	mov	r3, r7
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 fc47 	bl	8004164 <NRF24L02_RxPacket>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1ea      	bne.n	80008b2 <main+0xc6>
 80008dc:	463b      	mov	r3, r7
 80008de:	4914      	ldr	r1, [pc, #80]	@ (8000930 <main+0x144>)
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fc75 	bl	80001d0 <strcmp>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1e2      	bne.n	80008b2 <main+0xc6>
		  }
	  }
	  if (flag) // 只有收到有效数据才计时
 80008ec:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d00b      	beq.n	800090c <main+0x120>
	  {
		  end_time = __HAL_TIM_GET_COUNTER(&htim1); // 记录接收到有效数据的时钟刻
 80008f4:	4b09      	ldr	r3, [pc, #36]	@ (800091c <main+0x130>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008fa:	637b      	str	r3, [r7, #52]	@ 0x34
		  elapsed_cycles = end_time - start_time;
 80008fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80008fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	633b      	str	r3, [r7, #48]	@ 0x30
		  printf("%lu\n", elapsed_cycles);
 8000904:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000906:	480b      	ldr	r0, [pc, #44]	@ (8000934 <main+0x148>)
 8000908:	f003 fd44 	bl	8004394 <iprintf>
	  }
	  HAL_Delay(50);
 800090c:	2032      	movs	r0, #50	@ 0x32
 800090e:	f000 fcf7 	bl	8001300 <HAL_Delay>
	  flag = 1;
 8000912:	e7bc      	b.n	800088e <main+0xa2>
 8000914:	200001d4 	.word	0x200001d4
 8000918:	40020c00 	.word	0x40020c00
 800091c:	2000018c 	.word	0x2000018c
 8000920:	08005144 	.word	0x08005144
 8000924:	08005154 	.word	0x08005154
 8000928:	00514552 	.word	0x00514552
 800092c:	08005164 	.word	0x08005164
 8000930:	08005168 	.word	0x08005168
 8000934:	0800516c 	.word	0x0800516c

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b094      	sub	sp, #80	@ 0x50
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0320 	add.w	r3, r7, #32
 8000942:	2230      	movs	r2, #48	@ 0x30
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f003 fe6c 	bl	8004624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	4b28      	ldr	r3, [pc, #160]	@ (8000a04 <SystemClock_Config+0xcc>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000964:	4a27      	ldr	r2, [pc, #156]	@ (8000a04 <SystemClock_Config+0xcc>)
 8000966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800096a:	6413      	str	r3, [r2, #64]	@ 0x40
 800096c:	4b25      	ldr	r3, [pc, #148]	@ (8000a04 <SystemClock_Config+0xcc>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	4b22      	ldr	r3, [pc, #136]	@ (8000a08 <SystemClock_Config+0xd0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a21      	ldr	r2, [pc, #132]	@ (8000a08 <SystemClock_Config+0xd0>)
 8000982:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	4b1f      	ldr	r3, [pc, #124]	@ (8000a08 <SystemClock_Config+0xd0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000994:	2301      	movs	r3, #1
 8000996:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000998:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099e:	2302      	movs	r3, #2
 80009a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80009a8:	2319      	movs	r3, #25
 80009aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009ac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b2:	2302      	movs	r3, #2
 80009b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009b6:	2304      	movs	r3, #4
 80009b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ba:	f107 0320 	add.w	r3, r7, #32
 80009be:	4618      	mov	r0, r3
 80009c0:	f001 f900 	bl	8001bc4 <HAL_RCC_OscConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009ca:	f000 f81f 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ce:	230f      	movs	r3, #15
 80009d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d2:	2302      	movs	r3, #2
 80009d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009da:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	2105      	movs	r1, #5
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 fb61 	bl	80020b4 <HAL_RCC_ClockConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009f8:	f000 f808 	bl	8000a0c <Error_Handler>
  }
}
 80009fc:	bf00      	nop
 80009fe:	3750      	adds	r7, #80	@ 0x50
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40007000 	.word	0x40007000

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <Error_Handler+0x8>

08000a18 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a1e:	4a18      	ldr	r2, [pc, #96]	@ (8000a80 <MX_SPI1_Init+0x68>)
 8000a20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a22:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a4c:	2210      	movs	r2, #16
 8000a4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a56:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a64:	220a      	movs	r2, #10
 8000a66:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a6a:	f001 fd03 	bl	8002474 <HAL_SPI_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a74:	f7ff ffca 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200000d8 	.word	0x200000d8
 8000a80:	40013000 	.word	0x40013000

08000a84 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000a88:	4b17      	ldr	r3, [pc, #92]	@ (8000ae8 <MX_SPI2_Init+0x64>)
 8000a8a:	4a18      	ldr	r2, [pc, #96]	@ (8000aec <MX_SPI2_Init+0x68>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ae8 <MX_SPI2_Init+0x64>)
 8000a90:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a96:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <MX_SPI2_Init+0x64>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <MX_SPI2_Init+0x64>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_SPI2_Init+0x64>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <MX_SPI2_Init+0x64>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <MX_SPI2_Init+0x64>)
 8000ab0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ab4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <MX_SPI2_Init+0x64>)
 8000ab8:	2210      	movs	r2, #16
 8000aba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000abc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae8 <MX_SPI2_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac2:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <MX_SPI2_Init+0x64>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac8:	4b07      	ldr	r3, [pc, #28]	@ (8000ae8 <MX_SPI2_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ace:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <MX_SPI2_Init+0x64>)
 8000ad0:	220a      	movs	r2, #10
 8000ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ad4:	4804      	ldr	r0, [pc, #16]	@ (8000ae8 <MX_SPI2_Init+0x64>)
 8000ad6:	f001 fccd 	bl	8002474 <HAL_SPI_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ae0:	f7ff ff94 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000130 	.word	0x20000130
 8000aec:	40003800 	.word	0x40003800

08000af0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	@ 0x30
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a41      	ldr	r2, [pc, #260]	@ (8000c14 <HAL_SPI_MspInit+0x124>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d12c      	bne.n	8000b6c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
 8000b16:	4b40      	ldr	r3, [pc, #256]	@ (8000c18 <HAL_SPI_MspInit+0x128>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1a:	4a3f      	ldr	r2, [pc, #252]	@ (8000c18 <HAL_SPI_MspInit+0x128>)
 8000b1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b22:	4b3d      	ldr	r3, [pc, #244]	@ (8000c18 <HAL_SPI_MspInit+0x128>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	4b39      	ldr	r3, [pc, #228]	@ (8000c18 <HAL_SPI_MspInit+0x128>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	4a38      	ldr	r2, [pc, #224]	@ (8000c18 <HAL_SPI_MspInit+0x128>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3e:	4b36      	ldr	r3, [pc, #216]	@ (8000c18 <HAL_SPI_MspInit+0x128>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b4a:	23e0      	movs	r3, #224	@ 0xe0
 8000b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b5a:	2305      	movs	r3, #5
 8000b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	482d      	ldr	r0, [pc, #180]	@ (8000c1c <HAL_SPI_MspInit+0x12c>)
 8000b66:	f000 fd01 	bl	800156c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000b6a:	e04f      	b.n	8000c0c <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a2b      	ldr	r2, [pc, #172]	@ (8000c20 <HAL_SPI_MspInit+0x130>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d14a      	bne.n	8000c0c <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b27      	ldr	r3, [pc, #156]	@ (8000c18 <HAL_SPI_MspInit+0x128>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	4a26      	ldr	r2, [pc, #152]	@ (8000c18 <HAL_SPI_MspInit+0x128>)
 8000b80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b86:	4b24      	ldr	r3, [pc, #144]	@ (8000c18 <HAL_SPI_MspInit+0x128>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b20      	ldr	r3, [pc, #128]	@ (8000c18 <HAL_SPI_MspInit+0x128>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8000c18 <HAL_SPI_MspInit+0x128>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <HAL_SPI_MspInit+0x128>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <HAL_SPI_MspInit+0x128>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a18      	ldr	r2, [pc, #96]	@ (8000c18 <HAL_SPI_MspInit+0x128>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <HAL_SPI_MspInit+0x128>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bca:	230c      	movs	r3, #12
 8000bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bda:	2305      	movs	r3, #5
 8000bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	480f      	ldr	r0, [pc, #60]	@ (8000c24 <HAL_SPI_MspInit+0x134>)
 8000be6:	f000 fcc1 	bl	800156c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bfc:	2305      	movs	r3, #5
 8000bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	4619      	mov	r1, r3
 8000c06:	4808      	ldr	r0, [pc, #32]	@ (8000c28 <HAL_SPI_MspInit+0x138>)
 8000c08:	f000 fcb0 	bl	800156c <HAL_GPIO_Init>
}
 8000c0c:	bf00      	nop
 8000c0e:	3730      	adds	r7, #48	@ 0x30
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40013000 	.word	0x40013000
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	40003800 	.word	0x40003800
 8000c24:	40020800 	.word	0x40020800
 8000c28:	40020400 	.word	0x40020400

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c42:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c56:	4a08      	ldr	r2, [pc, #32]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <NMI_Handler+0x4>

08000c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <MemManage_Handler+0x4>

08000c94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd2:	f000 faf5 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ce0:	4806      	ldr	r0, [pc, #24]	@ (8000cfc <TIM3_IRQHandler+0x20>)
 8000ce2:	f001 fffd 	bl	8002ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_GPIO_TogglePin(SYS_LED0_GPIO_Port, SYS_LED0_Pin);
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	4805      	ldr	r0, [pc, #20]	@ (8000d00 <TIM3_IRQHandler+0x24>)
 8000cea:	f000 fe0c 	bl	8001906 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(SYS_LED1_GPIO_Port, SYS_LED1_Pin);
 8000cee:	2102      	movs	r1, #2
 8000cf0:	4803      	ldr	r0, [pc, #12]	@ (8000d00 <TIM3_IRQHandler+0x24>)
 8000cf2:	f000 fe08 	bl	8001906 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200001d4 	.word	0x200001d4
 8000d00:	40020c00 	.word	0x40020c00

08000d04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	e00a      	b.n	8000d2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d16:	f3af 8000 	nop.w
 8000d1a:	4601      	mov	r1, r0
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	60ba      	str	r2, [r7, #8]
 8000d22:	b2ca      	uxtb	r2, r1
 8000d24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697a      	ldr	r2, [r7, #20]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	dbf0      	blt.n	8000d16 <_read+0x12>
  }

  return len;
 8000d34:	687b      	ldr	r3, [r7, #4]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	e009      	b.n	8000d64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	60ba      	str	r2, [r7, #8]
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fd35 	bl	80007c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dbf1      	blt.n	8000d50 <_write+0x12>
  }
  return len;
 8000d6c:	687b      	ldr	r3, [r7, #4]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <_close>:

int _close(int file)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d9e:	605a      	str	r2, [r3, #4]
  return 0;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_isatty>:

int _isatty(int file)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	@ (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	@ (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f003 fc56 	bl	80046c0 <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20020000 	.word	0x20020000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	20000188 	.word	0x20000188
 8000e48:	20000400 	.word	0x20000400

08000e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	@ (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e84:	463b      	mov	r3, r7
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f08 <MX_TIM1_Init+0x98>)
 8000e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8000f0c <MX_TIM1_Init+0x9c>)
 8000e90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e92:	4b1d      	ldr	r3, [pc, #116]	@ (8000f08 <MX_TIM1_Init+0x98>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <MX_TIM1_Init+0x98>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <MX_TIM1_Init+0x98>)
 8000ea0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ea4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea6:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <MX_TIM1_Init+0x98>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eac:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <MX_TIM1_Init+0x98>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb2:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <MX_TIM1_Init+0x98>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000eb8:	4813      	ldr	r0, [pc, #76]	@ (8000f08 <MX_TIM1_Init+0x98>)
 8000eba:	f001 fde9 	bl	8002a90 <HAL_TIM_Base_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ec4:	f7ff fda2 	bl	8000a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ecc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ece:	f107 0308 	add.w	r3, r7, #8
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	480c      	ldr	r0, [pc, #48]	@ (8000f08 <MX_TIM1_Init+0x98>)
 8000ed6:	f001 fff3 	bl	8002ec0 <HAL_TIM_ConfigClockSource>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ee0:	f7ff fd94 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eec:	463b      	mov	r3, r7
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <MX_TIM1_Init+0x98>)
 8000ef2:	f002 fa25 	bl	8003340 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000efc:	f7ff fd86 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	2000018c 	.word	0x2000018c
 8000f0c:	40010000 	.word	0x40010000

08000f10 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f16:	f107 0308 	add.w	r3, r7, #8
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f24:	463b      	mov	r3, r7
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa4 <MX_TIM3_Init+0x94>)
 8000f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa8 <MX_TIM3_Init+0x98>)
 8000f30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000f32:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa4 <MX_TIM3_Init+0x94>)
 8000f34:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000f38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <MX_TIM3_Init+0x94>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000f40:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <MX_TIM3_Init+0x94>)
 8000f42:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f48:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <MX_TIM3_Init+0x94>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <MX_TIM3_Init+0x94>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f54:	4813      	ldr	r0, [pc, #76]	@ (8000fa4 <MX_TIM3_Init+0x94>)
 8000f56:	f001 fd9b 	bl	8002a90 <HAL_TIM_Base_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000f60:	f7ff fd54 	bl	8000a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <MX_TIM3_Init+0x94>)
 8000f72:	f001 ffa5 	bl	8002ec0 <HAL_TIM_ConfigClockSource>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000f7c:	f7ff fd46 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f80:	2300      	movs	r3, #0
 8000f82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <MX_TIM3_Init+0x94>)
 8000f8e:	f002 f9d7 	bl	8003340 <HAL_TIMEx_MasterConfigSynchronization>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000f98:	f7ff fd38 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200001d4 	.word	0x200001d4
 8000fa8:	40000400 	.word	0x40000400

08000fac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a18      	ldr	r2, [pc, #96]	@ (800101c <HAL_TIM_Base_MspInit+0x70>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d10e      	bne.n	8000fdc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b17      	ldr	r3, [pc, #92]	@ (8001020 <HAL_TIM_Base_MspInit+0x74>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc6:	4a16      	ldr	r2, [pc, #88]	@ (8001020 <HAL_TIM_Base_MspInit+0x74>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fce:	4b14      	ldr	r3, [pc, #80]	@ (8001020 <HAL_TIM_Base_MspInit+0x74>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000fda:	e01a      	b.n	8001012 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM3)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a10      	ldr	r2, [pc, #64]	@ (8001024 <HAL_TIM_Base_MspInit+0x78>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d115      	bne.n	8001012 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <HAL_TIM_Base_MspInit+0x74>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	4a0c      	ldr	r2, [pc, #48]	@ (8001020 <HAL_TIM_Base_MspInit+0x74>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <HAL_TIM_Base_MspInit+0x74>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	201d      	movs	r0, #29
 8001008:	f000 fa79 	bl	80014fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800100c:	201d      	movs	r0, #29
 800100e:	f000 fa92 	bl	8001536 <HAL_NVIC_EnableIRQ>
}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40010000 	.word	0x40010000
 8001020:	40023800 	.word	0x40023800
 8001024:	40000400 	.word	0x40000400

08001028 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 800102e:	4a12      	ldr	r2, [pc, #72]	@ (8001078 <MX_USART1_UART_Init+0x50>)
 8001030:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001032:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 8001034:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001038:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800103a:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001040:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001046:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800104c:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 800104e:	220c      	movs	r2, #12
 8001050:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001052:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800105e:	4805      	ldr	r0, [pc, #20]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 8001060:	f002 f9fe 	bl	8003460 <HAL_UART_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800106a:	f7ff fccf 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	2000021c 	.word	0x2000021c
 8001078:	40011000 	.word	0x40011000

0800107c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <MX_USART2_UART_Init+0x4c>)
 8001082:	4a12      	ldr	r2, [pc, #72]	@ (80010cc <MX_USART2_UART_Init+0x50>)
 8001084:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <MX_USART2_UART_Init+0x4c>)
 8001088:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800108c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <MX_USART2_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <MX_USART2_UART_Init+0x4c>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800109a:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <MX_USART2_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <MX_USART2_UART_Init+0x4c>)
 80010a2:	220c      	movs	r2, #12
 80010a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a6:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <MX_USART2_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <MX_USART2_UART_Init+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <MX_USART2_UART_Init+0x4c>)
 80010b4:	f002 f9d4 	bl	8003460 <HAL_UART_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010be:	f7ff fca5 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000264 	.word	0x20000264
 80010cc:	40004400 	.word	0x40004400

080010d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	@ 0x30
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a32      	ldr	r2, [pc, #200]	@ (80011b8 <HAL_UART_MspInit+0xe8>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d12d      	bne.n	800114e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	4b31      	ldr	r3, [pc, #196]	@ (80011bc <HAL_UART_MspInit+0xec>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	4a30      	ldr	r2, [pc, #192]	@ (80011bc <HAL_UART_MspInit+0xec>)
 80010fc:	f043 0310 	orr.w	r3, r3, #16
 8001100:	6453      	str	r3, [r2, #68]	@ 0x44
 8001102:	4b2e      	ldr	r3, [pc, #184]	@ (80011bc <HAL_UART_MspInit+0xec>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	4b2a      	ldr	r3, [pc, #168]	@ (80011bc <HAL_UART_MspInit+0xec>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a29      	ldr	r2, [pc, #164]	@ (80011bc <HAL_UART_MspInit+0xec>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b27      	ldr	r3, [pc, #156]	@ (80011bc <HAL_UART_MspInit+0xec>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800112a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800112e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800113c:	2307      	movs	r3, #7
 800113e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	481e      	ldr	r0, [pc, #120]	@ (80011c0 <HAL_UART_MspInit+0xf0>)
 8001148:	f000 fa10 	bl	800156c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800114c:	e030      	b.n	80011b0 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a1c      	ldr	r2, [pc, #112]	@ (80011c4 <HAL_UART_MspInit+0xf4>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d12b      	bne.n	80011b0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	4b17      	ldr	r3, [pc, #92]	@ (80011bc <HAL_UART_MspInit+0xec>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001160:	4a16      	ldr	r2, [pc, #88]	@ (80011bc <HAL_UART_MspInit+0xec>)
 8001162:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001166:	6413      	str	r3, [r2, #64]	@ 0x40
 8001168:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <HAL_UART_MspInit+0xec>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <HAL_UART_MspInit+0xec>)
 800117a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117c:	4a0f      	ldr	r2, [pc, #60]	@ (80011bc <HAL_UART_MspInit+0xec>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6313      	str	r3, [r2, #48]	@ 0x30
 8001184:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <HAL_UART_MspInit+0xec>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001190:	230c      	movs	r3, #12
 8001192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011a0:	2307      	movs	r3, #7
 80011a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	4805      	ldr	r0, [pc, #20]	@ (80011c0 <HAL_UART_MspInit+0xf0>)
 80011ac:	f000 f9de 	bl	800156c <HAL_GPIO_Init>
}
 80011b0:	bf00      	nop
 80011b2:	3730      	adds	r7, #48	@ 0x30
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40011000 	.word	0x40011000
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020000 	.word	0x40020000
 80011c4:	40004400 	.word	0x40004400

080011c8 <Reset_Handler>:
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001200 <LoopFillZerobss+0xe>
 80011cc:	f7ff fe3e 	bl	8000e4c <SystemInit>
 80011d0:	480c      	ldr	r0, [pc, #48]	@ (8001204 <LoopFillZerobss+0x12>)
 80011d2:	490d      	ldr	r1, [pc, #52]	@ (8001208 <LoopFillZerobss+0x16>)
 80011d4:	4a0d      	ldr	r2, [pc, #52]	@ (800120c <LoopFillZerobss+0x1a>)
 80011d6:	2300      	movs	r3, #0
 80011d8:	e002      	b.n	80011e0 <LoopCopyDataInit>

080011da <CopyDataInit>:
 80011da:	58d4      	ldr	r4, [r2, r3]
 80011dc:	50c4      	str	r4, [r0, r3]
 80011de:	3304      	adds	r3, #4

080011e0 <LoopCopyDataInit>:
 80011e0:	18c4      	adds	r4, r0, r3
 80011e2:	428c      	cmp	r4, r1
 80011e4:	d3f9      	bcc.n	80011da <CopyDataInit>
 80011e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001210 <LoopFillZerobss+0x1e>)
 80011e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001214 <LoopFillZerobss+0x22>)
 80011ea:	2300      	movs	r3, #0
 80011ec:	e001      	b.n	80011f2 <LoopFillZerobss>

080011ee <FillZerobss>:
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	3204      	adds	r2, #4

080011f2 <LoopFillZerobss>:
 80011f2:	42a2      	cmp	r2, r4
 80011f4:	d3fb      	bcc.n	80011ee <FillZerobss>
 80011f6:	f003 fa69 	bl	80046cc <__libc_init_array>
 80011fa:	f7ff faf7 	bl	80007ec <main>
 80011fe:	4770      	bx	lr
 8001200:	20020000 	.word	0x20020000
 8001204:	20000000 	.word	0x20000000
 8001208:	20000068 	.word	0x20000068
 800120c:	080051f4 	.word	0x080051f4
 8001210:	20000068 	.word	0x20000068
 8001214:	200003fc 	.word	0x200003fc

08001218 <ADC_IRQHandler>:
 8001218:	e7fe      	b.n	8001218 <ADC_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001220:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0d      	ldr	r2, [pc, #52]	@ (800125c <HAL_Init+0x40>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800122a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800122c:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0a      	ldr	r2, [pc, #40]	@ (800125c <HAL_Init+0x40>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	@ (800125c <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	@ (800125c <HAL_Init+0x40>)
 800123e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f94f 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	200f      	movs	r0, #15
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fcec 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f967 	bl	8001552 <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 f92f 	bl	80014fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	@ (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000008 	.word	0x20000008
 80012bc:	20000004 	.word	0x20000004

080012c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	@ (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000008 	.word	0x20000008
 80012e4:	200002ac 	.word	0x200002ac

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	@ (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	200002ac 	.word	0x200002ac

08001300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff ffee 	bl	80012e8 <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001318:	d005      	beq.n	8001326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131a:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <HAL_Delay+0x44>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001326:	bf00      	nop
 8001328:	f7ff ffde 	bl	80012e8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	d8f7      	bhi.n	8001328 <HAL_Delay+0x28>
  {
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000008 	.word	0x20000008

08001348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001358:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001364:	4013      	ands	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001370:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137a:	4a04      	ldr	r2, [pc, #16]	@ (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	60d3      	str	r3, [r2, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001394:	4b04      	ldr	r3, [pc, #16]	@ (80013a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	f003 0307 	and.w	r3, r3, #7
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	db0b      	blt.n	80013d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 021f 	and.w	r2, r3, #31
 80013c4:	4907      	ldr	r1, [pc, #28]	@ (80013e4 <__NVIC_EnableIRQ+0x38>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	2001      	movs	r0, #1
 80013ce:	fa00 f202 	lsl.w	r2, r0, r2
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000e100 	.word	0xe000e100

080013e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	db0a      	blt.n	8001412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	490c      	ldr	r1, [pc, #48]	@ (8001434 <__NVIC_SetPriority+0x4c>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	440b      	add	r3, r1
 800140c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001410:	e00a      	b.n	8001428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4908      	ldr	r1, [pc, #32]	@ (8001438 <__NVIC_SetPriority+0x50>)
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	3b04      	subs	r3, #4
 8001420:	0112      	lsls	r2, r2, #4
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	440b      	add	r3, r1
 8001426:	761a      	strb	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000e100 	.word	0xe000e100
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	@ 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f1c3 0307 	rsb	r3, r3, #7
 8001456:	2b04      	cmp	r3, #4
 8001458:	bf28      	it	cs
 800145a:	2304      	movcs	r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3304      	adds	r3, #4
 8001462:	2b06      	cmp	r3, #6
 8001464:	d902      	bls.n	800146c <NVIC_EncodePriority+0x30>
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3b03      	subs	r3, #3
 800146a:	e000      	b.n	800146e <NVIC_EncodePriority+0x32>
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	f04f 32ff 	mov.w	r2, #4294967295
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43da      	mvns	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	401a      	ands	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001484:	f04f 31ff 	mov.w	r1, #4294967295
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43d9      	mvns	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	4313      	orrs	r3, r2
         );
}
 8001496:	4618      	mov	r0, r3
 8001498:	3724      	adds	r7, #36	@ 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014b4:	d301      	bcc.n	80014ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00f      	b.n	80014da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ba:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <SysTick_Config+0x40>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c2:	210f      	movs	r1, #15
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f7ff ff8e 	bl	80013e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014cc:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <SysTick_Config+0x40>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d2:	4b04      	ldr	r3, [pc, #16]	@ (80014e4 <SysTick_Config+0x40>)
 80014d4:	2207      	movs	r2, #7
 80014d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	e000e010 	.word	0xe000e010

080014e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ff29 	bl	8001348 <__NVIC_SetPriorityGrouping>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001510:	f7ff ff3e 	bl	8001390 <__NVIC_GetPriorityGrouping>
 8001514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f7ff ff8e 	bl	800143c <NVIC_EncodePriority>
 8001520:	4602      	mov	r2, r0
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff5d 	bl	80013e8 <__NVIC_SetPriority>
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff31 	bl	80013ac <__NVIC_EnableIRQ>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ffa2 	bl	80014a4 <SysTick_Config>
 8001560:	4603      	mov	r3, r0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	@ 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
 8001586:	e16b      	b.n	8001860 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001588:	2201      	movs	r2, #1
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	f040 815a 	bne.w	800185a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d005      	beq.n	80015be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d130      	bne.n	8001620 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	2203      	movs	r2, #3
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f4:	2201      	movs	r2, #1
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	091b      	lsrs	r3, r3, #4
 800160a:	f003 0201 	and.w	r2, r3, #1
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	2b03      	cmp	r3, #3
 800162a:	d017      	beq.n	800165c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	2203      	movs	r2, #3
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d123      	bne.n	80016b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	08da      	lsrs	r2, r3, #3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3208      	adds	r2, #8
 8001670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	220f      	movs	r2, #15
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	691a      	ldr	r2, [r3, #16]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	08da      	lsrs	r2, r3, #3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3208      	adds	r2, #8
 80016aa:	69b9      	ldr	r1, [r7, #24]
 80016ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	2203      	movs	r2, #3
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0203 	and.w	r2, r3, #3
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 80b4 	beq.w	800185a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b60      	ldr	r3, [pc, #384]	@ (8001878 <HAL_GPIO_Init+0x30c>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fa:	4a5f      	ldr	r2, [pc, #380]	@ (8001878 <HAL_GPIO_Init+0x30c>)
 80016fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001700:	6453      	str	r3, [r2, #68]	@ 0x44
 8001702:	4b5d      	ldr	r3, [pc, #372]	@ (8001878 <HAL_GPIO_Init+0x30c>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800170e:	4a5b      	ldr	r2, [pc, #364]	@ (800187c <HAL_GPIO_Init+0x310>)
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	089b      	lsrs	r3, r3, #2
 8001714:	3302      	adds	r3, #2
 8001716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	220f      	movs	r2, #15
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a52      	ldr	r2, [pc, #328]	@ (8001880 <HAL_GPIO_Init+0x314>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d02b      	beq.n	8001792 <HAL_GPIO_Init+0x226>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a51      	ldr	r2, [pc, #324]	@ (8001884 <HAL_GPIO_Init+0x318>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d025      	beq.n	800178e <HAL_GPIO_Init+0x222>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a50      	ldr	r2, [pc, #320]	@ (8001888 <HAL_GPIO_Init+0x31c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d01f      	beq.n	800178a <HAL_GPIO_Init+0x21e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4f      	ldr	r2, [pc, #316]	@ (800188c <HAL_GPIO_Init+0x320>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d019      	beq.n	8001786 <HAL_GPIO_Init+0x21a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4e      	ldr	r2, [pc, #312]	@ (8001890 <HAL_GPIO_Init+0x324>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d013      	beq.n	8001782 <HAL_GPIO_Init+0x216>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4d      	ldr	r2, [pc, #308]	@ (8001894 <HAL_GPIO_Init+0x328>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d00d      	beq.n	800177e <HAL_GPIO_Init+0x212>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a4c      	ldr	r2, [pc, #304]	@ (8001898 <HAL_GPIO_Init+0x32c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d007      	beq.n	800177a <HAL_GPIO_Init+0x20e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a4b      	ldr	r2, [pc, #300]	@ (800189c <HAL_GPIO_Init+0x330>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d101      	bne.n	8001776 <HAL_GPIO_Init+0x20a>
 8001772:	2307      	movs	r3, #7
 8001774:	e00e      	b.n	8001794 <HAL_GPIO_Init+0x228>
 8001776:	2308      	movs	r3, #8
 8001778:	e00c      	b.n	8001794 <HAL_GPIO_Init+0x228>
 800177a:	2306      	movs	r3, #6
 800177c:	e00a      	b.n	8001794 <HAL_GPIO_Init+0x228>
 800177e:	2305      	movs	r3, #5
 8001780:	e008      	b.n	8001794 <HAL_GPIO_Init+0x228>
 8001782:	2304      	movs	r3, #4
 8001784:	e006      	b.n	8001794 <HAL_GPIO_Init+0x228>
 8001786:	2303      	movs	r3, #3
 8001788:	e004      	b.n	8001794 <HAL_GPIO_Init+0x228>
 800178a:	2302      	movs	r3, #2
 800178c:	e002      	b.n	8001794 <HAL_GPIO_Init+0x228>
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <HAL_GPIO_Init+0x228>
 8001792:	2300      	movs	r3, #0
 8001794:	69fa      	ldr	r2, [r7, #28]
 8001796:	f002 0203 	and.w	r2, r2, #3
 800179a:	0092      	lsls	r2, r2, #2
 800179c:	4093      	lsls	r3, r2
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a4:	4935      	ldr	r1, [pc, #212]	@ (800187c <HAL_GPIO_Init+0x310>)
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	089b      	lsrs	r3, r3, #2
 80017aa:	3302      	adds	r3, #2
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017b2:	4b3b      	ldr	r3, [pc, #236]	@ (80018a0 <HAL_GPIO_Init+0x334>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017d6:	4a32      	ldr	r2, [pc, #200]	@ (80018a0 <HAL_GPIO_Init+0x334>)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017dc:	4b30      	ldr	r3, [pc, #192]	@ (80018a0 <HAL_GPIO_Init+0x334>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001800:	4a27      	ldr	r2, [pc, #156]	@ (80018a0 <HAL_GPIO_Init+0x334>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001806:	4b26      	ldr	r3, [pc, #152]	@ (80018a0 <HAL_GPIO_Init+0x334>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800182a:	4a1d      	ldr	r2, [pc, #116]	@ (80018a0 <HAL_GPIO_Init+0x334>)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <HAL_GPIO_Init+0x334>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001854:	4a12      	ldr	r2, [pc, #72]	@ (80018a0 <HAL_GPIO_Init+0x334>)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3301      	adds	r3, #1
 800185e:	61fb      	str	r3, [r7, #28]
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	2b0f      	cmp	r3, #15
 8001864:	f67f ae90 	bls.w	8001588 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3724      	adds	r7, #36	@ 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	40013800 	.word	0x40013800
 8001880:	40020000 	.word	0x40020000
 8001884:	40020400 	.word	0x40020400
 8001888:	40020800 	.word	0x40020800
 800188c:	40020c00 	.word	0x40020c00
 8001890:	40021000 	.word	0x40021000
 8001894:	40021400 	.word	0x40021400
 8001898:	40021800 	.word	0x40021800
 800189c:	40021c00 	.word	0x40021c00
 80018a0:	40013c00 	.word	0x40013c00

080018a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691a      	ldr	r2, [r3, #16]
 80018b4:	887b      	ldrh	r3, [r7, #2]
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
 80018c0:	e001      	b.n	80018c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	807b      	strh	r3, [r7, #2]
 80018e0:	4613      	mov	r3, r2
 80018e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018e4:	787b      	ldrb	r3, [r7, #1]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ea:	887a      	ldrh	r2, [r7, #2]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018f0:	e003      	b.n	80018fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018f2:	887b      	ldrh	r3, [r7, #2]
 80018f4:	041a      	lsls	r2, r3, #16
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	619a      	str	r2, [r3, #24]
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001906:	b480      	push	{r7}
 8001908:	b085      	sub	sp, #20
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	460b      	mov	r3, r1
 8001910:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001918:	887a      	ldrh	r2, [r7, #2]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4013      	ands	r3, r2
 800191e:	041a      	lsls	r2, r3, #16
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	43d9      	mvns	r1, r3
 8001924:	887b      	ldrh	r3, [r7, #2]
 8001926:	400b      	ands	r3, r1
 8001928:	431a      	orrs	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	619a      	str	r2, [r3, #24]
}
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e12b      	b.n	8001ba6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d106      	bne.n	8001968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7fe fee8 	bl	8000738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2224      	movs	r2, #36	@ 0x24
 800196c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0201 	bic.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800198e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800199e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019a0:	f000 fd40 	bl	8002424 <HAL_RCC_GetPCLK1Freq>
 80019a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4a81      	ldr	r2, [pc, #516]	@ (8001bb0 <HAL_I2C_Init+0x274>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d807      	bhi.n	80019c0 <HAL_I2C_Init+0x84>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4a80      	ldr	r2, [pc, #512]	@ (8001bb4 <HAL_I2C_Init+0x278>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	bf94      	ite	ls
 80019b8:	2301      	movls	r3, #1
 80019ba:	2300      	movhi	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	e006      	b.n	80019ce <HAL_I2C_Init+0x92>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4a7d      	ldr	r2, [pc, #500]	@ (8001bb8 <HAL_I2C_Init+0x27c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	bf94      	ite	ls
 80019c8:	2301      	movls	r3, #1
 80019ca:	2300      	movhi	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e0e7      	b.n	8001ba6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4a78      	ldr	r2, [pc, #480]	@ (8001bbc <HAL_I2C_Init+0x280>)
 80019da:	fba2 2303 	umull	r2, r3, r2, r3
 80019de:	0c9b      	lsrs	r3, r3, #18
 80019e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4a6a      	ldr	r2, [pc, #424]	@ (8001bb0 <HAL_I2C_Init+0x274>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d802      	bhi.n	8001a10 <HAL_I2C_Init+0xd4>
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	e009      	b.n	8001a24 <HAL_I2C_Init+0xe8>
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a16:	fb02 f303 	mul.w	r3, r2, r3
 8001a1a:	4a69      	ldr	r2, [pc, #420]	@ (8001bc0 <HAL_I2C_Init+0x284>)
 8001a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a20:	099b      	lsrs	r3, r3, #6
 8001a22:	3301      	adds	r3, #1
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	495c      	ldr	r1, [pc, #368]	@ (8001bb0 <HAL_I2C_Init+0x274>)
 8001a40:	428b      	cmp	r3, r1
 8001a42:	d819      	bhi.n	8001a78 <HAL_I2C_Init+0x13c>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	1e59      	subs	r1, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a52:	1c59      	adds	r1, r3, #1
 8001a54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a58:	400b      	ands	r3, r1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00a      	beq.n	8001a74 <HAL_I2C_Init+0x138>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1e59      	subs	r1, r3, #1
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a72:	e051      	b.n	8001b18 <HAL_I2C_Init+0x1dc>
 8001a74:	2304      	movs	r3, #4
 8001a76:	e04f      	b.n	8001b18 <HAL_I2C_Init+0x1dc>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d111      	bne.n	8001aa4 <HAL_I2C_Init+0x168>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1e58      	subs	r0, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6859      	ldr	r1, [r3, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	440b      	add	r3, r1
 8001a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a92:	3301      	adds	r3, #1
 8001a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf0c      	ite	eq
 8001a9c:	2301      	moveq	r3, #1
 8001a9e:	2300      	movne	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	e012      	b.n	8001aca <HAL_I2C_Init+0x18e>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1e58      	subs	r0, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6859      	ldr	r1, [r3, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	0099      	lsls	r1, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aba:	3301      	adds	r3, #1
 8001abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	bf0c      	ite	eq
 8001ac4:	2301      	moveq	r3, #1
 8001ac6:	2300      	movne	r3, #0
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_I2C_Init+0x196>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e022      	b.n	8001b18 <HAL_I2C_Init+0x1dc>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10e      	bne.n	8001af8 <HAL_I2C_Init+0x1bc>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1e58      	subs	r0, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6859      	ldr	r1, [r3, #4]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	440b      	add	r3, r1
 8001ae8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aec:	3301      	adds	r3, #1
 8001aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001af6:	e00f      	b.n	8001b18 <HAL_I2C_Init+0x1dc>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1e58      	subs	r0, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6859      	ldr	r1, [r3, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	0099      	lsls	r1, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	6809      	ldr	r1, [r1, #0]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69da      	ldr	r2, [r3, #28]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6911      	ldr	r1, [r2, #16]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	68d2      	ldr	r2, [r2, #12]
 8001b52:	4311      	orrs	r1, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	430b      	orrs	r3, r1
 8001b5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2220      	movs	r2, #32
 8001b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	000186a0 	.word	0x000186a0
 8001bb4:	001e847f 	.word	0x001e847f
 8001bb8:	003d08ff 	.word	0x003d08ff
 8001bbc:	431bde83 	.word	0x431bde83
 8001bc0:	10624dd3 	.word	0x10624dd3

08001bc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e267      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d075      	beq.n	8001cce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001be2:	4b88      	ldr	r3, [pc, #544]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d00c      	beq.n	8001c08 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bee:	4b85      	ldr	r3, [pc, #532]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d112      	bne.n	8001c20 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bfa:	4b82      	ldr	r3, [pc, #520]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c06:	d10b      	bne.n	8001c20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	4b7e      	ldr	r3, [pc, #504]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d05b      	beq.n	8001ccc <HAL_RCC_OscConfig+0x108>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d157      	bne.n	8001ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e242      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c28:	d106      	bne.n	8001c38 <HAL_RCC_OscConfig+0x74>
 8001c2a:	4b76      	ldr	r3, [pc, #472]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a75      	ldr	r2, [pc, #468]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e01d      	b.n	8001c74 <HAL_RCC_OscConfig+0xb0>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x98>
 8001c42:	4b70      	ldr	r3, [pc, #448]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a6f      	ldr	r2, [pc, #444]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	4b6d      	ldr	r3, [pc, #436]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a6c      	ldr	r2, [pc, #432]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e00b      	b.n	8001c74 <HAL_RCC_OscConfig+0xb0>
 8001c5c:	4b69      	ldr	r3, [pc, #420]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a68      	ldr	r2, [pc, #416]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	4b66      	ldr	r3, [pc, #408]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a65      	ldr	r2, [pc, #404]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d013      	beq.n	8001ca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fb34 	bl	80012e8 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff fb30 	bl	80012e8 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	@ 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e207      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	4b5b      	ldr	r3, [pc, #364]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0xc0>
 8001ca2:	e014      	b.n	8001cce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fb20 	bl	80012e8 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cac:	f7ff fb1c 	bl	80012e8 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b64      	cmp	r3, #100	@ 0x64
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e1f3      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	4b51      	ldr	r3, [pc, #324]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0xe8>
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d063      	beq.n	8001da2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001cda:	4b4a      	ldr	r3, [pc, #296]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00b      	beq.n	8001cfe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ce6:	4b47      	ldr	r3, [pc, #284]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d11c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cf2:	4b44      	ldr	r3, [pc, #272]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d116      	bne.n	8001d2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfe:	4b41      	ldr	r3, [pc, #260]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d005      	beq.n	8001d16 <HAL_RCC_OscConfig+0x152>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d001      	beq.n	8001d16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e1c7      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d16:	4b3b      	ldr	r3, [pc, #236]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4937      	ldr	r1, [pc, #220]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	e03a      	b.n	8001da2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d020      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d34:	4b34      	ldr	r3, [pc, #208]	@ (8001e08 <HAL_RCC_OscConfig+0x244>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3a:	f7ff fad5 	bl	80012e8 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d42:	f7ff fad1 	bl	80012e8 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e1a8      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d54:	4b2b      	ldr	r3, [pc, #172]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d60:	4b28      	ldr	r3, [pc, #160]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4925      	ldr	r1, [pc, #148]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]
 8001d74:	e015      	b.n	8001da2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d76:	4b24      	ldr	r3, [pc, #144]	@ (8001e08 <HAL_RCC_OscConfig+0x244>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fab4 	bl	80012e8 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d84:	f7ff fab0 	bl	80012e8 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e187      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	4b1b      	ldr	r3, [pc, #108]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d036      	beq.n	8001e1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d016      	beq.n	8001de4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db6:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <HAL_RCC_OscConfig+0x248>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbc:	f7ff fa94 	bl	80012e8 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc4:	f7ff fa90 	bl	80012e8 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e167      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x200>
 8001de2:	e01b      	b.n	8001e1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de4:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <HAL_RCC_OscConfig+0x248>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dea:	f7ff fa7d 	bl	80012e8 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df0:	e00e      	b.n	8001e10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df2:	f7ff fa79 	bl	80012e8 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d907      	bls.n	8001e10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e150      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
 8001e04:	40023800 	.word	0x40023800
 8001e08:	42470000 	.word	0x42470000
 8001e0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e10:	4b88      	ldr	r3, [pc, #544]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1ea      	bne.n	8001df2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 8097 	beq.w	8001f58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2e:	4b81      	ldr	r3, [pc, #516]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10f      	bne.n	8001e5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	4b7d      	ldr	r3, [pc, #500]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	4a7c      	ldr	r2, [pc, #496]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4a:	4b7a      	ldr	r3, [pc, #488]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e56:	2301      	movs	r3, #1
 8001e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5a:	4b77      	ldr	r3, [pc, #476]	@ (8002038 <HAL_RCC_OscConfig+0x474>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d118      	bne.n	8001e98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e66:	4b74      	ldr	r3, [pc, #464]	@ (8002038 <HAL_RCC_OscConfig+0x474>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a73      	ldr	r2, [pc, #460]	@ (8002038 <HAL_RCC_OscConfig+0x474>)
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e72:	f7ff fa39 	bl	80012e8 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7a:	f7ff fa35 	bl	80012e8 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e10c      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8c:	4b6a      	ldr	r3, [pc, #424]	@ (8002038 <HAL_RCC_OscConfig+0x474>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x2ea>
 8001ea0:	4b64      	ldr	r3, [pc, #400]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea4:	4a63      	ldr	r2, [pc, #396]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eac:	e01c      	b.n	8001ee8 <HAL_RCC_OscConfig+0x324>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b05      	cmp	r3, #5
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x30c>
 8001eb6:	4b5f      	ldr	r3, [pc, #380]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eba:	4a5e      	ldr	r2, [pc, #376]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ec2:	4b5c      	ldr	r3, [pc, #368]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec6:	4a5b      	ldr	r2, [pc, #364]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ece:	e00b      	b.n	8001ee8 <HAL_RCC_OscConfig+0x324>
 8001ed0:	4b58      	ldr	r3, [pc, #352]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed4:	4a57      	ldr	r2, [pc, #348]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ed6:	f023 0301 	bic.w	r3, r3, #1
 8001eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8001edc:	4b55      	ldr	r3, [pc, #340]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee0:	4a54      	ldr	r2, [pc, #336]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ee2:	f023 0304 	bic.w	r3, r3, #4
 8001ee6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d015      	beq.n	8001f1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef0:	f7ff f9fa 	bl	80012e8 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef6:	e00a      	b.n	8001f0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef8:	f7ff f9f6 	bl	80012e8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e0cb      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0e:	4b49      	ldr	r3, [pc, #292]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0ee      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x334>
 8001f1a:	e014      	b.n	8001f46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1c:	f7ff f9e4 	bl	80012e8 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f22:	e00a      	b.n	8001f3a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f24:	f7ff f9e0 	bl	80012e8 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e0b5      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1ee      	bne.n	8001f24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f46:	7dfb      	ldrb	r3, [r7, #23]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d105      	bne.n	8001f58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4c:	4b39      	ldr	r3, [pc, #228]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	4a38      	ldr	r2, [pc, #224]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 80a1 	beq.w	80020a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f62:	4b34      	ldr	r3, [pc, #208]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d05c      	beq.n	8002028 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d141      	bne.n	8001ffa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f76:	4b31      	ldr	r3, [pc, #196]	@ (800203c <HAL_RCC_OscConfig+0x478>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff f9b4 	bl	80012e8 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f84:	f7ff f9b0 	bl	80012e8 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e087      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f96:	4b27      	ldr	r3, [pc, #156]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69da      	ldr	r2, [r3, #28]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb0:	019b      	lsls	r3, r3, #6
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb8:	085b      	lsrs	r3, r3, #1
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	041b      	lsls	r3, r3, #16
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc4:	061b      	lsls	r3, r3, #24
 8001fc6:	491b      	ldr	r1, [pc, #108]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800203c <HAL_RCC_OscConfig+0x478>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7ff f989 	bl	80012e8 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fda:	f7ff f985 	bl	80012e8 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e05c      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fec:	4b11      	ldr	r3, [pc, #68]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x416>
 8001ff8:	e054      	b.n	80020a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffa:	4b10      	ldr	r3, [pc, #64]	@ (800203c <HAL_RCC_OscConfig+0x478>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7ff f972 	bl	80012e8 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002008:	f7ff f96e 	bl	80012e8 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e045      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201a:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x444>
 8002026:	e03d      	b.n	80020a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d107      	bne.n	8002040 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e038      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
 8002034:	40023800 	.word	0x40023800
 8002038:	40007000 	.word	0x40007000
 800203c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002040:	4b1b      	ldr	r3, [pc, #108]	@ (80020b0 <HAL_RCC_OscConfig+0x4ec>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d028      	beq.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002058:	429a      	cmp	r2, r3
 800205a:	d121      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002066:	429a      	cmp	r2, r3
 8002068:	d11a      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002070:	4013      	ands	r3, r2
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002076:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002078:	4293      	cmp	r3, r2
 800207a:	d111      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002086:	085b      	lsrs	r3, r3, #1
 8002088:	3b01      	subs	r3, #1
 800208a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800208c:	429a      	cmp	r2, r3
 800208e:	d107      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800

080020b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0cc      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020c8:	4b68      	ldr	r3, [pc, #416]	@ (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d90c      	bls.n	80020f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d6:	4b65      	ldr	r3, [pc, #404]	@ (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020de:	4b63      	ldr	r3, [pc, #396]	@ (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0b8      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d020      	beq.n	800213e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002108:	4b59      	ldr	r3, [pc, #356]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4a58      	ldr	r2, [pc, #352]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002112:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002120:	4b53      	ldr	r3, [pc, #332]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	4a52      	ldr	r2, [pc, #328]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800212a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800212c:	4b50      	ldr	r3, [pc, #320]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	494d      	ldr	r1, [pc, #308]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	4313      	orrs	r3, r2
 800213c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d044      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d107      	bne.n	8002162 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4b47      	ldr	r3, [pc, #284]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d119      	bne.n	8002192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e07f      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d003      	beq.n	8002172 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216e:	2b03      	cmp	r3, #3
 8002170:	d107      	bne.n	8002182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002172:	4b3f      	ldr	r3, [pc, #252]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e06f      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002182:	4b3b      	ldr	r3, [pc, #236]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e067      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002192:	4b37      	ldr	r3, [pc, #220]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f023 0203 	bic.w	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4934      	ldr	r1, [pc, #208]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a4:	f7ff f8a0 	bl	80012e8 <HAL_GetTick>
 80021a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ac:	f7ff f89c 	bl	80012e8 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e04f      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 020c 	and.w	r2, r3, #12
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d1eb      	bne.n	80021ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021d4:	4b25      	ldr	r3, [pc, #148]	@ (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d20c      	bcs.n	80021fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e2:	4b22      	ldr	r3, [pc, #136]	@ (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ea:	4b20      	ldr	r3, [pc, #128]	@ (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e032      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002208:	4b19      	ldr	r3, [pc, #100]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	4916      	ldr	r1, [pc, #88]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	4313      	orrs	r3, r2
 8002218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002226:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	490e      	ldr	r1, [pc, #56]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	4313      	orrs	r3, r2
 8002238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800223a:	f000 f821 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 800223e:	4602      	mov	r2, r0
 8002240:	4b0b      	ldr	r3, [pc, #44]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	490a      	ldr	r1, [pc, #40]	@ (8002274 <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	5ccb      	ldrb	r3, [r1, r3]
 800224e:	fa22 f303 	lsr.w	r3, r2, r3
 8002252:	4a09      	ldr	r2, [pc, #36]	@ (8002278 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002256:	4b09      	ldr	r3, [pc, #36]	@ (800227c <HAL_RCC_ClockConfig+0x1c8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff f800 	bl	8001260 <HAL_InitTick>

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40023c00 	.word	0x40023c00
 8002270:	40023800 	.word	0x40023800
 8002274:	08005184 	.word	0x08005184
 8002278:	20000000 	.word	0x20000000
 800227c:	20000004 	.word	0x20000004

08002280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002284:	b090      	sub	sp, #64	@ 0x40
 8002286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002298:	4b59      	ldr	r3, [pc, #356]	@ (8002400 <HAL_RCC_GetSysClockFreq+0x180>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d00d      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x40>
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	f200 80a1 	bhi.w	80023ec <HAL_RCC_GetSysClockFreq+0x16c>
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0x34>
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d003      	beq.n	80022ba <HAL_RCC_GetSysClockFreq+0x3a>
 80022b2:	e09b      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022b4:	4b53      	ldr	r3, [pc, #332]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x184>)
 80022b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022b8:	e09b      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022ba:	4b53      	ldr	r3, [pc, #332]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x188>)
 80022bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022be:	e098      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c0:	4b4f      	ldr	r3, [pc, #316]	@ (8002400 <HAL_RCC_GetSysClockFreq+0x180>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002400 <HAL_RCC_GetSysClockFreq+0x180>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d028      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002400 <HAL_RCC_GetSysClockFreq+0x180>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	099b      	lsrs	r3, r3, #6
 80022dc:	2200      	movs	r2, #0
 80022de:	623b      	str	r3, [r7, #32]
 80022e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022e8:	2100      	movs	r1, #0
 80022ea:	4b47      	ldr	r3, [pc, #284]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x188>)
 80022ec:	fb03 f201 	mul.w	r2, r3, r1
 80022f0:	2300      	movs	r3, #0
 80022f2:	fb00 f303 	mul.w	r3, r0, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	4a43      	ldr	r2, [pc, #268]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x188>)
 80022fa:	fba0 1202 	umull	r1, r2, r0, r2
 80022fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002300:	460a      	mov	r2, r1
 8002302:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002304:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002306:	4413      	add	r3, r2
 8002308:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800230a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800230c:	2200      	movs	r2, #0
 800230e:	61bb      	str	r3, [r7, #24]
 8002310:	61fa      	str	r2, [r7, #28]
 8002312:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002316:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800231a:	f7fd ffb9 	bl	8000290 <__aeabi_uldivmod>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4613      	mov	r3, r2
 8002324:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002326:	e053      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002328:	4b35      	ldr	r3, [pc, #212]	@ (8002400 <HAL_RCC_GetSysClockFreq+0x180>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	099b      	lsrs	r3, r3, #6
 800232e:	2200      	movs	r2, #0
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	617a      	str	r2, [r7, #20]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800233a:	f04f 0b00 	mov.w	fp, #0
 800233e:	4652      	mov	r2, sl
 8002340:	465b      	mov	r3, fp
 8002342:	f04f 0000 	mov.w	r0, #0
 8002346:	f04f 0100 	mov.w	r1, #0
 800234a:	0159      	lsls	r1, r3, #5
 800234c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002350:	0150      	lsls	r0, r2, #5
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	ebb2 080a 	subs.w	r8, r2, sl
 800235a:	eb63 090b 	sbc.w	r9, r3, fp
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800236a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800236e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002372:	ebb2 0408 	subs.w	r4, r2, r8
 8002376:	eb63 0509 	sbc.w	r5, r3, r9
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	00eb      	lsls	r3, r5, #3
 8002384:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002388:	00e2      	lsls	r2, r4, #3
 800238a:	4614      	mov	r4, r2
 800238c:	461d      	mov	r5, r3
 800238e:	eb14 030a 	adds.w	r3, r4, sl
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	eb45 030b 	adc.w	r3, r5, fp
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023a6:	4629      	mov	r1, r5
 80023a8:	028b      	lsls	r3, r1, #10
 80023aa:	4621      	mov	r1, r4
 80023ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023b0:	4621      	mov	r1, r4
 80023b2:	028a      	lsls	r2, r1, #10
 80023b4:	4610      	mov	r0, r2
 80023b6:	4619      	mov	r1, r3
 80023b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ba:	2200      	movs	r2, #0
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	60fa      	str	r2, [r7, #12]
 80023c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023c4:	f7fd ff64 	bl	8000290 <__aeabi_uldivmod>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4613      	mov	r3, r2
 80023ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <HAL_RCC_GetSysClockFreq+0x180>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	0c1b      	lsrs	r3, r3, #16
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	3301      	adds	r3, #1
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80023e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023ea:	e002      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023ec:	4b05      	ldr	r3, [pc, #20]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x184>)
 80023ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3740      	adds	r7, #64	@ 0x40
 80023f8:	46bd      	mov	sp, r7
 80023fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023fe:	bf00      	nop
 8002400:	40023800 	.word	0x40023800
 8002404:	00f42400 	.word	0x00f42400
 8002408:	017d7840 	.word	0x017d7840

0800240c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002410:	4b03      	ldr	r3, [pc, #12]	@ (8002420 <HAL_RCC_GetHCLKFreq+0x14>)
 8002412:	681b      	ldr	r3, [r3, #0]
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000000 	.word	0x20000000

08002424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002428:	f7ff fff0 	bl	800240c <HAL_RCC_GetHCLKFreq>
 800242c:	4602      	mov	r2, r0
 800242e:	4b05      	ldr	r3, [pc, #20]	@ (8002444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	0a9b      	lsrs	r3, r3, #10
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	4903      	ldr	r1, [pc, #12]	@ (8002448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800243a:	5ccb      	ldrb	r3, [r1, r3]
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002440:	4618      	mov	r0, r3
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40023800 	.word	0x40023800
 8002448:	08005194 	.word	0x08005194

0800244c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002450:	f7ff ffdc 	bl	800240c <HAL_RCC_GetHCLKFreq>
 8002454:	4602      	mov	r2, r0
 8002456:	4b05      	ldr	r3, [pc, #20]	@ (800246c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	0b5b      	lsrs	r3, r3, #13
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	4903      	ldr	r1, [pc, #12]	@ (8002470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002462:	5ccb      	ldrb	r3, [r1, r3]
 8002464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002468:	4618      	mov	r0, r3
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40023800 	.word	0x40023800
 8002470:	08005194 	.word	0x08005194

08002474 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e07b      	b.n	800257e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248a:	2b00      	cmp	r3, #0
 800248c:	d108      	bne.n	80024a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002496:	d009      	beq.n	80024ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	61da      	str	r2, [r3, #28]
 800249e:	e005      	b.n	80024ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d106      	bne.n	80024cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7fe fb12 	bl	8000af0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002530:	ea42 0103 	orr.w	r1, r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002538:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	0c1b      	lsrs	r3, r3, #16
 800254a:	f003 0104 	and.w	r1, r3, #4
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002552:	f003 0210 	and.w	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69da      	ldr	r2, [r3, #28]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800256c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b08a      	sub	sp, #40	@ 0x28
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002594:	2301      	movs	r3, #1
 8002596:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002598:	f7fe fea6 	bl	80012e8 <HAL_GetTick>
 800259c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025a4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80025ac:	887b      	ldrh	r3, [r7, #2]
 80025ae:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025b0:	7ffb      	ldrb	r3, [r7, #31]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d00c      	beq.n	80025d0 <HAL_SPI_TransmitReceive+0x4a>
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025bc:	d106      	bne.n	80025cc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d102      	bne.n	80025cc <HAL_SPI_TransmitReceive+0x46>
 80025c6:	7ffb      	ldrb	r3, [r7, #31]
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d001      	beq.n	80025d0 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80025cc:	2302      	movs	r3, #2
 80025ce:	e17f      	b.n	80028d0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_SPI_TransmitReceive+0x5c>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <HAL_SPI_TransmitReceive+0x5c>
 80025dc:	887b      	ldrh	r3, [r7, #2]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e174      	b.n	80028d0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_SPI_TransmitReceive+0x6e>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e16d      	b.n	80028d0 <HAL_SPI_TransmitReceive+0x34a>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b04      	cmp	r3, #4
 8002606:	d003      	beq.n	8002610 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2205      	movs	r2, #5
 800260c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	887a      	ldrh	r2, [r7, #2]
 8002626:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	887a      	ldrh	r2, [r7, #2]
 8002632:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002650:	2b40      	cmp	r3, #64	@ 0x40
 8002652:	d007      	beq.n	8002664 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002662:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800266c:	d17e      	bne.n	800276c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_SPI_TransmitReceive+0xf6>
 8002676:	8afb      	ldrh	r3, [r7, #22]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d16c      	bne.n	8002756 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002680:	881a      	ldrh	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268c:	1c9a      	adds	r2, r3, #2
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002696:	b29b      	uxth	r3, r3
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026a0:	e059      	b.n	8002756 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d11b      	bne.n	80026e8 <HAL_SPI_TransmitReceive+0x162>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <HAL_SPI_TransmitReceive+0x162>
 80026ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d113      	bne.n	80026e8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c4:	881a      	ldrh	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d0:	1c9a      	adds	r2, r3, #2
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d119      	bne.n	800272a <HAL_SPI_TransmitReceive+0x1a4>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d014      	beq.n	800272a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800270a:	b292      	uxth	r2, r2
 800270c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002712:	1c9a      	adds	r2, r3, #2
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800271c:	b29b      	uxth	r3, r3
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002726:	2301      	movs	r3, #1
 8002728:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800272a:	f7fe fddd 	bl	80012e8 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002736:	429a      	cmp	r2, r3
 8002738:	d80d      	bhi.n	8002756 <HAL_SPI_TransmitReceive+0x1d0>
 800273a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d009      	beq.n	8002756 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e0bc      	b.n	80028d0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800275a:	b29b      	uxth	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1a0      	bne.n	80026a2 <HAL_SPI_TransmitReceive+0x11c>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002764:	b29b      	uxth	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d19b      	bne.n	80026a2 <HAL_SPI_TransmitReceive+0x11c>
 800276a:	e082      	b.n	8002872 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <HAL_SPI_TransmitReceive+0x1f4>
 8002774:	8afb      	ldrh	r3, [r7, #22]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d171      	bne.n	800285e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	330c      	adds	r3, #12
 8002784:	7812      	ldrb	r2, [r2, #0]
 8002786:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027a0:	e05d      	b.n	800285e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d11c      	bne.n	80027ea <HAL_SPI_TransmitReceive+0x264>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d017      	beq.n	80027ea <HAL_SPI_TransmitReceive+0x264>
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d114      	bne.n	80027ea <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	330c      	adds	r3, #12
 80027ca:	7812      	ldrb	r2, [r2, #0]
 80027cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027dc:	b29b      	uxth	r3, r3
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d119      	bne.n	800282c <HAL_SPI_TransmitReceive+0x2a6>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d014      	beq.n	800282c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800281e:	b29b      	uxth	r3, r3
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002828:	2301      	movs	r3, #1
 800282a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800282c:	f7fe fd5c 	bl	80012e8 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002838:	429a      	cmp	r2, r3
 800283a:	d803      	bhi.n	8002844 <HAL_SPI_TransmitReceive+0x2be>
 800283c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800283e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002842:	d102      	bne.n	800284a <HAL_SPI_TransmitReceive+0x2c4>
 8002844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e038      	b.n	80028d0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002862:	b29b      	uxth	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	d19c      	bne.n	80027a2 <HAL_SPI_TransmitReceive+0x21c>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d197      	bne.n	80027a2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002872:	6a3a      	ldr	r2, [r7, #32]
 8002874:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f8b6 	bl	80029e8 <SPI_EndRxTxTransaction>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d008      	beq.n	8002894 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2220      	movs	r2, #32
 8002886:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e01d      	b.n	80028d0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800289c:	2300      	movs	r3, #0
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80028ce:	2300      	movs	r3, #0
  }
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3728      	adds	r7, #40	@ 0x28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	4613      	mov	r3, r2
 80028e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028e8:	f7fe fcfe 	bl	80012e8 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	4413      	add	r3, r2
 80028f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028f8:	f7fe fcf6 	bl	80012e8 <HAL_GetTick>
 80028fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028fe:	4b39      	ldr	r3, [pc, #228]	@ (80029e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	015b      	lsls	r3, r3, #5
 8002904:	0d1b      	lsrs	r3, r3, #20
 8002906:	69fa      	ldr	r2, [r7, #28]
 8002908:	fb02 f303 	mul.w	r3, r2, r3
 800290c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800290e:	e054      	b.n	80029ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002916:	d050      	beq.n	80029ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002918:	f7fe fce6 	bl	80012e8 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	69fa      	ldr	r2, [r7, #28]
 8002924:	429a      	cmp	r2, r3
 8002926:	d902      	bls.n	800292e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d13d      	bne.n	80029aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800293c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002946:	d111      	bne.n	800296c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002950:	d004      	beq.n	800295c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800295a:	d107      	bne.n	800296c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800296a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002974:	d10f      	bne.n	8002996 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002994:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e017      	b.n	80029da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4013      	ands	r3, r2
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	bf0c      	ite	eq
 80029ca:	2301      	moveq	r3, #1
 80029cc:	2300      	movne	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d19b      	bne.n	8002910 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3720      	adds	r7, #32
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000000 	.word	0x20000000

080029e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2201      	movs	r2, #1
 80029fc:	2102      	movs	r1, #2
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f7ff ff6a 	bl	80028d8 <SPI_WaitFlagStateUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d007      	beq.n	8002a1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a0e:	f043 0220 	orr.w	r2, r3, #32
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e032      	b.n	8002a80 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a88 <SPI_EndRxTxTransaction+0xa0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1b      	ldr	r2, [pc, #108]	@ (8002a8c <SPI_EndRxTxTransaction+0xa4>)
 8002a20:	fba2 2303 	umull	r2, r3, r2, r3
 8002a24:	0d5b      	lsrs	r3, r3, #21
 8002a26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a2a:	fb02 f303 	mul.w	r3, r2, r3
 8002a2e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a38:	d112      	bne.n	8002a60 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2200      	movs	r2, #0
 8002a42:	2180      	movs	r1, #128	@ 0x80
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f7ff ff47 	bl	80028d8 <SPI_WaitFlagStateUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d016      	beq.n	8002a7e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a54:	f043 0220 	orr.w	r2, r3, #32
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e00f      	b.n	8002a80 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a76:	2b80      	cmp	r3, #128	@ 0x80
 8002a78:	d0f2      	beq.n	8002a60 <SPI_EndRxTxTransaction+0x78>
 8002a7a:	e000      	b.n	8002a7e <SPI_EndRxTxTransaction+0x96>
        break;
 8002a7c:	bf00      	nop
  }

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	165e9f81 	.word	0x165e9f81

08002a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e041      	b.n	8002b26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d106      	bne.n	8002abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7fe fa78 	bl	8000fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3304      	adds	r3, #4
 8002acc:	4619      	mov	r1, r3
 8002ace:	4610      	mov	r0, r2
 8002ad0:	f000 faf0 	bl	80030b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d001      	beq.n	8002b48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e046      	b.n	8002bd6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a23      	ldr	r2, [pc, #140]	@ (8002be4 <HAL_TIM_Base_Start+0xb4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d022      	beq.n	8002ba0 <HAL_TIM_Base_Start+0x70>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b62:	d01d      	beq.n	8002ba0 <HAL_TIM_Base_Start+0x70>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1f      	ldr	r2, [pc, #124]	@ (8002be8 <HAL_TIM_Base_Start+0xb8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d018      	beq.n	8002ba0 <HAL_TIM_Base_Start+0x70>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a1e      	ldr	r2, [pc, #120]	@ (8002bec <HAL_TIM_Base_Start+0xbc>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d013      	beq.n	8002ba0 <HAL_TIM_Base_Start+0x70>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf0 <HAL_TIM_Base_Start+0xc0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00e      	beq.n	8002ba0 <HAL_TIM_Base_Start+0x70>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a1b      	ldr	r2, [pc, #108]	@ (8002bf4 <HAL_TIM_Base_Start+0xc4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d009      	beq.n	8002ba0 <HAL_TIM_Base_Start+0x70>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a19      	ldr	r2, [pc, #100]	@ (8002bf8 <HAL_TIM_Base_Start+0xc8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d004      	beq.n	8002ba0 <HAL_TIM_Base_Start+0x70>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a18      	ldr	r2, [pc, #96]	@ (8002bfc <HAL_TIM_Base_Start+0xcc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d111      	bne.n	8002bc4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2b06      	cmp	r3, #6
 8002bb0:	d010      	beq.n	8002bd4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f042 0201 	orr.w	r2, r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc2:	e007      	b.n	8002bd4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40010000 	.word	0x40010000
 8002be8:	40000400 	.word	0x40000400
 8002bec:	40000800 	.word	0x40000800
 8002bf0:	40000c00 	.word	0x40000c00
 8002bf4:	40010400 	.word	0x40010400
 8002bf8:	40014000 	.word	0x40014000
 8002bfc:	40001800 	.word	0x40001800

08002c00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d001      	beq.n	8002c18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e04e      	b.n	8002cb6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a23      	ldr	r2, [pc, #140]	@ (8002cc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d022      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0x80>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c42:	d01d      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0x80>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1f      	ldr	r2, [pc, #124]	@ (8002cc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d018      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0x80>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1e      	ldr	r2, [pc, #120]	@ (8002ccc <HAL_TIM_Base_Start_IT+0xcc>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d013      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0x80>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002cd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00e      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0x80>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a1b      	ldr	r2, [pc, #108]	@ (8002cd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d009      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0x80>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a19      	ldr	r2, [pc, #100]	@ (8002cd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d004      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0x80>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a18      	ldr	r2, [pc, #96]	@ (8002cdc <HAL_TIM_Base_Start_IT+0xdc>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d111      	bne.n	8002ca4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b06      	cmp	r3, #6
 8002c90:	d010      	beq.n	8002cb4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca2:	e007      	b.n	8002cb4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40010000 	.word	0x40010000
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	40000800 	.word	0x40000800
 8002cd0:	40000c00 	.word	0x40000c00
 8002cd4:	40010400 	.word	0x40010400
 8002cd8:	40014000 	.word	0x40014000
 8002cdc:	40001800 	.word	0x40001800

08002ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d020      	beq.n	8002d44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01b      	beq.n	8002d44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0202 	mvn.w	r2, #2
 8002d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f9a3 	bl	8003076 <HAL_TIM_IC_CaptureCallback>
 8002d30:	e005      	b.n	8002d3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f995 	bl	8003062 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f9a6 	bl	800308a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d020      	beq.n	8002d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01b      	beq.n	8002d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f06f 0204 	mvn.w	r2, #4
 8002d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2202      	movs	r2, #2
 8002d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f97d 	bl	8003076 <HAL_TIM_IC_CaptureCallback>
 8002d7c:	e005      	b.n	8002d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f96f 	bl	8003062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f980 	bl	800308a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d020      	beq.n	8002ddc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01b      	beq.n	8002ddc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0208 	mvn.w	r2, #8
 8002dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2204      	movs	r2, #4
 8002db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f957 	bl	8003076 <HAL_TIM_IC_CaptureCallback>
 8002dc8:	e005      	b.n	8002dd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f949 	bl	8003062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f95a 	bl	800308a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d020      	beq.n	8002e28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01b      	beq.n	8002e28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0210 	mvn.w	r2, #16
 8002df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2208      	movs	r2, #8
 8002dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f931 	bl	8003076 <HAL_TIM_IC_CaptureCallback>
 8002e14:	e005      	b.n	8002e22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f923 	bl	8003062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f934 	bl	800308a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00c      	beq.n	8002e4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0201 	mvn.w	r2, #1
 8002e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f901 	bl	800304e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00c      	beq.n	8002e70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d007      	beq.n	8002e70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 faee 	bl	800344c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00c      	beq.n	8002e94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d007      	beq.n	8002e94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f905 	bl	800309e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00c      	beq.n	8002eb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d007      	beq.n	8002eb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0220 	mvn.w	r2, #32
 8002eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fac0 	bl	8003438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_TIM_ConfigClockSource+0x1c>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e0b4      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x186>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f14:	d03e      	beq.n	8002f94 <HAL_TIM_ConfigClockSource+0xd4>
 8002f16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f1a:	f200 8087 	bhi.w	800302c <HAL_TIM_ConfigClockSource+0x16c>
 8002f1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f22:	f000 8086 	beq.w	8003032 <HAL_TIM_ConfigClockSource+0x172>
 8002f26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f2a:	d87f      	bhi.n	800302c <HAL_TIM_ConfigClockSource+0x16c>
 8002f2c:	2b70      	cmp	r3, #112	@ 0x70
 8002f2e:	d01a      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0xa6>
 8002f30:	2b70      	cmp	r3, #112	@ 0x70
 8002f32:	d87b      	bhi.n	800302c <HAL_TIM_ConfigClockSource+0x16c>
 8002f34:	2b60      	cmp	r3, #96	@ 0x60
 8002f36:	d050      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0x11a>
 8002f38:	2b60      	cmp	r3, #96	@ 0x60
 8002f3a:	d877      	bhi.n	800302c <HAL_TIM_ConfigClockSource+0x16c>
 8002f3c:	2b50      	cmp	r3, #80	@ 0x50
 8002f3e:	d03c      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0xfa>
 8002f40:	2b50      	cmp	r3, #80	@ 0x50
 8002f42:	d873      	bhi.n	800302c <HAL_TIM_ConfigClockSource+0x16c>
 8002f44:	2b40      	cmp	r3, #64	@ 0x40
 8002f46:	d058      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0x13a>
 8002f48:	2b40      	cmp	r3, #64	@ 0x40
 8002f4a:	d86f      	bhi.n	800302c <HAL_TIM_ConfigClockSource+0x16c>
 8002f4c:	2b30      	cmp	r3, #48	@ 0x30
 8002f4e:	d064      	beq.n	800301a <HAL_TIM_ConfigClockSource+0x15a>
 8002f50:	2b30      	cmp	r3, #48	@ 0x30
 8002f52:	d86b      	bhi.n	800302c <HAL_TIM_ConfigClockSource+0x16c>
 8002f54:	2b20      	cmp	r3, #32
 8002f56:	d060      	beq.n	800301a <HAL_TIM_ConfigClockSource+0x15a>
 8002f58:	2b20      	cmp	r3, #32
 8002f5a:	d867      	bhi.n	800302c <HAL_TIM_ConfigClockSource+0x16c>
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d05c      	beq.n	800301a <HAL_TIM_ConfigClockSource+0x15a>
 8002f60:	2b10      	cmp	r3, #16
 8002f62:	d05a      	beq.n	800301a <HAL_TIM_ConfigClockSource+0x15a>
 8002f64:	e062      	b.n	800302c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f76:	f000 f9c3 	bl	8003300 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	609a      	str	r2, [r3, #8]
      break;
 8002f92:	e04f      	b.n	8003034 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fa4:	f000 f9ac 	bl	8003300 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fb6:	609a      	str	r2, [r3, #8]
      break;
 8002fb8:	e03c      	b.n	8003034 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f000 f920 	bl	800320c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2150      	movs	r1, #80	@ 0x50
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 f979 	bl	80032ca <TIM_ITRx_SetConfig>
      break;
 8002fd8:	e02c      	b.n	8003034 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f000 f93f 	bl	800326a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2160      	movs	r1, #96	@ 0x60
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 f969 	bl	80032ca <TIM_ITRx_SetConfig>
      break;
 8002ff8:	e01c      	b.n	8003034 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003006:	461a      	mov	r2, r3
 8003008:	f000 f900 	bl	800320c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2140      	movs	r1, #64	@ 0x40
 8003012:	4618      	mov	r0, r3
 8003014:	f000 f959 	bl	80032ca <TIM_ITRx_SetConfig>
      break;
 8003018:	e00c      	b.n	8003034 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4619      	mov	r1, r3
 8003024:	4610      	mov	r0, r2
 8003026:	f000 f950 	bl	80032ca <TIM_ITRx_SetConfig>
      break;
 800302a:	e003      	b.n	8003034 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
      break;
 8003030:	e000      	b.n	8003034 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003032:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003044:	7bfb      	ldrb	r3, [r7, #15]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a46      	ldr	r2, [pc, #280]	@ (80031e0 <TIM_Base_SetConfig+0x12c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d013      	beq.n	80030f4 <TIM_Base_SetConfig+0x40>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d2:	d00f      	beq.n	80030f4 <TIM_Base_SetConfig+0x40>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a43      	ldr	r2, [pc, #268]	@ (80031e4 <TIM_Base_SetConfig+0x130>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00b      	beq.n	80030f4 <TIM_Base_SetConfig+0x40>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a42      	ldr	r2, [pc, #264]	@ (80031e8 <TIM_Base_SetConfig+0x134>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d007      	beq.n	80030f4 <TIM_Base_SetConfig+0x40>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a41      	ldr	r2, [pc, #260]	@ (80031ec <TIM_Base_SetConfig+0x138>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d003      	beq.n	80030f4 <TIM_Base_SetConfig+0x40>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a40      	ldr	r2, [pc, #256]	@ (80031f0 <TIM_Base_SetConfig+0x13c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d108      	bne.n	8003106 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a35      	ldr	r2, [pc, #212]	@ (80031e0 <TIM_Base_SetConfig+0x12c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d02b      	beq.n	8003166 <TIM_Base_SetConfig+0xb2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003114:	d027      	beq.n	8003166 <TIM_Base_SetConfig+0xb2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a32      	ldr	r2, [pc, #200]	@ (80031e4 <TIM_Base_SetConfig+0x130>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d023      	beq.n	8003166 <TIM_Base_SetConfig+0xb2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a31      	ldr	r2, [pc, #196]	@ (80031e8 <TIM_Base_SetConfig+0x134>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d01f      	beq.n	8003166 <TIM_Base_SetConfig+0xb2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a30      	ldr	r2, [pc, #192]	@ (80031ec <TIM_Base_SetConfig+0x138>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d01b      	beq.n	8003166 <TIM_Base_SetConfig+0xb2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a2f      	ldr	r2, [pc, #188]	@ (80031f0 <TIM_Base_SetConfig+0x13c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d017      	beq.n	8003166 <TIM_Base_SetConfig+0xb2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a2e      	ldr	r2, [pc, #184]	@ (80031f4 <TIM_Base_SetConfig+0x140>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d013      	beq.n	8003166 <TIM_Base_SetConfig+0xb2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a2d      	ldr	r2, [pc, #180]	@ (80031f8 <TIM_Base_SetConfig+0x144>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00f      	beq.n	8003166 <TIM_Base_SetConfig+0xb2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a2c      	ldr	r2, [pc, #176]	@ (80031fc <TIM_Base_SetConfig+0x148>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d00b      	beq.n	8003166 <TIM_Base_SetConfig+0xb2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a2b      	ldr	r2, [pc, #172]	@ (8003200 <TIM_Base_SetConfig+0x14c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d007      	beq.n	8003166 <TIM_Base_SetConfig+0xb2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a2a      	ldr	r2, [pc, #168]	@ (8003204 <TIM_Base_SetConfig+0x150>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d003      	beq.n	8003166 <TIM_Base_SetConfig+0xb2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a29      	ldr	r2, [pc, #164]	@ (8003208 <TIM_Base_SetConfig+0x154>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d108      	bne.n	8003178 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800316c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4313      	orrs	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a10      	ldr	r2, [pc, #64]	@ (80031e0 <TIM_Base_SetConfig+0x12c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d003      	beq.n	80031ac <TIM_Base_SetConfig+0xf8>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a12      	ldr	r2, [pc, #72]	@ (80031f0 <TIM_Base_SetConfig+0x13c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d103      	bne.n	80031b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d105      	bne.n	80031d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f023 0201 	bic.w	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	611a      	str	r2, [r3, #16]
  }
}
 80031d2:	bf00      	nop
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40010000 	.word	0x40010000
 80031e4:	40000400 	.word	0x40000400
 80031e8:	40000800 	.word	0x40000800
 80031ec:	40000c00 	.word	0x40000c00
 80031f0:	40010400 	.word	0x40010400
 80031f4:	40014000 	.word	0x40014000
 80031f8:	40014400 	.word	0x40014400
 80031fc:	40014800 	.word	0x40014800
 8003200:	40001800 	.word	0x40001800
 8003204:	40001c00 	.word	0x40001c00
 8003208:	40002000 	.word	0x40002000

0800320c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	f023 0201 	bic.w	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f023 030a 	bic.w	r3, r3, #10
 8003248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	621a      	str	r2, [r3, #32]
}
 800325e:	bf00      	nop
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800326a:	b480      	push	{r7}
 800326c:	b087      	sub	sp, #28
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	f023 0210 	bic.w	r2, r3, #16
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003294:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	031b      	lsls	r3, r3, #12
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80032a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	621a      	str	r2, [r3, #32]
}
 80032be:	bf00      	nop
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b085      	sub	sp, #20
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f043 0307 	orr.w	r3, r3, #7
 80032ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	609a      	str	r2, [r3, #8]
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800331a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	021a      	lsls	r2, r3, #8
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	431a      	orrs	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4313      	orrs	r3, r2
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	609a      	str	r2, [r3, #8]
}
 8003334:	bf00      	nop
 8003336:	371c      	adds	r7, #28
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003354:	2302      	movs	r3, #2
 8003356:	e05a      	b.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800337e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	4313      	orrs	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a21      	ldr	r2, [pc, #132]	@ (800341c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d022      	beq.n	80033e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a4:	d01d      	beq.n	80033e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003420 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d018      	beq.n	80033e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003424 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a1a      	ldr	r2, [pc, #104]	@ (8003428 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00e      	beq.n	80033e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a18      	ldr	r2, [pc, #96]	@ (800342c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a17      	ldr	r2, [pc, #92]	@ (8003430 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a15      	ldr	r2, [pc, #84]	@ (8003434 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d10c      	bne.n	80033fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40010000 	.word	0x40010000
 8003420:	40000400 	.word	0x40000400
 8003424:	40000800 	.word	0x40000800
 8003428:	40000c00 	.word	0x40000c00
 800342c:	40010400 	.word	0x40010400
 8003430:	40014000 	.word	0x40014000
 8003434:	40001800 	.word	0x40001800

08003438 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e042      	b.n	80034f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fd fe22 	bl	80010d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2224      	movs	r2, #36	@ 0x24
 8003490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f973 	bl	8003790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695a      	ldr	r2, [r3, #20]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08a      	sub	sp, #40	@ 0x28
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b20      	cmp	r3, #32
 800351e:	d175      	bne.n	800360c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_UART_Transmit+0x2c>
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e06e      	b.n	800360e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2221      	movs	r2, #33	@ 0x21
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800353e:	f7fd fed3 	bl	80012e8 <HAL_GetTick>
 8003542:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	88fa      	ldrh	r2, [r7, #6]
 8003548:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	88fa      	ldrh	r2, [r7, #6]
 800354e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003558:	d108      	bne.n	800356c <HAL_UART_Transmit+0x6c>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d104      	bne.n	800356c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003562:	2300      	movs	r3, #0
 8003564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	e003      	b.n	8003574 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003570:	2300      	movs	r3, #0
 8003572:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003574:	e02e      	b.n	80035d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2200      	movs	r2, #0
 800357e:	2180      	movs	r1, #128	@ 0x80
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f848 	bl	8003616 <UART_WaitOnFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e03a      	b.n	800360e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10b      	bne.n	80035b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	3302      	adds	r3, #2
 80035b2:	61bb      	str	r3, [r7, #24]
 80035b4:	e007      	b.n	80035c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	781a      	ldrb	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	3301      	adds	r3, #1
 80035c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1cb      	bne.n	8003576 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2200      	movs	r2, #0
 80035e6:	2140      	movs	r1, #64	@ 0x40
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f814 	bl	8003616 <UART_WaitOnFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e006      	b.n	800360e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	e000      	b.n	800360e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800360c:	2302      	movs	r3, #2
  }
}
 800360e:	4618      	mov	r0, r3
 8003610:	3720      	adds	r7, #32
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	603b      	str	r3, [r7, #0]
 8003622:	4613      	mov	r3, r2
 8003624:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003626:	e03b      	b.n	80036a0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362e:	d037      	beq.n	80036a0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003630:	f7fd fe5a 	bl	80012e8 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	6a3a      	ldr	r2, [r7, #32]
 800363c:	429a      	cmp	r2, r3
 800363e:	d302      	bcc.n	8003646 <UART_WaitOnFlagUntilTimeout+0x30>
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e03a      	b.n	80036c0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d023      	beq.n	80036a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b80      	cmp	r3, #128	@ 0x80
 800365c:	d020      	beq.n	80036a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b40      	cmp	r3, #64	@ 0x40
 8003662:	d01d      	beq.n	80036a0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b08      	cmp	r3, #8
 8003670:	d116      	bne.n	80036a0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	617b      	str	r3, [r7, #20]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f81d 	bl	80036c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2208      	movs	r2, #8
 8003692:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e00f      	b.n	80036c0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	4013      	ands	r3, r2
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	bf0c      	ite	eq
 80036b0:	2301      	moveq	r3, #1
 80036b2:	2300      	movne	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	461a      	mov	r2, r3
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d0b4      	beq.n	8003628 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b095      	sub	sp, #84	@ 0x54
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	330c      	adds	r3, #12
 80036d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036da:	e853 3f00 	ldrex	r3, [r3]
 80036de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	330c      	adds	r3, #12
 80036ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80036f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036f8:	e841 2300 	strex	r3, r2, [r1]
 80036fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e5      	bne.n	80036d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3314      	adds	r3, #20
 800370a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	e853 3f00 	ldrex	r3, [r3]
 8003712:	61fb      	str	r3, [r7, #28]
   return(result);
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f023 0301 	bic.w	r3, r3, #1
 800371a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3314      	adds	r3, #20
 8003722:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003724:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003726:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003728:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800372a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800372c:	e841 2300 	strex	r3, r2, [r1]
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1e5      	bne.n	8003704 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373c:	2b01      	cmp	r3, #1
 800373e:	d119      	bne.n	8003774 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	330c      	adds	r3, #12
 8003746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	e853 3f00 	ldrex	r3, [r3]
 800374e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f023 0310 	bic.w	r3, r3, #16
 8003756:	647b      	str	r3, [r7, #68]	@ 0x44
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003760:	61ba      	str	r2, [r7, #24]
 8003762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003764:	6979      	ldr	r1, [r7, #20]
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	e841 2300 	strex	r3, r2, [r1]
 800376c:	613b      	str	r3, [r7, #16]
   return(result);
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e5      	bne.n	8003740 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003782:	bf00      	nop
 8003784:	3754      	adds	r7, #84	@ 0x54
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003794:	b0c0      	sub	sp, #256	@ 0x100
 8003796:	af00      	add	r7, sp, #0
 8003798:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800379c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ac:	68d9      	ldr	r1, [r3, #12]
 80037ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	ea40 0301 	orr.w	r3, r0, r1
 80037b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80037e8:	f021 010c 	bic.w	r1, r1, #12
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037f6:	430b      	orrs	r3, r1
 80037f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380a:	6999      	ldr	r1, [r3, #24]
 800380c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	ea40 0301 	orr.w	r3, r0, r1
 8003816:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	4b8f      	ldr	r3, [pc, #572]	@ (8003a5c <UART_SetConfig+0x2cc>)
 8003820:	429a      	cmp	r2, r3
 8003822:	d005      	beq.n	8003830 <UART_SetConfig+0xa0>
 8003824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4b8d      	ldr	r3, [pc, #564]	@ (8003a60 <UART_SetConfig+0x2d0>)
 800382c:	429a      	cmp	r2, r3
 800382e:	d104      	bne.n	800383a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003830:	f7fe fe0c 	bl	800244c <HAL_RCC_GetPCLK2Freq>
 8003834:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003838:	e003      	b.n	8003842 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800383a:	f7fe fdf3 	bl	8002424 <HAL_RCC_GetPCLK1Freq>
 800383e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800384c:	f040 810c 	bne.w	8003a68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003854:	2200      	movs	r2, #0
 8003856:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800385a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800385e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003862:	4622      	mov	r2, r4
 8003864:	462b      	mov	r3, r5
 8003866:	1891      	adds	r1, r2, r2
 8003868:	65b9      	str	r1, [r7, #88]	@ 0x58
 800386a:	415b      	adcs	r3, r3
 800386c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800386e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003872:	4621      	mov	r1, r4
 8003874:	eb12 0801 	adds.w	r8, r2, r1
 8003878:	4629      	mov	r1, r5
 800387a:	eb43 0901 	adc.w	r9, r3, r1
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800388a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800388e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003892:	4690      	mov	r8, r2
 8003894:	4699      	mov	r9, r3
 8003896:	4623      	mov	r3, r4
 8003898:	eb18 0303 	adds.w	r3, r8, r3
 800389c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038a0:	462b      	mov	r3, r5
 80038a2:	eb49 0303 	adc.w	r3, r9, r3
 80038a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80038ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038be:	460b      	mov	r3, r1
 80038c0:	18db      	adds	r3, r3, r3
 80038c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80038c4:	4613      	mov	r3, r2
 80038c6:	eb42 0303 	adc.w	r3, r2, r3
 80038ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80038cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80038d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80038d4:	f7fc fcdc 	bl	8000290 <__aeabi_uldivmod>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4b61      	ldr	r3, [pc, #388]	@ (8003a64 <UART_SetConfig+0x2d4>)
 80038de:	fba3 2302 	umull	r2, r3, r3, r2
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	011c      	lsls	r4, r3, #4
 80038e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038ea:	2200      	movs	r2, #0
 80038ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80038f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80038f8:	4642      	mov	r2, r8
 80038fa:	464b      	mov	r3, r9
 80038fc:	1891      	adds	r1, r2, r2
 80038fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003900:	415b      	adcs	r3, r3
 8003902:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003904:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003908:	4641      	mov	r1, r8
 800390a:	eb12 0a01 	adds.w	sl, r2, r1
 800390e:	4649      	mov	r1, r9
 8003910:	eb43 0b01 	adc.w	fp, r3, r1
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003920:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003924:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003928:	4692      	mov	sl, r2
 800392a:	469b      	mov	fp, r3
 800392c:	4643      	mov	r3, r8
 800392e:	eb1a 0303 	adds.w	r3, sl, r3
 8003932:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003936:	464b      	mov	r3, r9
 8003938:	eb4b 0303 	adc.w	r3, fp, r3
 800393c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800394c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003950:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003954:	460b      	mov	r3, r1
 8003956:	18db      	adds	r3, r3, r3
 8003958:	643b      	str	r3, [r7, #64]	@ 0x40
 800395a:	4613      	mov	r3, r2
 800395c:	eb42 0303 	adc.w	r3, r2, r3
 8003960:	647b      	str	r3, [r7, #68]	@ 0x44
 8003962:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003966:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800396a:	f7fc fc91 	bl	8000290 <__aeabi_uldivmod>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4611      	mov	r1, r2
 8003974:	4b3b      	ldr	r3, [pc, #236]	@ (8003a64 <UART_SetConfig+0x2d4>)
 8003976:	fba3 2301 	umull	r2, r3, r3, r1
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	2264      	movs	r2, #100	@ 0x64
 800397e:	fb02 f303 	mul.w	r3, r2, r3
 8003982:	1acb      	subs	r3, r1, r3
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800398a:	4b36      	ldr	r3, [pc, #216]	@ (8003a64 <UART_SetConfig+0x2d4>)
 800398c:	fba3 2302 	umull	r2, r3, r3, r2
 8003990:	095b      	lsrs	r3, r3, #5
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003998:	441c      	add	r4, r3
 800399a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039ac:	4642      	mov	r2, r8
 80039ae:	464b      	mov	r3, r9
 80039b0:	1891      	adds	r1, r2, r2
 80039b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039b4:	415b      	adcs	r3, r3
 80039b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80039bc:	4641      	mov	r1, r8
 80039be:	1851      	adds	r1, r2, r1
 80039c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80039c2:	4649      	mov	r1, r9
 80039c4:	414b      	adcs	r3, r1
 80039c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80039d4:	4659      	mov	r1, fp
 80039d6:	00cb      	lsls	r3, r1, #3
 80039d8:	4651      	mov	r1, sl
 80039da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039de:	4651      	mov	r1, sl
 80039e0:	00ca      	lsls	r2, r1, #3
 80039e2:	4610      	mov	r0, r2
 80039e4:	4619      	mov	r1, r3
 80039e6:	4603      	mov	r3, r0
 80039e8:	4642      	mov	r2, r8
 80039ea:	189b      	adds	r3, r3, r2
 80039ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039f0:	464b      	mov	r3, r9
 80039f2:	460a      	mov	r2, r1
 80039f4:	eb42 0303 	adc.w	r3, r2, r3
 80039f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a10:	460b      	mov	r3, r1
 8003a12:	18db      	adds	r3, r3, r3
 8003a14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a16:	4613      	mov	r3, r2
 8003a18:	eb42 0303 	adc.w	r3, r2, r3
 8003a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a26:	f7fc fc33 	bl	8000290 <__aeabi_uldivmod>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a64 <UART_SetConfig+0x2d4>)
 8003a30:	fba3 1302 	umull	r1, r3, r3, r2
 8003a34:	095b      	lsrs	r3, r3, #5
 8003a36:	2164      	movs	r1, #100	@ 0x64
 8003a38:	fb01 f303 	mul.w	r3, r1, r3
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	3332      	adds	r3, #50	@ 0x32
 8003a42:	4a08      	ldr	r2, [pc, #32]	@ (8003a64 <UART_SetConfig+0x2d4>)
 8003a44:	fba2 2303 	umull	r2, r3, r2, r3
 8003a48:	095b      	lsrs	r3, r3, #5
 8003a4a:	f003 0207 	and.w	r2, r3, #7
 8003a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4422      	add	r2, r4
 8003a56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a58:	e106      	b.n	8003c68 <UART_SetConfig+0x4d8>
 8003a5a:	bf00      	nop
 8003a5c:	40011000 	.word	0x40011000
 8003a60:	40011400 	.word	0x40011400
 8003a64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a7a:	4642      	mov	r2, r8
 8003a7c:	464b      	mov	r3, r9
 8003a7e:	1891      	adds	r1, r2, r2
 8003a80:	6239      	str	r1, [r7, #32]
 8003a82:	415b      	adcs	r3, r3
 8003a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a8a:	4641      	mov	r1, r8
 8003a8c:	1854      	adds	r4, r2, r1
 8003a8e:	4649      	mov	r1, r9
 8003a90:	eb43 0501 	adc.w	r5, r3, r1
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	00eb      	lsls	r3, r5, #3
 8003a9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aa2:	00e2      	lsls	r2, r4, #3
 8003aa4:	4614      	mov	r4, r2
 8003aa6:	461d      	mov	r5, r3
 8003aa8:	4643      	mov	r3, r8
 8003aaa:	18e3      	adds	r3, r4, r3
 8003aac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ab0:	464b      	mov	r3, r9
 8003ab2:	eb45 0303 	adc.w	r3, r5, r3
 8003ab6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ac6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	008b      	lsls	r3, r1, #2
 8003ada:	4621      	mov	r1, r4
 8003adc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	008a      	lsls	r2, r1, #2
 8003ae4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ae8:	f7fc fbd2 	bl	8000290 <__aeabi_uldivmod>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4b60      	ldr	r3, [pc, #384]	@ (8003c74 <UART_SetConfig+0x4e4>)
 8003af2:	fba3 2302 	umull	r2, r3, r3, r2
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	011c      	lsls	r4, r3, #4
 8003afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003afe:	2200      	movs	r2, #0
 8003b00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b0c:	4642      	mov	r2, r8
 8003b0e:	464b      	mov	r3, r9
 8003b10:	1891      	adds	r1, r2, r2
 8003b12:	61b9      	str	r1, [r7, #24]
 8003b14:	415b      	adcs	r3, r3
 8003b16:	61fb      	str	r3, [r7, #28]
 8003b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b1c:	4641      	mov	r1, r8
 8003b1e:	1851      	adds	r1, r2, r1
 8003b20:	6139      	str	r1, [r7, #16]
 8003b22:	4649      	mov	r1, r9
 8003b24:	414b      	adcs	r3, r1
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b34:	4659      	mov	r1, fp
 8003b36:	00cb      	lsls	r3, r1, #3
 8003b38:	4651      	mov	r1, sl
 8003b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b3e:	4651      	mov	r1, sl
 8003b40:	00ca      	lsls	r2, r1, #3
 8003b42:	4610      	mov	r0, r2
 8003b44:	4619      	mov	r1, r3
 8003b46:	4603      	mov	r3, r0
 8003b48:	4642      	mov	r2, r8
 8003b4a:	189b      	adds	r3, r3, r2
 8003b4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b50:	464b      	mov	r3, r9
 8003b52:	460a      	mov	r2, r1
 8003b54:	eb42 0303 	adc.w	r3, r2, r3
 8003b58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b74:	4649      	mov	r1, r9
 8003b76:	008b      	lsls	r3, r1, #2
 8003b78:	4641      	mov	r1, r8
 8003b7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b7e:	4641      	mov	r1, r8
 8003b80:	008a      	lsls	r2, r1, #2
 8003b82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b86:	f7fc fb83 	bl	8000290 <__aeabi_uldivmod>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4b38      	ldr	r3, [pc, #224]	@ (8003c74 <UART_SetConfig+0x4e4>)
 8003b92:	fba3 2301 	umull	r2, r3, r3, r1
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	2264      	movs	r2, #100	@ 0x64
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	1acb      	subs	r3, r1, r3
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	3332      	adds	r3, #50	@ 0x32
 8003ba4:	4a33      	ldr	r2, [pc, #204]	@ (8003c74 <UART_SetConfig+0x4e4>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bb0:	441c      	add	r4, r3
 8003bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bba:	677a      	str	r2, [r7, #116]	@ 0x74
 8003bbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003bc0:	4642      	mov	r2, r8
 8003bc2:	464b      	mov	r3, r9
 8003bc4:	1891      	adds	r1, r2, r2
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	415b      	adcs	r3, r3
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bd0:	4641      	mov	r1, r8
 8003bd2:	1851      	adds	r1, r2, r1
 8003bd4:	6039      	str	r1, [r7, #0]
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	414b      	adcs	r3, r1
 8003bda:	607b      	str	r3, [r7, #4]
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003be8:	4659      	mov	r1, fp
 8003bea:	00cb      	lsls	r3, r1, #3
 8003bec:	4651      	mov	r1, sl
 8003bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bf2:	4651      	mov	r1, sl
 8003bf4:	00ca      	lsls	r2, r1, #3
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4642      	mov	r2, r8
 8003bfe:	189b      	adds	r3, r3, r2
 8003c00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c02:	464b      	mov	r3, r9
 8003c04:	460a      	mov	r2, r1
 8003c06:	eb42 0303 	adc.w	r3, r2, r3
 8003c0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c16:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c24:	4649      	mov	r1, r9
 8003c26:	008b      	lsls	r3, r1, #2
 8003c28:	4641      	mov	r1, r8
 8003c2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c2e:	4641      	mov	r1, r8
 8003c30:	008a      	lsls	r2, r1, #2
 8003c32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c36:	f7fc fb2b 	bl	8000290 <__aeabi_uldivmod>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c74 <UART_SetConfig+0x4e4>)
 8003c40:	fba3 1302 	umull	r1, r3, r3, r2
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	2164      	movs	r1, #100	@ 0x64
 8003c48:	fb01 f303 	mul.w	r3, r1, r3
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	3332      	adds	r3, #50	@ 0x32
 8003c52:	4a08      	ldr	r2, [pc, #32]	@ (8003c74 <UART_SetConfig+0x4e4>)
 8003c54:	fba2 2303 	umull	r2, r3, r2, r3
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	f003 020f 	and.w	r2, r3, #15
 8003c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4422      	add	r2, r4
 8003c66:	609a      	str	r2, [r3, #8]
}
 8003c68:	bf00      	nop
 8003c6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c74:	51eb851f 	.word	0x51eb851f

08003c78 <SPIx_ReadWriteByte>:
  * 输入参数: byte：待发送数据
  * 返 回 值: uint8_t：接收到的数据
  * 说    明：无
  */
uint8_t SPIx_ReadWriteByte(SPI_HandleTypeDef* hspi,uint8_t byte)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	70fb      	strb	r3, [r7, #3]
  uint8_t d_read,d_send=byte;
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	73bb      	strb	r3, [r7, #14]
  if(HAL_SPI_TransmitReceive(hspi,&d_send,&d_read,1,0xFF)!=HAL_OK)
 8003c88:	f107 020f 	add.w	r2, r7, #15
 8003c8c:	f107 010e 	add.w	r1, r7, #14
 8003c90:	23ff      	movs	r3, #255	@ 0xff
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	2301      	movs	r3, #1
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fe fc75 	bl	8002586 <HAL_SPI_TransmitReceive>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <SPIx_ReadWriteByte+0x2e>
  {
    d_read=0xFF;
 8003ca2:	23ff      	movs	r3, #255	@ 0xff
 8003ca4:	73fb      	strb	r3, [r7, #15]
  }
  return d_read;
 8003ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <NRF24L01_Check>:
  * 输入参数: 无
  * 返 回 值: 0，成功;1，失败
  * 说    明：无
  */
uint8_t NRF24L01_Check(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
	uint8_t buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};
 8003cb6:	4a17      	ldr	r2, [pc, #92]	@ (8003d14 <NRF24L01_Check+0x64>)
 8003cb8:	463b      	mov	r3, r7
 8003cba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cbe:	6018      	str	r0, [r3, #0]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	7019      	strb	r1, [r3, #0]
	uint8_t i;

	NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,buf,5);//写入5个字节的地址.
 8003cc4:	463b      	mov	r3, r7
 8003cc6:	2205      	movs	r2, #5
 8003cc8:	4619      	mov	r1, r3
 8003cca:	2030      	movs	r0, #48	@ 0x30
 8003ccc:	f000 f8a6 	bl	8003e1c <NRF24L01_Write_Buf>
	NRF24L01_Read_Buf(TX_ADDR,buf,5); //读出写入的地址
 8003cd0:	463b      	mov	r3, r7
 8003cd2:	2205      	movs	r2, #5
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	2010      	movs	r0, #16
 8003cd8:	f000 f86a 	bl	8003db0 <NRF24L01_Read_Buf>
	for(i=0;i<5;i++)if(buf[i]!=0XA5)break;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	71fb      	strb	r3, [r7, #7]
 8003ce0:	e009      	b.n	8003cf6 <NRF24L01_Check+0x46>
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	443b      	add	r3, r7
 8003ce8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003cec:	2ba5      	cmp	r3, #165	@ 0xa5
 8003cee:	d106      	bne.n	8003cfe <NRF24L01_Check+0x4e>
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	71fb      	strb	r3, [r7, #7]
 8003cf6:	79fb      	ldrb	r3, [r7, #7]
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d9f2      	bls.n	8003ce2 <NRF24L01_Check+0x32>
 8003cfc:	e000      	b.n	8003d00 <NRF24L01_Check+0x50>
 8003cfe:	bf00      	nop
	if(i!=5)return 1;//检测24L01错误
 8003d00:	79fb      	ldrb	r3, [r7, #7]
 8003d02:	2b05      	cmp	r3, #5
 8003d04:	d001      	beq.n	8003d0a <NRF24L01_Check+0x5a>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <NRF24L01_Check+0x5c>
	return 0;		 //检测到24L01
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	08005174 	.word	0x08005174

08003d18 <NRF24L01_Write_Reg>:
  * 返 回 值: 无
  * 说    明：reg:指定寄存器地址
  *
  */
uint8_t NRF24L01_Write_Reg(uint8_t reg,uint8_t value)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	460a      	mov	r2, r1
 8003d22:	71fb      	strb	r3, [r7, #7]
 8003d24:	4613      	mov	r3, r2
 8003d26:	71bb      	strb	r3, [r7, #6]
	uint8_t status;
  NRF24L01_SPI_CS_ENABLE();                 //使能SPI传输
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2108      	movs	r1, #8
 8003d2c:	480c      	ldr	r0, [pc, #48]	@ (8003d60 <NRF24L01_Write_Reg+0x48>)
 8003d2e:	f7fd fdd1 	bl	80018d4 <HAL_GPIO_WritePin>
  status =SPIx_ReadWriteByte(&hspi_NRF24L01,reg);//发送寄存器号
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	4619      	mov	r1, r3
 8003d36:	480b      	ldr	r0, [pc, #44]	@ (8003d64 <NRF24L01_Write_Reg+0x4c>)
 8003d38:	f7ff ff9e 	bl	8003c78 <SPIx_ReadWriteByte>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	73fb      	strb	r3, [r7, #15]
  SPIx_ReadWriteByte(&hspi_NRF24L01,value);      //写入寄存器的值
 8003d40:	79bb      	ldrb	r3, [r7, #6]
 8003d42:	4619      	mov	r1, r3
 8003d44:	4807      	ldr	r0, [pc, #28]	@ (8003d64 <NRF24L01_Write_Reg+0x4c>)
 8003d46:	f7ff ff97 	bl	8003c78 <SPIx_ReadWriteByte>
  NRF24L01_SPI_CS_DISABLE();                 //禁止SPI传输
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	2108      	movs	r1, #8
 8003d4e:	4804      	ldr	r0, [pc, #16]	@ (8003d60 <NRF24L01_Write_Reg+0x48>)
 8003d50:	f7fd fdc0 	bl	80018d4 <HAL_GPIO_WritePin>
  return(status);       			//返回状态值
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40021000 	.word	0x40021000
 8003d64:	200000d8 	.word	0x200000d8

08003d68 <NRF24L01_Read_Reg>:
  * 返 回 值: 无
  * 说    明：reg:要读的寄存器
  *
  */
uint8_t NRF24L01_Read_Reg(uint8_t reg)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_val;
 	NRF24L01_SPI_CS_ENABLE();          //使能SPI传输
 8003d72:	2200      	movs	r2, #0
 8003d74:	2108      	movs	r1, #8
 8003d76:	480c      	ldr	r0, [pc, #48]	@ (8003da8 <NRF24L01_Read_Reg+0x40>)
 8003d78:	f7fd fdac 	bl	80018d4 <HAL_GPIO_WritePin>
  SPIx_ReadWriteByte(&hspi_NRF24L01,reg);   //发送寄存器号
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	4619      	mov	r1, r3
 8003d80:	480a      	ldr	r0, [pc, #40]	@ (8003dac <NRF24L01_Read_Reg+0x44>)
 8003d82:	f7ff ff79 	bl	8003c78 <SPIx_ReadWriteByte>
  reg_val=SPIx_ReadWriteByte(&hspi_NRF24L01,0XFF);//读取寄存器内容
 8003d86:	21ff      	movs	r1, #255	@ 0xff
 8003d88:	4808      	ldr	r0, [pc, #32]	@ (8003dac <NRF24L01_Read_Reg+0x44>)
 8003d8a:	f7ff ff75 	bl	8003c78 <SPIx_ReadWriteByte>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	73fb      	strb	r3, [r7, #15]
  NRF24L01_SPI_CS_DISABLE();          //禁止SPI传输
 8003d92:	2201      	movs	r2, #1
 8003d94:	2108      	movs	r1, #8
 8003d96:	4804      	ldr	r0, [pc, #16]	@ (8003da8 <NRF24L01_Read_Reg+0x40>)
 8003d98:	f7fd fd9c 	bl	80018d4 <HAL_GPIO_WritePin>
  return(reg_val);           //返回状态值
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40021000 	.word	0x40021000
 8003dac:	200000d8 	.word	0x200000d8

08003db0 <NRF24L01_Read_Buf>:
  * 返 回 值: 此次读到的状态寄存器值
  * 说    明：无
  *
  */
uint8_t NRF24L01_Read_Buf(uint8_t reg,uint8_t *pBuf,uint8_t len)
{
 8003db0:	b590      	push	{r4, r7, lr}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	6039      	str	r1, [r7, #0]
 8003dba:	71fb      	strb	r3, [r7, #7]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	71bb      	strb	r3, [r7, #6]
	uint8_t status,uint8_t_ctr;

  NRF24L01_SPI_CS_ENABLE();           //使能SPI传输
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2108      	movs	r1, #8
 8003dc4:	4813      	ldr	r0, [pc, #76]	@ (8003e14 <NRF24L01_Read_Buf+0x64>)
 8003dc6:	f7fd fd85 	bl	80018d4 <HAL_GPIO_WritePin>
  status=SPIx_ReadWriteByte(&hspi_NRF24L01,reg);//发送寄存器值(位置),并读取状态值
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4812      	ldr	r0, [pc, #72]	@ (8003e18 <NRF24L01_Read_Buf+0x68>)
 8003dd0:	f7ff ff52 	bl	8003c78 <SPIx_ReadWriteByte>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	73bb      	strb	r3, [r7, #14]
 	for(uint8_t_ctr=0;uint8_t_ctr<len;uint8_t_ctr++)
 8003dd8:	2300      	movs	r3, #0
 8003dda:	73fb      	strb	r3, [r7, #15]
 8003ddc:	e00b      	b.n	8003df6 <NRF24L01_Read_Buf+0x46>
  {
    pBuf[uint8_t_ctr]=SPIx_ReadWriteByte(&hspi_NRF24L01,0XFF);//读出数据
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	18d4      	adds	r4, r2, r3
 8003de4:	21ff      	movs	r1, #255	@ 0xff
 8003de6:	480c      	ldr	r0, [pc, #48]	@ (8003e18 <NRF24L01_Read_Buf+0x68>)
 8003de8:	f7ff ff46 	bl	8003c78 <SPIx_ReadWriteByte>
 8003dec:	4603      	mov	r3, r0
 8003dee:	7023      	strb	r3, [r4, #0]
 	for(uint8_t_ctr=0;uint8_t_ctr<len;uint8_t_ctr++)
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	3301      	adds	r3, #1
 8003df4:	73fb      	strb	r3, [r7, #15]
 8003df6:	7bfa      	ldrb	r2, [r7, #15]
 8003df8:	79bb      	ldrb	r3, [r7, #6]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d3ef      	bcc.n	8003dde <NRF24L01_Read_Buf+0x2e>
  }
  NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输
 8003dfe:	2201      	movs	r2, #1
 8003e00:	2108      	movs	r1, #8
 8003e02:	4804      	ldr	r0, [pc, #16]	@ (8003e14 <NRF24L01_Read_Buf+0x64>)
 8003e04:	f7fd fd66 	bl	80018d4 <HAL_GPIO_WritePin>
  return status;        //返回读到的状态值
 8003e08:	7bbb      	ldrb	r3, [r7, #14]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd90      	pop	{r4, r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40021000 	.word	0x40021000
 8003e18:	200000d8 	.word	0x200000d8

08003e1c <NRF24L01_Write_Buf>:
  * 返 回 值: 无
  * 说    明：reg:寄存器(位置)  *pBuf:数据指针  len:数据长度
  *
  */
uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	6039      	str	r1, [r7, #0]
 8003e26:	71fb      	strb	r3, [r7, #7]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	71bb      	strb	r3, [r7, #6]
	uint8_t status,uint8_t_ctr;
 	NRF24L01_SPI_CS_ENABLE();          //使能SPI传输
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2108      	movs	r1, #8
 8003e30:	4814      	ldr	r0, [pc, #80]	@ (8003e84 <NRF24L01_Write_Buf+0x68>)
 8003e32:	f7fd fd4f 	bl	80018d4 <HAL_GPIO_WritePin>
	status = SPIx_ReadWriteByte(&hspi_NRF24L01,reg);//发送寄存器值(位置),并读取状态值
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4813      	ldr	r0, [pc, #76]	@ (8003e88 <NRF24L01_Write_Buf+0x6c>)
 8003e3c:	f7ff ff1c 	bl	8003c78 <SPIx_ReadWriteByte>
 8003e40:	4603      	mov	r3, r0
 8003e42:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(1);
 8003e44:	2001      	movs	r0, #1
 8003e46:	f7fd fa5b 	bl	8001300 <HAL_Delay>
	for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++)
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	73fb      	strb	r3, [r7, #15]
 8003e4e:	e00a      	b.n	8003e66 <NRF24L01_Write_Buf+0x4a>
	{
		SPIx_ReadWriteByte(&hspi_NRF24L01,*pBuf++); //写入数据
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	603a      	str	r2, [r7, #0]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	4619      	mov	r1, r3
 8003e5a:	480b      	ldr	r0, [pc, #44]	@ (8003e88 <NRF24L01_Write_Buf+0x6c>)
 8003e5c:	f7ff ff0c 	bl	8003c78 <SPIx_ReadWriteByte>
	for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++)
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	3301      	adds	r3, #1
 8003e64:	73fb      	strb	r3, [r7, #15]
 8003e66:	7bfa      	ldrb	r2, [r7, #15]
 8003e68:	79bb      	ldrb	r3, [r7, #6]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d3f0      	bcc.n	8003e50 <NRF24L01_Write_Buf+0x34>
	}
	NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输
 8003e6e:	2201      	movs	r2, #1
 8003e70:	2108      	movs	r1, #8
 8003e72:	4804      	ldr	r0, [pc, #16]	@ (8003e84 <NRF24L01_Write_Buf+0x68>)
 8003e74:	f7fd fd2e 	bl	80018d4 <HAL_GPIO_WritePin>
	return status;          //返回读到的状态值
 8003e78:	7bbb      	ldrb	r3, [r7, #14]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000
 8003e88:	200000d8 	.word	0x200000d8

08003e8c <NRF24L01_TxPacket_Data>:
  * 返 回 值: 发送完成状况
  * 说    明：txbuf:待发送数据首地址; len: 数据长度字节数
  *
  */
uint8_t NRF24L01_TxPacket_Data(uint8_t *txbuf, uint8_t len)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	70fb      	strb	r3, [r7, #3]
	uint8_t sta;
	NRF24L01_CE_LOW();
 8003e98:	2200      	movs	r2, #0
 8003e9a:	2104      	movs	r1, #4
 8003e9c:	481b      	ldr	r0, [pc, #108]	@ (8003f0c <NRF24L01_TxPacket_Data+0x80>)
 8003e9e:	f7fd fd19 	bl	80018d4 <HAL_GPIO_WritePin>
    NRF24L01_Write_Buf(WR_TX_PLOAD,txbuf,len);//写数据到TX BUF 小于 32个字节
 8003ea2:	78fb      	ldrb	r3, [r7, #3]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	20a0      	movs	r0, #160	@ 0xa0
 8003eaa:	f7ff ffb7 	bl	8003e1c <NRF24L01_Write_Buf>
 	NRF24L01_CE_HIGH();//启动发送
 8003eae:	2201      	movs	r2, #1
 8003eb0:	2104      	movs	r1, #4
 8003eb2:	4816      	ldr	r0, [pc, #88]	@ (8003f0c <NRF24L01_TxPacket_Data+0x80>)
 8003eb4:	f7fd fd0e 	bl	80018d4 <HAL_GPIO_WritePin>

	while(NRF24L01_IRQ_PIN_READ()!=0);//等待发送完成
 8003eb8:	bf00      	nop
 8003eba:	2110      	movs	r1, #16
 8003ebc:	4814      	ldr	r0, [pc, #80]	@ (8003f10 <NRF24L01_TxPacket_Data+0x84>)
 8003ebe:	f7fd fcf1 	bl	80018a4 <HAL_GPIO_ReadPin>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1f8      	bne.n	8003eba <NRF24L01_TxPacket_Data+0x2e>

	sta=NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值
 8003ec8:	2007      	movs	r0, #7
 8003eca:	f7ff ff4d 	bl	8003d68 <NRF24L01_Read_Reg>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	73fb      	strb	r3, [r7, #15]
	NRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志
 8003ed2:	7bfb      	ldrb	r3, [r7, #15]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	2027      	movs	r0, #39	@ 0x27
 8003ed8:	f7ff ff1e 	bl	8003d18 <NRF24L01_Write_Reg>
	if(sta&MAX_TX)//达到最大重发次数
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
 8003ede:	f003 0310 	and.w	r3, r3, #16
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <NRF24L01_TxPacket_Data+0x66>
	{
		NRF24L01_Write_Reg(FLUSH_TX,0xff);//清除TX FIFO寄存器
 8003ee6:	21ff      	movs	r1, #255	@ 0xff
 8003ee8:	20e1      	movs	r0, #225	@ 0xe1
 8003eea:	f7ff ff15 	bl	8003d18 <NRF24L01_Write_Reg>
		return MAX_TX;
 8003eee:	2310      	movs	r3, #16
 8003ef0:	e007      	b.n	8003f02 <NRF24L01_TxPacket_Data+0x76>
	}
	if(sta&TX_OK)//发送完成
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <NRF24L01_TxPacket_Data+0x74>
	{
		return TX_OK;
 8003efc:	2320      	movs	r3, #32
 8003efe:	e000      	b.n	8003f02 <NRF24L01_TxPacket_Data+0x76>
	}
	return 0xff;//其他原因发送失败
 8003f00:	23ff      	movs	r3, #255	@ 0xff
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	40020000 	.word	0x40020000

08003f14 <NRF24L01_TX_Mode>:
  * 返 回 值: 无
  * 说    明：无
  *
  */
void NRF24L01_TX_Mode(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
	NRF24L01_CE_LOW();
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2104      	movs	r1, #4
 8003f1c:	4817      	ldr	r0, [pc, #92]	@ (8003f7c <NRF24L01_TX_Mode+0x68>)
 8003f1e:	f7fd fcd9 	bl	80018d4 <HAL_GPIO_WritePin>
  NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS,TX_ADR_WIDTH);//写TX节点地址
 8003f22:	2205      	movs	r2, #5
 8003f24:	4916      	ldr	r1, [pc, #88]	@ (8003f80 <NRF24L01_TX_Mode+0x6c>)
 8003f26:	2030      	movs	r0, #48	@ 0x30
 8003f28:	f7ff ff78 	bl	8003e1c <NRF24L01_Write_Buf>
  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK
 8003f2c:	2205      	movs	r2, #5
 8003f2e:	4915      	ldr	r1, [pc, #84]	@ (8003f84 <NRF24L01_TX_Mode+0x70>)
 8003f30:	202a      	movs	r0, #42	@ 0x2a
 8003f32:	f7ff ff73 	bl	8003e1c <NRF24L01_Write_Buf>

  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);     //使能通道0的自动应答
 8003f36:	2101      	movs	r1, #1
 8003f38:	2021      	movs	r0, #33	@ 0x21
 8003f3a:	f7ff feed 	bl	8003d18 <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01); //使能通道0的接收地址
 8003f3e:	2101      	movs	r1, #1
 8003f40:	2022      	movs	r0, #34	@ 0x22
 8003f42:	f7ff fee9 	bl	8003d18 <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+SETUP_RETR,0xff);//设置自动重发间隔时间:4000us + 86us;最大自动重发次数:15次
 8003f46:	21ff      	movs	r1, #255	@ 0xff
 8003f48:	2024      	movs	r0, #36	@ 0x24
 8003f4a:	f7ff fee5 	bl	8003d18 <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);       //设置RF通道为40
 8003f4e:	2128      	movs	r1, #40	@ 0x28
 8003f50:	2025      	movs	r0, #37	@ 0x25
 8003f52:	f7ff fee1 	bl	8003d18 <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启
 8003f56:	210f      	movs	r1, #15
 8003f58:	2026      	movs	r0, #38	@ 0x26
 8003f5a:	f7ff fedd 	bl	8003d18 <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG,0x0e);    //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式,开启所有中断
 8003f5e:	210e      	movs	r1, #14
 8003f60:	2020      	movs	r0, #32
 8003f62:	f7ff fed9 	bl	8003d18 <NRF24L01_Write_Reg>
	NRF24L01_CE_HIGH();//CE为高,10us后启动发送
 8003f66:	2201      	movs	r2, #1
 8003f68:	2104      	movs	r1, #4
 8003f6a:	4804      	ldr	r0, [pc, #16]	@ (8003f7c <NRF24L01_TX_Mode+0x68>)
 8003f6c:	f7fd fcb2 	bl	80018d4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8003f70:	2001      	movs	r0, #1
 8003f72:	f7fd f9c5 	bl	8001300 <HAL_Delay>
}
 8003f76:	bf00      	nop
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	0800519c 	.word	0x0800519c
 8003f84:	080051a4 	.word	0x080051a4

08003f88 <NRF24L02_Check>:
  * 输入参数: 无
  * 返 回 值: 0，成功;1，失败
  * 说    明：无
  */
uint8_t NRF24L02_Check(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
	uint8_t buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};
 8003f8e:	4a17      	ldr	r2, [pc, #92]	@ (8003fec <NRF24L02_Check+0x64>)
 8003f90:	463b      	mov	r3, r7
 8003f92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f96:	6018      	str	r0, [r3, #0]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	7019      	strb	r1, [r3, #0]
	uint8_t i;

	NRF24L02_Write_Buf(NRF_WRITE_REG+TX_ADDR,buf,5);//写入5个字节的地址.
 8003f9c:	463b      	mov	r3, r7
 8003f9e:	2205      	movs	r2, #5
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	2030      	movs	r0, #48	@ 0x30
 8003fa4:	f000 f8a6 	bl	80040f4 <NRF24L02_Write_Buf>
	NRF24L02_Read_Buf(TX_ADDR,buf,5); //读出写入的地址
 8003fa8:	463b      	mov	r3, r7
 8003faa:	2205      	movs	r2, #5
 8003fac:	4619      	mov	r1, r3
 8003fae:	2010      	movs	r0, #16
 8003fb0:	f000 f86a 	bl	8004088 <NRF24L02_Read_Buf>
	for(i=0;i<5;i++)if(buf[i]!=0XA5)break;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	71fb      	strb	r3, [r7, #7]
 8003fb8:	e009      	b.n	8003fce <NRF24L02_Check+0x46>
 8003fba:	79fb      	ldrb	r3, [r7, #7]
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	443b      	add	r3, r7
 8003fc0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003fc4:	2ba5      	cmp	r3, #165	@ 0xa5
 8003fc6:	d106      	bne.n	8003fd6 <NRF24L02_Check+0x4e>
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	71fb      	strb	r3, [r7, #7]
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d9f2      	bls.n	8003fba <NRF24L02_Check+0x32>
 8003fd4:	e000      	b.n	8003fd8 <NRF24L02_Check+0x50>
 8003fd6:	bf00      	nop
	if(i!=5)return 1;//检测24L01错误
 8003fd8:	79fb      	ldrb	r3, [r7, #7]
 8003fda:	2b05      	cmp	r3, #5
 8003fdc:	d001      	beq.n	8003fe2 <NRF24L02_Check+0x5a>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <NRF24L02_Check+0x5c>
	return 0;		 //检测到24L01
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	0800517c 	.word	0x0800517c

08003ff0 <NRF24L02_Write_Reg>:
  * 返 回 值: 无
  * 说    明：reg:指定寄存器地址
  *
  */
uint8_t NRF24L02_Write_Reg(uint8_t reg,uint8_t value)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	460a      	mov	r2, r1
 8003ffa:	71fb      	strb	r3, [r7, #7]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	71bb      	strb	r3, [r7, #6]
	uint8_t status;
  NRF24L02_SPI_CS_ENABLE();                 //使能SPI传输
 8004000:	2200      	movs	r2, #0
 8004002:	2120      	movs	r1, #32
 8004004:	480c      	ldr	r0, [pc, #48]	@ (8004038 <NRF24L02_Write_Reg+0x48>)
 8004006:	f7fd fc65 	bl	80018d4 <HAL_GPIO_WritePin>
  status =SPIx_ReadWriteByte(&hspi_NRF24L02,reg);//发送寄存器号
 800400a:	79fb      	ldrb	r3, [r7, #7]
 800400c:	4619      	mov	r1, r3
 800400e:	480b      	ldr	r0, [pc, #44]	@ (800403c <NRF24L02_Write_Reg+0x4c>)
 8004010:	f7ff fe32 	bl	8003c78 <SPIx_ReadWriteByte>
 8004014:	4603      	mov	r3, r0
 8004016:	73fb      	strb	r3, [r7, #15]
  SPIx_ReadWriteByte(&hspi_NRF24L02,value);      //写入寄存器的值
 8004018:	79bb      	ldrb	r3, [r7, #6]
 800401a:	4619      	mov	r1, r3
 800401c:	4807      	ldr	r0, [pc, #28]	@ (800403c <NRF24L02_Write_Reg+0x4c>)
 800401e:	f7ff fe2b 	bl	8003c78 <SPIx_ReadWriteByte>
  NRF24L02_SPI_CS_DISABLE();                 //禁止SPI传输
 8004022:	2201      	movs	r2, #1
 8004024:	2120      	movs	r1, #32
 8004026:	4804      	ldr	r0, [pc, #16]	@ (8004038 <NRF24L02_Write_Reg+0x48>)
 8004028:	f7fd fc54 	bl	80018d4 <HAL_GPIO_WritePin>
  return(status);       			//返回状态值
 800402c:	7bfb      	ldrb	r3, [r7, #15]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40021000 	.word	0x40021000
 800403c:	20000130 	.word	0x20000130

08004040 <NRF24L02_Read_Reg>:
  * 返 回 值: 无
  * 说    明：reg:要读的寄存器
  *
  */
uint8_t NRF24L02_Read_Reg(uint8_t reg)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_val;
 	NRF24L02_SPI_CS_ENABLE();          //使能SPI传输
 800404a:	2200      	movs	r2, #0
 800404c:	2120      	movs	r1, #32
 800404e:	480c      	ldr	r0, [pc, #48]	@ (8004080 <NRF24L02_Read_Reg+0x40>)
 8004050:	f7fd fc40 	bl	80018d4 <HAL_GPIO_WritePin>
  SPIx_ReadWriteByte(&hspi_NRF24L02,reg);   //发送寄存器号
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	4619      	mov	r1, r3
 8004058:	480a      	ldr	r0, [pc, #40]	@ (8004084 <NRF24L02_Read_Reg+0x44>)
 800405a:	f7ff fe0d 	bl	8003c78 <SPIx_ReadWriteByte>
  reg_val=SPIx_ReadWriteByte(&hspi_NRF24L02,0XFF);//读取寄存器内容
 800405e:	21ff      	movs	r1, #255	@ 0xff
 8004060:	4808      	ldr	r0, [pc, #32]	@ (8004084 <NRF24L02_Read_Reg+0x44>)
 8004062:	f7ff fe09 	bl	8003c78 <SPIx_ReadWriteByte>
 8004066:	4603      	mov	r3, r0
 8004068:	73fb      	strb	r3, [r7, #15]
  NRF24L02_SPI_CS_DISABLE();          //禁止SPI传输
 800406a:	2201      	movs	r2, #1
 800406c:	2120      	movs	r1, #32
 800406e:	4804      	ldr	r0, [pc, #16]	@ (8004080 <NRF24L02_Read_Reg+0x40>)
 8004070:	f7fd fc30 	bl	80018d4 <HAL_GPIO_WritePin>
  return(reg_val);           //返回状态值
 8004074:	7bfb      	ldrb	r3, [r7, #15]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40021000 	.word	0x40021000
 8004084:	20000130 	.word	0x20000130

08004088 <NRF24L02_Read_Buf>:
  * 返 回 值: 此次读到的状态寄存器值
  * 说    明：无
  *
  */
uint8_t NRF24L02_Read_Buf(uint8_t reg,uint8_t *pBuf,uint8_t len)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	6039      	str	r1, [r7, #0]
 8004092:	71fb      	strb	r3, [r7, #7]
 8004094:	4613      	mov	r3, r2
 8004096:	71bb      	strb	r3, [r7, #6]
	uint8_t status,uint8_t_ctr;

  NRF24L02_SPI_CS_ENABLE();           //使能SPI传输
 8004098:	2200      	movs	r2, #0
 800409a:	2120      	movs	r1, #32
 800409c:	4813      	ldr	r0, [pc, #76]	@ (80040ec <NRF24L02_Read_Buf+0x64>)
 800409e:	f7fd fc19 	bl	80018d4 <HAL_GPIO_WritePin>
  status=SPIx_ReadWriteByte(&hspi_NRF24L02,reg);//发送寄存器值(位置),并读取状态值
 80040a2:	79fb      	ldrb	r3, [r7, #7]
 80040a4:	4619      	mov	r1, r3
 80040a6:	4812      	ldr	r0, [pc, #72]	@ (80040f0 <NRF24L02_Read_Buf+0x68>)
 80040a8:	f7ff fde6 	bl	8003c78 <SPIx_ReadWriteByte>
 80040ac:	4603      	mov	r3, r0
 80040ae:	73bb      	strb	r3, [r7, #14]
 	for(uint8_t_ctr=0;uint8_t_ctr<len;uint8_t_ctr++)
 80040b0:	2300      	movs	r3, #0
 80040b2:	73fb      	strb	r3, [r7, #15]
 80040b4:	e00c      	b.n	80040d0 <NRF24L02_Read_Buf+0x48>
  {
    pBuf[uint8_t_ctr]=SPIx_ReadWriteByte(&hspi_NRF24L02,0XFF);//读出数据
 80040b6:	21ff      	movs	r1, #255	@ 0xff
 80040b8:	480d      	ldr	r0, [pc, #52]	@ (80040f0 <NRF24L02_Read_Buf+0x68>)
 80040ba:	f7ff fddd 	bl	8003c78 <SPIx_ReadWriteByte>
 80040be:	4601      	mov	r1, r0
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	4413      	add	r3, r2
 80040c6:	b2ca      	uxtb	r2, r1
 80040c8:	701a      	strb	r2, [r3, #0]
 	for(uint8_t_ctr=0;uint8_t_ctr<len;uint8_t_ctr++)
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	3301      	adds	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
 80040d0:	7bfa      	ldrb	r2, [r7, #15]
 80040d2:	79bb      	ldrb	r3, [r7, #6]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d3ee      	bcc.n	80040b6 <NRF24L02_Read_Buf+0x2e>
  }
  NRF24L02_SPI_CS_DISABLE();       //关闭SPI传输
 80040d8:	2201      	movs	r2, #1
 80040da:	2120      	movs	r1, #32
 80040dc:	4803      	ldr	r0, [pc, #12]	@ (80040ec <NRF24L02_Read_Buf+0x64>)
 80040de:	f7fd fbf9 	bl	80018d4 <HAL_GPIO_WritePin>
  return status;        //返回读到的状态值
 80040e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40021000 	.word	0x40021000
 80040f0:	20000130 	.word	0x20000130

080040f4 <NRF24L02_Write_Buf>:
  * 返 回 值: 无
  * 说    明：reg:寄存器(位置)  *pBuf:数据指针  len:数据长度
  *
  */
uint8_t NRF24L02_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	6039      	str	r1, [r7, #0]
 80040fe:	71fb      	strb	r3, [r7, #7]
 8004100:	4613      	mov	r3, r2
 8004102:	71bb      	strb	r3, [r7, #6]
	uint8_t status,uint8_t_ctr;
 	NRF24L02_SPI_CS_ENABLE();          //使能SPI传输
 8004104:	2200      	movs	r2, #0
 8004106:	2120      	movs	r1, #32
 8004108:	4814      	ldr	r0, [pc, #80]	@ (800415c <NRF24L02_Write_Buf+0x68>)
 800410a:	f7fd fbe3 	bl	80018d4 <HAL_GPIO_WritePin>
	status = SPIx_ReadWriteByte(&hspi_NRF24L02,reg);//发送寄存器值(位置),并读取状态值
 800410e:	79fb      	ldrb	r3, [r7, #7]
 8004110:	4619      	mov	r1, r3
 8004112:	4813      	ldr	r0, [pc, #76]	@ (8004160 <NRF24L02_Write_Buf+0x6c>)
 8004114:	f7ff fdb0 	bl	8003c78 <SPIx_ReadWriteByte>
 8004118:	4603      	mov	r3, r0
 800411a:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(1);
 800411c:	2001      	movs	r0, #1
 800411e:	f7fd f8ef 	bl	8001300 <HAL_Delay>
	for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++)
 8004122:	2300      	movs	r3, #0
 8004124:	73fb      	strb	r3, [r7, #15]
 8004126:	e00a      	b.n	800413e <NRF24L02_Write_Buf+0x4a>
	{
		SPIx_ReadWriteByte(&hspi_NRF24L02,*pBuf++); //写入数据
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	603a      	str	r2, [r7, #0]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	4619      	mov	r1, r3
 8004132:	480b      	ldr	r0, [pc, #44]	@ (8004160 <NRF24L02_Write_Buf+0x6c>)
 8004134:	f7ff fda0 	bl	8003c78 <SPIx_ReadWriteByte>
	for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++)
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	3301      	adds	r3, #1
 800413c:	73fb      	strb	r3, [r7, #15]
 800413e:	7bfa      	ldrb	r2, [r7, #15]
 8004140:	79bb      	ldrb	r3, [r7, #6]
 8004142:	429a      	cmp	r2, r3
 8004144:	d3f0      	bcc.n	8004128 <NRF24L02_Write_Buf+0x34>
	}
	NRF24L02_SPI_CS_DISABLE();       //关闭SPI传输
 8004146:	2201      	movs	r2, #1
 8004148:	2120      	movs	r1, #32
 800414a:	4804      	ldr	r0, [pc, #16]	@ (800415c <NRF24L02_Write_Buf+0x68>)
 800414c:	f7fd fbc2 	bl	80018d4 <HAL_GPIO_WritePin>
	return status;          //返回读到的状态值
 8004150:	7bbb      	ldrb	r3, [r7, #14]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40021000 	.word	0x40021000
 8004160:	20000130 	.word	0x20000130

08004164 <NRF24L02_RxPacket>:
  * 返 回 值: 无
  * 说    明：无
  *
  */
uint8_t NRF24L02_RxPacket(uint8_t *rxbuf)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
	uint8_t sta;
	sta=NRF24L02_Read_Reg(STATUS);  //读取状态寄存器的值
 800416c:	2007      	movs	r0, #7
 800416e:	f7ff ff67 	bl	8004040 <NRF24L02_Read_Reg>
 8004172:	4603      	mov	r3, r0
 8004174:	73fb      	strb	r3, [r7, #15]
	NRF24L02_Write_Reg(NRF_WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	4619      	mov	r1, r3
 800417a:	2027      	movs	r0, #39	@ 0x27
 800417c:	f7ff ff38 	bl	8003ff0 <NRF24L02_Write_Reg>
	if(sta&RX_OK)//接收到数据
 8004180:	7bfb      	ldrb	r3, [r7, #15]
 8004182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <NRF24L02_RxPacket+0x3c>
	{
		NRF24L02_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);//读取数据
 800418a:	2220      	movs	r2, #32
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	2061      	movs	r0, #97	@ 0x61
 8004190:	f7ff ff7a 	bl	8004088 <NRF24L02_Read_Buf>
		NRF24L02_Write_Reg(FLUSH_RX,0xff);//清除RX FIFO寄存器
 8004194:	21ff      	movs	r1, #255	@ 0xff
 8004196:	20e2      	movs	r0, #226	@ 0xe2
 8004198:	f7ff ff2a 	bl	8003ff0 <NRF24L02_Write_Reg>
		return 0;
 800419c:	2300      	movs	r3, #0
 800419e:	e000      	b.n	80041a2 <NRF24L02_RxPacket+0x3e>
	}
	return 1;//没收到任何数据
 80041a0:	2301      	movs	r3, #1
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <NRF24L02_RX_Mode>:
  * 返 回 值: 无
  * 说    明：无
  *
  */
void NRF24L02_RX_Mode(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
	NRF24L02_CE_LOW();
 80041b0:	2200      	movs	r2, #0
 80041b2:	2110      	movs	r1, #16
 80041b4:	4814      	ldr	r0, [pc, #80]	@ (8004208 <NRF24L02_RX_Mode+0x5c>)
 80041b6:	f7fd fb8d 	bl	80018d4 <HAL_GPIO_WritePin>
  NRF24L02_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0F);//配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC
 80041ba:	210f      	movs	r1, #15
 80041bc:	2020      	movs	r0, #32
 80041be:	f7ff ff17 	bl	8003ff0 <NRF24L02_Write_Reg>
  NRF24L02_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);    //使能通道0的自动应答
 80041c2:	2101      	movs	r1, #1
 80041c4:	2021      	movs	r0, #33	@ 0x21
 80041c6:	f7ff ff13 	bl	8003ff0 <NRF24L02_Write_Reg>
  NRF24L02_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01);//使能通道0的接收地址
 80041ca:	2101      	movs	r1, #1
 80041cc:	2022      	movs	r0, #34	@ 0x22
 80041ce:	f7ff ff0f 	bl	8003ff0 <NRF24L02_Write_Reg>
  NRF24L02_Write_Reg(NRF_WRITE_REG+RF_CH,40);	     //设置RF通信频率
 80041d2:	2128      	movs	r1, #40	@ 0x28
 80041d4:	2025      	movs	r0, #37	@ 0x25
 80041d6:	f7ff ff0b 	bl	8003ff0 <NRF24L02_Write_Reg>
  NRF24L02_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);//设置TX发射参数,0db增益,2Mbps,低噪声增益开启
 80041da:	210f      	movs	r1, #15
 80041dc:	2026      	movs	r0, #38	@ 0x26
 80041de:	f7ff ff07 	bl	8003ff0 <NRF24L02_Write_Reg>

  NRF24L02_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);//选择通道0的有效数据宽度
 80041e2:	2120      	movs	r1, #32
 80041e4:	2031      	movs	r0, #49	@ 0x31
 80041e6:	f7ff ff03 	bl	8003ff0 <NRF24L02_Write_Reg>

  NRF24L02_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS2,RX_ADR_WIDTH);//写RX节点地址
 80041ea:	2205      	movs	r2, #5
 80041ec:	4907      	ldr	r1, [pc, #28]	@ (800420c <NRF24L02_RX_Mode+0x60>)
 80041ee:	202a      	movs	r0, #42	@ 0x2a
 80041f0:	f7ff ff80 	bl	80040f4 <NRF24L02_Write_Buf>

  NRF24L02_CE_HIGH(); //CE为高,进入接收模式
 80041f4:	2201      	movs	r2, #1
 80041f6:	2110      	movs	r1, #16
 80041f8:	4803      	ldr	r0, [pc, #12]	@ (8004208 <NRF24L02_RX_Mode+0x5c>)
 80041fa:	f7fd fb6b 	bl	80018d4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80041fe:	2001      	movs	r0, #1
 8004200:	f7fd f87e 	bl	8001300 <HAL_Delay>
}
 8004204:	bf00      	nop
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40021000 	.word	0x40021000
 800420c:	080051ac 	.word	0x080051ac

08004210 <std>:
 8004210:	2300      	movs	r3, #0
 8004212:	b510      	push	{r4, lr}
 8004214:	4604      	mov	r4, r0
 8004216:	e9c0 3300 	strd	r3, r3, [r0]
 800421a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800421e:	6083      	str	r3, [r0, #8]
 8004220:	8181      	strh	r1, [r0, #12]
 8004222:	6643      	str	r3, [r0, #100]	@ 0x64
 8004224:	81c2      	strh	r2, [r0, #14]
 8004226:	6183      	str	r3, [r0, #24]
 8004228:	4619      	mov	r1, r3
 800422a:	2208      	movs	r2, #8
 800422c:	305c      	adds	r0, #92	@ 0x5c
 800422e:	f000 f9f9 	bl	8004624 <memset>
 8004232:	4b0d      	ldr	r3, [pc, #52]	@ (8004268 <std+0x58>)
 8004234:	6263      	str	r3, [r4, #36]	@ 0x24
 8004236:	4b0d      	ldr	r3, [pc, #52]	@ (800426c <std+0x5c>)
 8004238:	62a3      	str	r3, [r4, #40]	@ 0x28
 800423a:	4b0d      	ldr	r3, [pc, #52]	@ (8004270 <std+0x60>)
 800423c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800423e:	4b0d      	ldr	r3, [pc, #52]	@ (8004274 <std+0x64>)
 8004240:	6323      	str	r3, [r4, #48]	@ 0x30
 8004242:	4b0d      	ldr	r3, [pc, #52]	@ (8004278 <std+0x68>)
 8004244:	6224      	str	r4, [r4, #32]
 8004246:	429c      	cmp	r4, r3
 8004248:	d006      	beq.n	8004258 <std+0x48>
 800424a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800424e:	4294      	cmp	r4, r2
 8004250:	d002      	beq.n	8004258 <std+0x48>
 8004252:	33d0      	adds	r3, #208	@ 0xd0
 8004254:	429c      	cmp	r4, r3
 8004256:	d105      	bne.n	8004264 <std+0x54>
 8004258:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800425c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004260:	f000 ba58 	b.w	8004714 <__retarget_lock_init_recursive>
 8004264:	bd10      	pop	{r4, pc}
 8004266:	bf00      	nop
 8004268:	08004475 	.word	0x08004475
 800426c:	08004497 	.word	0x08004497
 8004270:	080044cf 	.word	0x080044cf
 8004274:	080044f3 	.word	0x080044f3
 8004278:	200002b0 	.word	0x200002b0

0800427c <stdio_exit_handler>:
 800427c:	4a02      	ldr	r2, [pc, #8]	@ (8004288 <stdio_exit_handler+0xc>)
 800427e:	4903      	ldr	r1, [pc, #12]	@ (800428c <stdio_exit_handler+0x10>)
 8004280:	4803      	ldr	r0, [pc, #12]	@ (8004290 <stdio_exit_handler+0x14>)
 8004282:	f000 b869 	b.w	8004358 <_fwalk_sglue>
 8004286:	bf00      	nop
 8004288:	2000000c 	.word	0x2000000c
 800428c:	08004fb5 	.word	0x08004fb5
 8004290:	2000001c 	.word	0x2000001c

08004294 <cleanup_stdio>:
 8004294:	6841      	ldr	r1, [r0, #4]
 8004296:	4b0c      	ldr	r3, [pc, #48]	@ (80042c8 <cleanup_stdio+0x34>)
 8004298:	4299      	cmp	r1, r3
 800429a:	b510      	push	{r4, lr}
 800429c:	4604      	mov	r4, r0
 800429e:	d001      	beq.n	80042a4 <cleanup_stdio+0x10>
 80042a0:	f000 fe88 	bl	8004fb4 <_fflush_r>
 80042a4:	68a1      	ldr	r1, [r4, #8]
 80042a6:	4b09      	ldr	r3, [pc, #36]	@ (80042cc <cleanup_stdio+0x38>)
 80042a8:	4299      	cmp	r1, r3
 80042aa:	d002      	beq.n	80042b2 <cleanup_stdio+0x1e>
 80042ac:	4620      	mov	r0, r4
 80042ae:	f000 fe81 	bl	8004fb4 <_fflush_r>
 80042b2:	68e1      	ldr	r1, [r4, #12]
 80042b4:	4b06      	ldr	r3, [pc, #24]	@ (80042d0 <cleanup_stdio+0x3c>)
 80042b6:	4299      	cmp	r1, r3
 80042b8:	d004      	beq.n	80042c4 <cleanup_stdio+0x30>
 80042ba:	4620      	mov	r0, r4
 80042bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042c0:	f000 be78 	b.w	8004fb4 <_fflush_r>
 80042c4:	bd10      	pop	{r4, pc}
 80042c6:	bf00      	nop
 80042c8:	200002b0 	.word	0x200002b0
 80042cc:	20000318 	.word	0x20000318
 80042d0:	20000380 	.word	0x20000380

080042d4 <global_stdio_init.part.0>:
 80042d4:	b510      	push	{r4, lr}
 80042d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004304 <global_stdio_init.part.0+0x30>)
 80042d8:	4c0b      	ldr	r4, [pc, #44]	@ (8004308 <global_stdio_init.part.0+0x34>)
 80042da:	4a0c      	ldr	r2, [pc, #48]	@ (800430c <global_stdio_init.part.0+0x38>)
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	4620      	mov	r0, r4
 80042e0:	2200      	movs	r2, #0
 80042e2:	2104      	movs	r1, #4
 80042e4:	f7ff ff94 	bl	8004210 <std>
 80042e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80042ec:	2201      	movs	r2, #1
 80042ee:	2109      	movs	r1, #9
 80042f0:	f7ff ff8e 	bl	8004210 <std>
 80042f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80042f8:	2202      	movs	r2, #2
 80042fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042fe:	2112      	movs	r1, #18
 8004300:	f7ff bf86 	b.w	8004210 <std>
 8004304:	200003e8 	.word	0x200003e8
 8004308:	200002b0 	.word	0x200002b0
 800430c:	0800427d 	.word	0x0800427d

08004310 <__sfp_lock_acquire>:
 8004310:	4801      	ldr	r0, [pc, #4]	@ (8004318 <__sfp_lock_acquire+0x8>)
 8004312:	f000 ba00 	b.w	8004716 <__retarget_lock_acquire_recursive>
 8004316:	bf00      	nop
 8004318:	200003f1 	.word	0x200003f1

0800431c <__sfp_lock_release>:
 800431c:	4801      	ldr	r0, [pc, #4]	@ (8004324 <__sfp_lock_release+0x8>)
 800431e:	f000 b9fb 	b.w	8004718 <__retarget_lock_release_recursive>
 8004322:	bf00      	nop
 8004324:	200003f1 	.word	0x200003f1

08004328 <__sinit>:
 8004328:	b510      	push	{r4, lr}
 800432a:	4604      	mov	r4, r0
 800432c:	f7ff fff0 	bl	8004310 <__sfp_lock_acquire>
 8004330:	6a23      	ldr	r3, [r4, #32]
 8004332:	b11b      	cbz	r3, 800433c <__sinit+0x14>
 8004334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004338:	f7ff bff0 	b.w	800431c <__sfp_lock_release>
 800433c:	4b04      	ldr	r3, [pc, #16]	@ (8004350 <__sinit+0x28>)
 800433e:	6223      	str	r3, [r4, #32]
 8004340:	4b04      	ldr	r3, [pc, #16]	@ (8004354 <__sinit+0x2c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1f5      	bne.n	8004334 <__sinit+0xc>
 8004348:	f7ff ffc4 	bl	80042d4 <global_stdio_init.part.0>
 800434c:	e7f2      	b.n	8004334 <__sinit+0xc>
 800434e:	bf00      	nop
 8004350:	08004295 	.word	0x08004295
 8004354:	200003e8 	.word	0x200003e8

08004358 <_fwalk_sglue>:
 8004358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800435c:	4607      	mov	r7, r0
 800435e:	4688      	mov	r8, r1
 8004360:	4614      	mov	r4, r2
 8004362:	2600      	movs	r6, #0
 8004364:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004368:	f1b9 0901 	subs.w	r9, r9, #1
 800436c:	d505      	bpl.n	800437a <_fwalk_sglue+0x22>
 800436e:	6824      	ldr	r4, [r4, #0]
 8004370:	2c00      	cmp	r4, #0
 8004372:	d1f7      	bne.n	8004364 <_fwalk_sglue+0xc>
 8004374:	4630      	mov	r0, r6
 8004376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800437a:	89ab      	ldrh	r3, [r5, #12]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d907      	bls.n	8004390 <_fwalk_sglue+0x38>
 8004380:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004384:	3301      	adds	r3, #1
 8004386:	d003      	beq.n	8004390 <_fwalk_sglue+0x38>
 8004388:	4629      	mov	r1, r5
 800438a:	4638      	mov	r0, r7
 800438c:	47c0      	blx	r8
 800438e:	4306      	orrs	r6, r0
 8004390:	3568      	adds	r5, #104	@ 0x68
 8004392:	e7e9      	b.n	8004368 <_fwalk_sglue+0x10>

08004394 <iprintf>:
 8004394:	b40f      	push	{r0, r1, r2, r3}
 8004396:	b507      	push	{r0, r1, r2, lr}
 8004398:	4906      	ldr	r1, [pc, #24]	@ (80043b4 <iprintf+0x20>)
 800439a:	ab04      	add	r3, sp, #16
 800439c:	6808      	ldr	r0, [r1, #0]
 800439e:	f853 2b04 	ldr.w	r2, [r3], #4
 80043a2:	6881      	ldr	r1, [r0, #8]
 80043a4:	9301      	str	r3, [sp, #4]
 80043a6:	f000 fadb 	bl	8004960 <_vfiprintf_r>
 80043aa:	b003      	add	sp, #12
 80043ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80043b0:	b004      	add	sp, #16
 80043b2:	4770      	bx	lr
 80043b4:	20000018 	.word	0x20000018

080043b8 <_puts_r>:
 80043b8:	6a03      	ldr	r3, [r0, #32]
 80043ba:	b570      	push	{r4, r5, r6, lr}
 80043bc:	6884      	ldr	r4, [r0, #8]
 80043be:	4605      	mov	r5, r0
 80043c0:	460e      	mov	r6, r1
 80043c2:	b90b      	cbnz	r3, 80043c8 <_puts_r+0x10>
 80043c4:	f7ff ffb0 	bl	8004328 <__sinit>
 80043c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043ca:	07db      	lsls	r3, r3, #31
 80043cc:	d405      	bmi.n	80043da <_puts_r+0x22>
 80043ce:	89a3      	ldrh	r3, [r4, #12]
 80043d0:	0598      	lsls	r0, r3, #22
 80043d2:	d402      	bmi.n	80043da <_puts_r+0x22>
 80043d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043d6:	f000 f99e 	bl	8004716 <__retarget_lock_acquire_recursive>
 80043da:	89a3      	ldrh	r3, [r4, #12]
 80043dc:	0719      	lsls	r1, r3, #28
 80043de:	d502      	bpl.n	80043e6 <_puts_r+0x2e>
 80043e0:	6923      	ldr	r3, [r4, #16]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d135      	bne.n	8004452 <_puts_r+0x9a>
 80043e6:	4621      	mov	r1, r4
 80043e8:	4628      	mov	r0, r5
 80043ea:	f000 f8c5 	bl	8004578 <__swsetup_r>
 80043ee:	b380      	cbz	r0, 8004452 <_puts_r+0x9a>
 80043f0:	f04f 35ff 	mov.w	r5, #4294967295
 80043f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043f6:	07da      	lsls	r2, r3, #31
 80043f8:	d405      	bmi.n	8004406 <_puts_r+0x4e>
 80043fa:	89a3      	ldrh	r3, [r4, #12]
 80043fc:	059b      	lsls	r3, r3, #22
 80043fe:	d402      	bmi.n	8004406 <_puts_r+0x4e>
 8004400:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004402:	f000 f989 	bl	8004718 <__retarget_lock_release_recursive>
 8004406:	4628      	mov	r0, r5
 8004408:	bd70      	pop	{r4, r5, r6, pc}
 800440a:	2b00      	cmp	r3, #0
 800440c:	da04      	bge.n	8004418 <_puts_r+0x60>
 800440e:	69a2      	ldr	r2, [r4, #24]
 8004410:	429a      	cmp	r2, r3
 8004412:	dc17      	bgt.n	8004444 <_puts_r+0x8c>
 8004414:	290a      	cmp	r1, #10
 8004416:	d015      	beq.n	8004444 <_puts_r+0x8c>
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	6022      	str	r2, [r4, #0]
 800441e:	7019      	strb	r1, [r3, #0]
 8004420:	68a3      	ldr	r3, [r4, #8]
 8004422:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004426:	3b01      	subs	r3, #1
 8004428:	60a3      	str	r3, [r4, #8]
 800442a:	2900      	cmp	r1, #0
 800442c:	d1ed      	bne.n	800440a <_puts_r+0x52>
 800442e:	2b00      	cmp	r3, #0
 8004430:	da11      	bge.n	8004456 <_puts_r+0x9e>
 8004432:	4622      	mov	r2, r4
 8004434:	210a      	movs	r1, #10
 8004436:	4628      	mov	r0, r5
 8004438:	f000 f85f 	bl	80044fa <__swbuf_r>
 800443c:	3001      	adds	r0, #1
 800443e:	d0d7      	beq.n	80043f0 <_puts_r+0x38>
 8004440:	250a      	movs	r5, #10
 8004442:	e7d7      	b.n	80043f4 <_puts_r+0x3c>
 8004444:	4622      	mov	r2, r4
 8004446:	4628      	mov	r0, r5
 8004448:	f000 f857 	bl	80044fa <__swbuf_r>
 800444c:	3001      	adds	r0, #1
 800444e:	d1e7      	bne.n	8004420 <_puts_r+0x68>
 8004450:	e7ce      	b.n	80043f0 <_puts_r+0x38>
 8004452:	3e01      	subs	r6, #1
 8004454:	e7e4      	b.n	8004420 <_puts_r+0x68>
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	6022      	str	r2, [r4, #0]
 800445c:	220a      	movs	r2, #10
 800445e:	701a      	strb	r2, [r3, #0]
 8004460:	e7ee      	b.n	8004440 <_puts_r+0x88>
	...

08004464 <puts>:
 8004464:	4b02      	ldr	r3, [pc, #8]	@ (8004470 <puts+0xc>)
 8004466:	4601      	mov	r1, r0
 8004468:	6818      	ldr	r0, [r3, #0]
 800446a:	f7ff bfa5 	b.w	80043b8 <_puts_r>
 800446e:	bf00      	nop
 8004470:	20000018 	.word	0x20000018

08004474 <__sread>:
 8004474:	b510      	push	{r4, lr}
 8004476:	460c      	mov	r4, r1
 8004478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800447c:	f000 f8fc 	bl	8004678 <_read_r>
 8004480:	2800      	cmp	r0, #0
 8004482:	bfab      	itete	ge
 8004484:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004486:	89a3      	ldrhlt	r3, [r4, #12]
 8004488:	181b      	addge	r3, r3, r0
 800448a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800448e:	bfac      	ite	ge
 8004490:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004492:	81a3      	strhlt	r3, [r4, #12]
 8004494:	bd10      	pop	{r4, pc}

08004496 <__swrite>:
 8004496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800449a:	461f      	mov	r7, r3
 800449c:	898b      	ldrh	r3, [r1, #12]
 800449e:	05db      	lsls	r3, r3, #23
 80044a0:	4605      	mov	r5, r0
 80044a2:	460c      	mov	r4, r1
 80044a4:	4616      	mov	r6, r2
 80044a6:	d505      	bpl.n	80044b4 <__swrite+0x1e>
 80044a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ac:	2302      	movs	r3, #2
 80044ae:	2200      	movs	r2, #0
 80044b0:	f000 f8d0 	bl	8004654 <_lseek_r>
 80044b4:	89a3      	ldrh	r3, [r4, #12]
 80044b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044be:	81a3      	strh	r3, [r4, #12]
 80044c0:	4632      	mov	r2, r6
 80044c2:	463b      	mov	r3, r7
 80044c4:	4628      	mov	r0, r5
 80044c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044ca:	f000 b8e7 	b.w	800469c <_write_r>

080044ce <__sseek>:
 80044ce:	b510      	push	{r4, lr}
 80044d0:	460c      	mov	r4, r1
 80044d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044d6:	f000 f8bd 	bl	8004654 <_lseek_r>
 80044da:	1c43      	adds	r3, r0, #1
 80044dc:	89a3      	ldrh	r3, [r4, #12]
 80044de:	bf15      	itete	ne
 80044e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80044e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80044e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80044ea:	81a3      	strheq	r3, [r4, #12]
 80044ec:	bf18      	it	ne
 80044ee:	81a3      	strhne	r3, [r4, #12]
 80044f0:	bd10      	pop	{r4, pc}

080044f2 <__sclose>:
 80044f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044f6:	f000 b89d 	b.w	8004634 <_close_r>

080044fa <__swbuf_r>:
 80044fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fc:	460e      	mov	r6, r1
 80044fe:	4614      	mov	r4, r2
 8004500:	4605      	mov	r5, r0
 8004502:	b118      	cbz	r0, 800450c <__swbuf_r+0x12>
 8004504:	6a03      	ldr	r3, [r0, #32]
 8004506:	b90b      	cbnz	r3, 800450c <__swbuf_r+0x12>
 8004508:	f7ff ff0e 	bl	8004328 <__sinit>
 800450c:	69a3      	ldr	r3, [r4, #24]
 800450e:	60a3      	str	r3, [r4, #8]
 8004510:	89a3      	ldrh	r3, [r4, #12]
 8004512:	071a      	lsls	r2, r3, #28
 8004514:	d501      	bpl.n	800451a <__swbuf_r+0x20>
 8004516:	6923      	ldr	r3, [r4, #16]
 8004518:	b943      	cbnz	r3, 800452c <__swbuf_r+0x32>
 800451a:	4621      	mov	r1, r4
 800451c:	4628      	mov	r0, r5
 800451e:	f000 f82b 	bl	8004578 <__swsetup_r>
 8004522:	b118      	cbz	r0, 800452c <__swbuf_r+0x32>
 8004524:	f04f 37ff 	mov.w	r7, #4294967295
 8004528:	4638      	mov	r0, r7
 800452a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	6922      	ldr	r2, [r4, #16]
 8004530:	1a98      	subs	r0, r3, r2
 8004532:	6963      	ldr	r3, [r4, #20]
 8004534:	b2f6      	uxtb	r6, r6
 8004536:	4283      	cmp	r3, r0
 8004538:	4637      	mov	r7, r6
 800453a:	dc05      	bgt.n	8004548 <__swbuf_r+0x4e>
 800453c:	4621      	mov	r1, r4
 800453e:	4628      	mov	r0, r5
 8004540:	f000 fd38 	bl	8004fb4 <_fflush_r>
 8004544:	2800      	cmp	r0, #0
 8004546:	d1ed      	bne.n	8004524 <__swbuf_r+0x2a>
 8004548:	68a3      	ldr	r3, [r4, #8]
 800454a:	3b01      	subs	r3, #1
 800454c:	60a3      	str	r3, [r4, #8]
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	6022      	str	r2, [r4, #0]
 8004554:	701e      	strb	r6, [r3, #0]
 8004556:	6962      	ldr	r2, [r4, #20]
 8004558:	1c43      	adds	r3, r0, #1
 800455a:	429a      	cmp	r2, r3
 800455c:	d004      	beq.n	8004568 <__swbuf_r+0x6e>
 800455e:	89a3      	ldrh	r3, [r4, #12]
 8004560:	07db      	lsls	r3, r3, #31
 8004562:	d5e1      	bpl.n	8004528 <__swbuf_r+0x2e>
 8004564:	2e0a      	cmp	r6, #10
 8004566:	d1df      	bne.n	8004528 <__swbuf_r+0x2e>
 8004568:	4621      	mov	r1, r4
 800456a:	4628      	mov	r0, r5
 800456c:	f000 fd22 	bl	8004fb4 <_fflush_r>
 8004570:	2800      	cmp	r0, #0
 8004572:	d0d9      	beq.n	8004528 <__swbuf_r+0x2e>
 8004574:	e7d6      	b.n	8004524 <__swbuf_r+0x2a>
	...

08004578 <__swsetup_r>:
 8004578:	b538      	push	{r3, r4, r5, lr}
 800457a:	4b29      	ldr	r3, [pc, #164]	@ (8004620 <__swsetup_r+0xa8>)
 800457c:	4605      	mov	r5, r0
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	460c      	mov	r4, r1
 8004582:	b118      	cbz	r0, 800458c <__swsetup_r+0x14>
 8004584:	6a03      	ldr	r3, [r0, #32]
 8004586:	b90b      	cbnz	r3, 800458c <__swsetup_r+0x14>
 8004588:	f7ff fece 	bl	8004328 <__sinit>
 800458c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004590:	0719      	lsls	r1, r3, #28
 8004592:	d422      	bmi.n	80045da <__swsetup_r+0x62>
 8004594:	06da      	lsls	r2, r3, #27
 8004596:	d407      	bmi.n	80045a8 <__swsetup_r+0x30>
 8004598:	2209      	movs	r2, #9
 800459a:	602a      	str	r2, [r5, #0]
 800459c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045a0:	81a3      	strh	r3, [r4, #12]
 80045a2:	f04f 30ff 	mov.w	r0, #4294967295
 80045a6:	e033      	b.n	8004610 <__swsetup_r+0x98>
 80045a8:	0758      	lsls	r0, r3, #29
 80045aa:	d512      	bpl.n	80045d2 <__swsetup_r+0x5a>
 80045ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045ae:	b141      	cbz	r1, 80045c2 <__swsetup_r+0x4a>
 80045b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80045b4:	4299      	cmp	r1, r3
 80045b6:	d002      	beq.n	80045be <__swsetup_r+0x46>
 80045b8:	4628      	mov	r0, r5
 80045ba:	f000 f8af 	bl	800471c <_free_r>
 80045be:	2300      	movs	r3, #0
 80045c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80045c2:	89a3      	ldrh	r3, [r4, #12]
 80045c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80045c8:	81a3      	strh	r3, [r4, #12]
 80045ca:	2300      	movs	r3, #0
 80045cc:	6063      	str	r3, [r4, #4]
 80045ce:	6923      	ldr	r3, [r4, #16]
 80045d0:	6023      	str	r3, [r4, #0]
 80045d2:	89a3      	ldrh	r3, [r4, #12]
 80045d4:	f043 0308 	orr.w	r3, r3, #8
 80045d8:	81a3      	strh	r3, [r4, #12]
 80045da:	6923      	ldr	r3, [r4, #16]
 80045dc:	b94b      	cbnz	r3, 80045f2 <__swsetup_r+0x7a>
 80045de:	89a3      	ldrh	r3, [r4, #12]
 80045e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80045e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045e8:	d003      	beq.n	80045f2 <__swsetup_r+0x7a>
 80045ea:	4621      	mov	r1, r4
 80045ec:	4628      	mov	r0, r5
 80045ee:	f000 fd2f 	bl	8005050 <__smakebuf_r>
 80045f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045f6:	f013 0201 	ands.w	r2, r3, #1
 80045fa:	d00a      	beq.n	8004612 <__swsetup_r+0x9a>
 80045fc:	2200      	movs	r2, #0
 80045fe:	60a2      	str	r2, [r4, #8]
 8004600:	6962      	ldr	r2, [r4, #20]
 8004602:	4252      	negs	r2, r2
 8004604:	61a2      	str	r2, [r4, #24]
 8004606:	6922      	ldr	r2, [r4, #16]
 8004608:	b942      	cbnz	r2, 800461c <__swsetup_r+0xa4>
 800460a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800460e:	d1c5      	bne.n	800459c <__swsetup_r+0x24>
 8004610:	bd38      	pop	{r3, r4, r5, pc}
 8004612:	0799      	lsls	r1, r3, #30
 8004614:	bf58      	it	pl
 8004616:	6962      	ldrpl	r2, [r4, #20]
 8004618:	60a2      	str	r2, [r4, #8]
 800461a:	e7f4      	b.n	8004606 <__swsetup_r+0x8e>
 800461c:	2000      	movs	r0, #0
 800461e:	e7f7      	b.n	8004610 <__swsetup_r+0x98>
 8004620:	20000018 	.word	0x20000018

08004624 <memset>:
 8004624:	4402      	add	r2, r0
 8004626:	4603      	mov	r3, r0
 8004628:	4293      	cmp	r3, r2
 800462a:	d100      	bne.n	800462e <memset+0xa>
 800462c:	4770      	bx	lr
 800462e:	f803 1b01 	strb.w	r1, [r3], #1
 8004632:	e7f9      	b.n	8004628 <memset+0x4>

08004634 <_close_r>:
 8004634:	b538      	push	{r3, r4, r5, lr}
 8004636:	4d06      	ldr	r5, [pc, #24]	@ (8004650 <_close_r+0x1c>)
 8004638:	2300      	movs	r3, #0
 800463a:	4604      	mov	r4, r0
 800463c:	4608      	mov	r0, r1
 800463e:	602b      	str	r3, [r5, #0]
 8004640:	f7fc fb99 	bl	8000d76 <_close>
 8004644:	1c43      	adds	r3, r0, #1
 8004646:	d102      	bne.n	800464e <_close_r+0x1a>
 8004648:	682b      	ldr	r3, [r5, #0]
 800464a:	b103      	cbz	r3, 800464e <_close_r+0x1a>
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	bd38      	pop	{r3, r4, r5, pc}
 8004650:	200003ec 	.word	0x200003ec

08004654 <_lseek_r>:
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	4d07      	ldr	r5, [pc, #28]	@ (8004674 <_lseek_r+0x20>)
 8004658:	4604      	mov	r4, r0
 800465a:	4608      	mov	r0, r1
 800465c:	4611      	mov	r1, r2
 800465e:	2200      	movs	r2, #0
 8004660:	602a      	str	r2, [r5, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	f7fc fbae 	bl	8000dc4 <_lseek>
 8004668:	1c43      	adds	r3, r0, #1
 800466a:	d102      	bne.n	8004672 <_lseek_r+0x1e>
 800466c:	682b      	ldr	r3, [r5, #0]
 800466e:	b103      	cbz	r3, 8004672 <_lseek_r+0x1e>
 8004670:	6023      	str	r3, [r4, #0]
 8004672:	bd38      	pop	{r3, r4, r5, pc}
 8004674:	200003ec 	.word	0x200003ec

08004678 <_read_r>:
 8004678:	b538      	push	{r3, r4, r5, lr}
 800467a:	4d07      	ldr	r5, [pc, #28]	@ (8004698 <_read_r+0x20>)
 800467c:	4604      	mov	r4, r0
 800467e:	4608      	mov	r0, r1
 8004680:	4611      	mov	r1, r2
 8004682:	2200      	movs	r2, #0
 8004684:	602a      	str	r2, [r5, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	f7fc fb3c 	bl	8000d04 <_read>
 800468c:	1c43      	adds	r3, r0, #1
 800468e:	d102      	bne.n	8004696 <_read_r+0x1e>
 8004690:	682b      	ldr	r3, [r5, #0]
 8004692:	b103      	cbz	r3, 8004696 <_read_r+0x1e>
 8004694:	6023      	str	r3, [r4, #0]
 8004696:	bd38      	pop	{r3, r4, r5, pc}
 8004698:	200003ec 	.word	0x200003ec

0800469c <_write_r>:
 800469c:	b538      	push	{r3, r4, r5, lr}
 800469e:	4d07      	ldr	r5, [pc, #28]	@ (80046bc <_write_r+0x20>)
 80046a0:	4604      	mov	r4, r0
 80046a2:	4608      	mov	r0, r1
 80046a4:	4611      	mov	r1, r2
 80046a6:	2200      	movs	r2, #0
 80046a8:	602a      	str	r2, [r5, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	f7fc fb47 	bl	8000d3e <_write>
 80046b0:	1c43      	adds	r3, r0, #1
 80046b2:	d102      	bne.n	80046ba <_write_r+0x1e>
 80046b4:	682b      	ldr	r3, [r5, #0]
 80046b6:	b103      	cbz	r3, 80046ba <_write_r+0x1e>
 80046b8:	6023      	str	r3, [r4, #0]
 80046ba:	bd38      	pop	{r3, r4, r5, pc}
 80046bc:	200003ec 	.word	0x200003ec

080046c0 <__errno>:
 80046c0:	4b01      	ldr	r3, [pc, #4]	@ (80046c8 <__errno+0x8>)
 80046c2:	6818      	ldr	r0, [r3, #0]
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	20000018 	.word	0x20000018

080046cc <__libc_init_array>:
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	4d0d      	ldr	r5, [pc, #52]	@ (8004704 <__libc_init_array+0x38>)
 80046d0:	4c0d      	ldr	r4, [pc, #52]	@ (8004708 <__libc_init_array+0x3c>)
 80046d2:	1b64      	subs	r4, r4, r5
 80046d4:	10a4      	asrs	r4, r4, #2
 80046d6:	2600      	movs	r6, #0
 80046d8:	42a6      	cmp	r6, r4
 80046da:	d109      	bne.n	80046f0 <__libc_init_array+0x24>
 80046dc:	4d0b      	ldr	r5, [pc, #44]	@ (800470c <__libc_init_array+0x40>)
 80046de:	4c0c      	ldr	r4, [pc, #48]	@ (8004710 <__libc_init_array+0x44>)
 80046e0:	f000 fd24 	bl	800512c <_init>
 80046e4:	1b64      	subs	r4, r4, r5
 80046e6:	10a4      	asrs	r4, r4, #2
 80046e8:	2600      	movs	r6, #0
 80046ea:	42a6      	cmp	r6, r4
 80046ec:	d105      	bne.n	80046fa <__libc_init_array+0x2e>
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
 80046f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f4:	4798      	blx	r3
 80046f6:	3601      	adds	r6, #1
 80046f8:	e7ee      	b.n	80046d8 <__libc_init_array+0xc>
 80046fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80046fe:	4798      	blx	r3
 8004700:	3601      	adds	r6, #1
 8004702:	e7f2      	b.n	80046ea <__libc_init_array+0x1e>
 8004704:	080051ec 	.word	0x080051ec
 8004708:	080051ec 	.word	0x080051ec
 800470c:	080051ec 	.word	0x080051ec
 8004710:	080051f0 	.word	0x080051f0

08004714 <__retarget_lock_init_recursive>:
 8004714:	4770      	bx	lr

08004716 <__retarget_lock_acquire_recursive>:
 8004716:	4770      	bx	lr

08004718 <__retarget_lock_release_recursive>:
 8004718:	4770      	bx	lr
	...

0800471c <_free_r>:
 800471c:	b538      	push	{r3, r4, r5, lr}
 800471e:	4605      	mov	r5, r0
 8004720:	2900      	cmp	r1, #0
 8004722:	d041      	beq.n	80047a8 <_free_r+0x8c>
 8004724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004728:	1f0c      	subs	r4, r1, #4
 800472a:	2b00      	cmp	r3, #0
 800472c:	bfb8      	it	lt
 800472e:	18e4      	addlt	r4, r4, r3
 8004730:	f000 f8e0 	bl	80048f4 <__malloc_lock>
 8004734:	4a1d      	ldr	r2, [pc, #116]	@ (80047ac <_free_r+0x90>)
 8004736:	6813      	ldr	r3, [r2, #0]
 8004738:	b933      	cbnz	r3, 8004748 <_free_r+0x2c>
 800473a:	6063      	str	r3, [r4, #4]
 800473c:	6014      	str	r4, [r2, #0]
 800473e:	4628      	mov	r0, r5
 8004740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004744:	f000 b8dc 	b.w	8004900 <__malloc_unlock>
 8004748:	42a3      	cmp	r3, r4
 800474a:	d908      	bls.n	800475e <_free_r+0x42>
 800474c:	6820      	ldr	r0, [r4, #0]
 800474e:	1821      	adds	r1, r4, r0
 8004750:	428b      	cmp	r3, r1
 8004752:	bf01      	itttt	eq
 8004754:	6819      	ldreq	r1, [r3, #0]
 8004756:	685b      	ldreq	r3, [r3, #4]
 8004758:	1809      	addeq	r1, r1, r0
 800475a:	6021      	streq	r1, [r4, #0]
 800475c:	e7ed      	b.n	800473a <_free_r+0x1e>
 800475e:	461a      	mov	r2, r3
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	b10b      	cbz	r3, 8004768 <_free_r+0x4c>
 8004764:	42a3      	cmp	r3, r4
 8004766:	d9fa      	bls.n	800475e <_free_r+0x42>
 8004768:	6811      	ldr	r1, [r2, #0]
 800476a:	1850      	adds	r0, r2, r1
 800476c:	42a0      	cmp	r0, r4
 800476e:	d10b      	bne.n	8004788 <_free_r+0x6c>
 8004770:	6820      	ldr	r0, [r4, #0]
 8004772:	4401      	add	r1, r0
 8004774:	1850      	adds	r0, r2, r1
 8004776:	4283      	cmp	r3, r0
 8004778:	6011      	str	r1, [r2, #0]
 800477a:	d1e0      	bne.n	800473e <_free_r+0x22>
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	6053      	str	r3, [r2, #4]
 8004782:	4408      	add	r0, r1
 8004784:	6010      	str	r0, [r2, #0]
 8004786:	e7da      	b.n	800473e <_free_r+0x22>
 8004788:	d902      	bls.n	8004790 <_free_r+0x74>
 800478a:	230c      	movs	r3, #12
 800478c:	602b      	str	r3, [r5, #0]
 800478e:	e7d6      	b.n	800473e <_free_r+0x22>
 8004790:	6820      	ldr	r0, [r4, #0]
 8004792:	1821      	adds	r1, r4, r0
 8004794:	428b      	cmp	r3, r1
 8004796:	bf04      	itt	eq
 8004798:	6819      	ldreq	r1, [r3, #0]
 800479a:	685b      	ldreq	r3, [r3, #4]
 800479c:	6063      	str	r3, [r4, #4]
 800479e:	bf04      	itt	eq
 80047a0:	1809      	addeq	r1, r1, r0
 80047a2:	6021      	streq	r1, [r4, #0]
 80047a4:	6054      	str	r4, [r2, #4]
 80047a6:	e7ca      	b.n	800473e <_free_r+0x22>
 80047a8:	bd38      	pop	{r3, r4, r5, pc}
 80047aa:	bf00      	nop
 80047ac:	200003f8 	.word	0x200003f8

080047b0 <sbrk_aligned>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	4e0f      	ldr	r6, [pc, #60]	@ (80047f0 <sbrk_aligned+0x40>)
 80047b4:	460c      	mov	r4, r1
 80047b6:	6831      	ldr	r1, [r6, #0]
 80047b8:	4605      	mov	r5, r0
 80047ba:	b911      	cbnz	r1, 80047c2 <sbrk_aligned+0x12>
 80047bc:	f000 fca6 	bl	800510c <_sbrk_r>
 80047c0:	6030      	str	r0, [r6, #0]
 80047c2:	4621      	mov	r1, r4
 80047c4:	4628      	mov	r0, r5
 80047c6:	f000 fca1 	bl	800510c <_sbrk_r>
 80047ca:	1c43      	adds	r3, r0, #1
 80047cc:	d103      	bne.n	80047d6 <sbrk_aligned+0x26>
 80047ce:	f04f 34ff 	mov.w	r4, #4294967295
 80047d2:	4620      	mov	r0, r4
 80047d4:	bd70      	pop	{r4, r5, r6, pc}
 80047d6:	1cc4      	adds	r4, r0, #3
 80047d8:	f024 0403 	bic.w	r4, r4, #3
 80047dc:	42a0      	cmp	r0, r4
 80047de:	d0f8      	beq.n	80047d2 <sbrk_aligned+0x22>
 80047e0:	1a21      	subs	r1, r4, r0
 80047e2:	4628      	mov	r0, r5
 80047e4:	f000 fc92 	bl	800510c <_sbrk_r>
 80047e8:	3001      	adds	r0, #1
 80047ea:	d1f2      	bne.n	80047d2 <sbrk_aligned+0x22>
 80047ec:	e7ef      	b.n	80047ce <sbrk_aligned+0x1e>
 80047ee:	bf00      	nop
 80047f0:	200003f4 	.word	0x200003f4

080047f4 <_malloc_r>:
 80047f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047f8:	1ccd      	adds	r5, r1, #3
 80047fa:	f025 0503 	bic.w	r5, r5, #3
 80047fe:	3508      	adds	r5, #8
 8004800:	2d0c      	cmp	r5, #12
 8004802:	bf38      	it	cc
 8004804:	250c      	movcc	r5, #12
 8004806:	2d00      	cmp	r5, #0
 8004808:	4606      	mov	r6, r0
 800480a:	db01      	blt.n	8004810 <_malloc_r+0x1c>
 800480c:	42a9      	cmp	r1, r5
 800480e:	d904      	bls.n	800481a <_malloc_r+0x26>
 8004810:	230c      	movs	r3, #12
 8004812:	6033      	str	r3, [r6, #0]
 8004814:	2000      	movs	r0, #0
 8004816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800481a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048f0 <_malloc_r+0xfc>
 800481e:	f000 f869 	bl	80048f4 <__malloc_lock>
 8004822:	f8d8 3000 	ldr.w	r3, [r8]
 8004826:	461c      	mov	r4, r3
 8004828:	bb44      	cbnz	r4, 800487c <_malloc_r+0x88>
 800482a:	4629      	mov	r1, r5
 800482c:	4630      	mov	r0, r6
 800482e:	f7ff ffbf 	bl	80047b0 <sbrk_aligned>
 8004832:	1c43      	adds	r3, r0, #1
 8004834:	4604      	mov	r4, r0
 8004836:	d158      	bne.n	80048ea <_malloc_r+0xf6>
 8004838:	f8d8 4000 	ldr.w	r4, [r8]
 800483c:	4627      	mov	r7, r4
 800483e:	2f00      	cmp	r7, #0
 8004840:	d143      	bne.n	80048ca <_malloc_r+0xd6>
 8004842:	2c00      	cmp	r4, #0
 8004844:	d04b      	beq.n	80048de <_malloc_r+0xea>
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	4639      	mov	r1, r7
 800484a:	4630      	mov	r0, r6
 800484c:	eb04 0903 	add.w	r9, r4, r3
 8004850:	f000 fc5c 	bl	800510c <_sbrk_r>
 8004854:	4581      	cmp	r9, r0
 8004856:	d142      	bne.n	80048de <_malloc_r+0xea>
 8004858:	6821      	ldr	r1, [r4, #0]
 800485a:	1a6d      	subs	r5, r5, r1
 800485c:	4629      	mov	r1, r5
 800485e:	4630      	mov	r0, r6
 8004860:	f7ff ffa6 	bl	80047b0 <sbrk_aligned>
 8004864:	3001      	adds	r0, #1
 8004866:	d03a      	beq.n	80048de <_malloc_r+0xea>
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	442b      	add	r3, r5
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	f8d8 3000 	ldr.w	r3, [r8]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	bb62      	cbnz	r2, 80048d0 <_malloc_r+0xdc>
 8004876:	f8c8 7000 	str.w	r7, [r8]
 800487a:	e00f      	b.n	800489c <_malloc_r+0xa8>
 800487c:	6822      	ldr	r2, [r4, #0]
 800487e:	1b52      	subs	r2, r2, r5
 8004880:	d420      	bmi.n	80048c4 <_malloc_r+0xd0>
 8004882:	2a0b      	cmp	r2, #11
 8004884:	d917      	bls.n	80048b6 <_malloc_r+0xc2>
 8004886:	1961      	adds	r1, r4, r5
 8004888:	42a3      	cmp	r3, r4
 800488a:	6025      	str	r5, [r4, #0]
 800488c:	bf18      	it	ne
 800488e:	6059      	strne	r1, [r3, #4]
 8004890:	6863      	ldr	r3, [r4, #4]
 8004892:	bf08      	it	eq
 8004894:	f8c8 1000 	streq.w	r1, [r8]
 8004898:	5162      	str	r2, [r4, r5]
 800489a:	604b      	str	r3, [r1, #4]
 800489c:	4630      	mov	r0, r6
 800489e:	f000 f82f 	bl	8004900 <__malloc_unlock>
 80048a2:	f104 000b 	add.w	r0, r4, #11
 80048a6:	1d23      	adds	r3, r4, #4
 80048a8:	f020 0007 	bic.w	r0, r0, #7
 80048ac:	1ac2      	subs	r2, r0, r3
 80048ae:	bf1c      	itt	ne
 80048b0:	1a1b      	subne	r3, r3, r0
 80048b2:	50a3      	strne	r3, [r4, r2]
 80048b4:	e7af      	b.n	8004816 <_malloc_r+0x22>
 80048b6:	6862      	ldr	r2, [r4, #4]
 80048b8:	42a3      	cmp	r3, r4
 80048ba:	bf0c      	ite	eq
 80048bc:	f8c8 2000 	streq.w	r2, [r8]
 80048c0:	605a      	strne	r2, [r3, #4]
 80048c2:	e7eb      	b.n	800489c <_malloc_r+0xa8>
 80048c4:	4623      	mov	r3, r4
 80048c6:	6864      	ldr	r4, [r4, #4]
 80048c8:	e7ae      	b.n	8004828 <_malloc_r+0x34>
 80048ca:	463c      	mov	r4, r7
 80048cc:	687f      	ldr	r7, [r7, #4]
 80048ce:	e7b6      	b.n	800483e <_malloc_r+0x4a>
 80048d0:	461a      	mov	r2, r3
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	42a3      	cmp	r3, r4
 80048d6:	d1fb      	bne.n	80048d0 <_malloc_r+0xdc>
 80048d8:	2300      	movs	r3, #0
 80048da:	6053      	str	r3, [r2, #4]
 80048dc:	e7de      	b.n	800489c <_malloc_r+0xa8>
 80048de:	230c      	movs	r3, #12
 80048e0:	6033      	str	r3, [r6, #0]
 80048e2:	4630      	mov	r0, r6
 80048e4:	f000 f80c 	bl	8004900 <__malloc_unlock>
 80048e8:	e794      	b.n	8004814 <_malloc_r+0x20>
 80048ea:	6005      	str	r5, [r0, #0]
 80048ec:	e7d6      	b.n	800489c <_malloc_r+0xa8>
 80048ee:	bf00      	nop
 80048f0:	200003f8 	.word	0x200003f8

080048f4 <__malloc_lock>:
 80048f4:	4801      	ldr	r0, [pc, #4]	@ (80048fc <__malloc_lock+0x8>)
 80048f6:	f7ff bf0e 	b.w	8004716 <__retarget_lock_acquire_recursive>
 80048fa:	bf00      	nop
 80048fc:	200003f0 	.word	0x200003f0

08004900 <__malloc_unlock>:
 8004900:	4801      	ldr	r0, [pc, #4]	@ (8004908 <__malloc_unlock+0x8>)
 8004902:	f7ff bf09 	b.w	8004718 <__retarget_lock_release_recursive>
 8004906:	bf00      	nop
 8004908:	200003f0 	.word	0x200003f0

0800490c <__sfputc_r>:
 800490c:	6893      	ldr	r3, [r2, #8]
 800490e:	3b01      	subs	r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	b410      	push	{r4}
 8004914:	6093      	str	r3, [r2, #8]
 8004916:	da08      	bge.n	800492a <__sfputc_r+0x1e>
 8004918:	6994      	ldr	r4, [r2, #24]
 800491a:	42a3      	cmp	r3, r4
 800491c:	db01      	blt.n	8004922 <__sfputc_r+0x16>
 800491e:	290a      	cmp	r1, #10
 8004920:	d103      	bne.n	800492a <__sfputc_r+0x1e>
 8004922:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004926:	f7ff bde8 	b.w	80044fa <__swbuf_r>
 800492a:	6813      	ldr	r3, [r2, #0]
 800492c:	1c58      	adds	r0, r3, #1
 800492e:	6010      	str	r0, [r2, #0]
 8004930:	7019      	strb	r1, [r3, #0]
 8004932:	4608      	mov	r0, r1
 8004934:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004938:	4770      	bx	lr

0800493a <__sfputs_r>:
 800493a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493c:	4606      	mov	r6, r0
 800493e:	460f      	mov	r7, r1
 8004940:	4614      	mov	r4, r2
 8004942:	18d5      	adds	r5, r2, r3
 8004944:	42ac      	cmp	r4, r5
 8004946:	d101      	bne.n	800494c <__sfputs_r+0x12>
 8004948:	2000      	movs	r0, #0
 800494a:	e007      	b.n	800495c <__sfputs_r+0x22>
 800494c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004950:	463a      	mov	r2, r7
 8004952:	4630      	mov	r0, r6
 8004954:	f7ff ffda 	bl	800490c <__sfputc_r>
 8004958:	1c43      	adds	r3, r0, #1
 800495a:	d1f3      	bne.n	8004944 <__sfputs_r+0xa>
 800495c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004960 <_vfiprintf_r>:
 8004960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004964:	460d      	mov	r5, r1
 8004966:	b09d      	sub	sp, #116	@ 0x74
 8004968:	4614      	mov	r4, r2
 800496a:	4698      	mov	r8, r3
 800496c:	4606      	mov	r6, r0
 800496e:	b118      	cbz	r0, 8004978 <_vfiprintf_r+0x18>
 8004970:	6a03      	ldr	r3, [r0, #32]
 8004972:	b90b      	cbnz	r3, 8004978 <_vfiprintf_r+0x18>
 8004974:	f7ff fcd8 	bl	8004328 <__sinit>
 8004978:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800497a:	07d9      	lsls	r1, r3, #31
 800497c:	d405      	bmi.n	800498a <_vfiprintf_r+0x2a>
 800497e:	89ab      	ldrh	r3, [r5, #12]
 8004980:	059a      	lsls	r2, r3, #22
 8004982:	d402      	bmi.n	800498a <_vfiprintf_r+0x2a>
 8004984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004986:	f7ff fec6 	bl	8004716 <__retarget_lock_acquire_recursive>
 800498a:	89ab      	ldrh	r3, [r5, #12]
 800498c:	071b      	lsls	r3, r3, #28
 800498e:	d501      	bpl.n	8004994 <_vfiprintf_r+0x34>
 8004990:	692b      	ldr	r3, [r5, #16]
 8004992:	b99b      	cbnz	r3, 80049bc <_vfiprintf_r+0x5c>
 8004994:	4629      	mov	r1, r5
 8004996:	4630      	mov	r0, r6
 8004998:	f7ff fdee 	bl	8004578 <__swsetup_r>
 800499c:	b170      	cbz	r0, 80049bc <_vfiprintf_r+0x5c>
 800499e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80049a0:	07dc      	lsls	r4, r3, #31
 80049a2:	d504      	bpl.n	80049ae <_vfiprintf_r+0x4e>
 80049a4:	f04f 30ff 	mov.w	r0, #4294967295
 80049a8:	b01d      	add	sp, #116	@ 0x74
 80049aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ae:	89ab      	ldrh	r3, [r5, #12]
 80049b0:	0598      	lsls	r0, r3, #22
 80049b2:	d4f7      	bmi.n	80049a4 <_vfiprintf_r+0x44>
 80049b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80049b6:	f7ff feaf 	bl	8004718 <__retarget_lock_release_recursive>
 80049ba:	e7f3      	b.n	80049a4 <_vfiprintf_r+0x44>
 80049bc:	2300      	movs	r3, #0
 80049be:	9309      	str	r3, [sp, #36]	@ 0x24
 80049c0:	2320      	movs	r3, #32
 80049c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80049c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80049ca:	2330      	movs	r3, #48	@ 0x30
 80049cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004b7c <_vfiprintf_r+0x21c>
 80049d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049d4:	f04f 0901 	mov.w	r9, #1
 80049d8:	4623      	mov	r3, r4
 80049da:	469a      	mov	sl, r3
 80049dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049e0:	b10a      	cbz	r2, 80049e6 <_vfiprintf_r+0x86>
 80049e2:	2a25      	cmp	r2, #37	@ 0x25
 80049e4:	d1f9      	bne.n	80049da <_vfiprintf_r+0x7a>
 80049e6:	ebba 0b04 	subs.w	fp, sl, r4
 80049ea:	d00b      	beq.n	8004a04 <_vfiprintf_r+0xa4>
 80049ec:	465b      	mov	r3, fp
 80049ee:	4622      	mov	r2, r4
 80049f0:	4629      	mov	r1, r5
 80049f2:	4630      	mov	r0, r6
 80049f4:	f7ff ffa1 	bl	800493a <__sfputs_r>
 80049f8:	3001      	adds	r0, #1
 80049fa:	f000 80a7 	beq.w	8004b4c <_vfiprintf_r+0x1ec>
 80049fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a00:	445a      	add	r2, fp
 8004a02:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a04:	f89a 3000 	ldrb.w	r3, [sl]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 809f 	beq.w	8004b4c <_vfiprintf_r+0x1ec>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f04f 32ff 	mov.w	r2, #4294967295
 8004a14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a18:	f10a 0a01 	add.w	sl, sl, #1
 8004a1c:	9304      	str	r3, [sp, #16]
 8004a1e:	9307      	str	r3, [sp, #28]
 8004a20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a24:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a26:	4654      	mov	r4, sl
 8004a28:	2205      	movs	r2, #5
 8004a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a2e:	4853      	ldr	r0, [pc, #332]	@ (8004b7c <_vfiprintf_r+0x21c>)
 8004a30:	f7fb fbde 	bl	80001f0 <memchr>
 8004a34:	9a04      	ldr	r2, [sp, #16]
 8004a36:	b9d8      	cbnz	r0, 8004a70 <_vfiprintf_r+0x110>
 8004a38:	06d1      	lsls	r1, r2, #27
 8004a3a:	bf44      	itt	mi
 8004a3c:	2320      	movmi	r3, #32
 8004a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a42:	0713      	lsls	r3, r2, #28
 8004a44:	bf44      	itt	mi
 8004a46:	232b      	movmi	r3, #43	@ 0x2b
 8004a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a4c:	f89a 3000 	ldrb.w	r3, [sl]
 8004a50:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a52:	d015      	beq.n	8004a80 <_vfiprintf_r+0x120>
 8004a54:	9a07      	ldr	r2, [sp, #28]
 8004a56:	4654      	mov	r4, sl
 8004a58:	2000      	movs	r0, #0
 8004a5a:	f04f 0c0a 	mov.w	ip, #10
 8004a5e:	4621      	mov	r1, r4
 8004a60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a64:	3b30      	subs	r3, #48	@ 0x30
 8004a66:	2b09      	cmp	r3, #9
 8004a68:	d94b      	bls.n	8004b02 <_vfiprintf_r+0x1a2>
 8004a6a:	b1b0      	cbz	r0, 8004a9a <_vfiprintf_r+0x13a>
 8004a6c:	9207      	str	r2, [sp, #28]
 8004a6e:	e014      	b.n	8004a9a <_vfiprintf_r+0x13a>
 8004a70:	eba0 0308 	sub.w	r3, r0, r8
 8004a74:	fa09 f303 	lsl.w	r3, r9, r3
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	9304      	str	r3, [sp, #16]
 8004a7c:	46a2      	mov	sl, r4
 8004a7e:	e7d2      	b.n	8004a26 <_vfiprintf_r+0xc6>
 8004a80:	9b03      	ldr	r3, [sp, #12]
 8004a82:	1d19      	adds	r1, r3, #4
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	9103      	str	r1, [sp, #12]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	bfbb      	ittet	lt
 8004a8c:	425b      	neglt	r3, r3
 8004a8e:	f042 0202 	orrlt.w	r2, r2, #2
 8004a92:	9307      	strge	r3, [sp, #28]
 8004a94:	9307      	strlt	r3, [sp, #28]
 8004a96:	bfb8      	it	lt
 8004a98:	9204      	strlt	r2, [sp, #16]
 8004a9a:	7823      	ldrb	r3, [r4, #0]
 8004a9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a9e:	d10a      	bne.n	8004ab6 <_vfiprintf_r+0x156>
 8004aa0:	7863      	ldrb	r3, [r4, #1]
 8004aa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004aa4:	d132      	bne.n	8004b0c <_vfiprintf_r+0x1ac>
 8004aa6:	9b03      	ldr	r3, [sp, #12]
 8004aa8:	1d1a      	adds	r2, r3, #4
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	9203      	str	r2, [sp, #12]
 8004aae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ab2:	3402      	adds	r4, #2
 8004ab4:	9305      	str	r3, [sp, #20]
 8004ab6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004b8c <_vfiprintf_r+0x22c>
 8004aba:	7821      	ldrb	r1, [r4, #0]
 8004abc:	2203      	movs	r2, #3
 8004abe:	4650      	mov	r0, sl
 8004ac0:	f7fb fb96 	bl	80001f0 <memchr>
 8004ac4:	b138      	cbz	r0, 8004ad6 <_vfiprintf_r+0x176>
 8004ac6:	9b04      	ldr	r3, [sp, #16]
 8004ac8:	eba0 000a 	sub.w	r0, r0, sl
 8004acc:	2240      	movs	r2, #64	@ 0x40
 8004ace:	4082      	lsls	r2, r0
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	3401      	adds	r4, #1
 8004ad4:	9304      	str	r3, [sp, #16]
 8004ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ada:	4829      	ldr	r0, [pc, #164]	@ (8004b80 <_vfiprintf_r+0x220>)
 8004adc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ae0:	2206      	movs	r2, #6
 8004ae2:	f7fb fb85 	bl	80001f0 <memchr>
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	d03f      	beq.n	8004b6a <_vfiprintf_r+0x20a>
 8004aea:	4b26      	ldr	r3, [pc, #152]	@ (8004b84 <_vfiprintf_r+0x224>)
 8004aec:	bb1b      	cbnz	r3, 8004b36 <_vfiprintf_r+0x1d6>
 8004aee:	9b03      	ldr	r3, [sp, #12]
 8004af0:	3307      	adds	r3, #7
 8004af2:	f023 0307 	bic.w	r3, r3, #7
 8004af6:	3308      	adds	r3, #8
 8004af8:	9303      	str	r3, [sp, #12]
 8004afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004afc:	443b      	add	r3, r7
 8004afe:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b00:	e76a      	b.n	80049d8 <_vfiprintf_r+0x78>
 8004b02:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b06:	460c      	mov	r4, r1
 8004b08:	2001      	movs	r0, #1
 8004b0a:	e7a8      	b.n	8004a5e <_vfiprintf_r+0xfe>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	3401      	adds	r4, #1
 8004b10:	9305      	str	r3, [sp, #20]
 8004b12:	4619      	mov	r1, r3
 8004b14:	f04f 0c0a 	mov.w	ip, #10
 8004b18:	4620      	mov	r0, r4
 8004b1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b1e:	3a30      	subs	r2, #48	@ 0x30
 8004b20:	2a09      	cmp	r2, #9
 8004b22:	d903      	bls.n	8004b2c <_vfiprintf_r+0x1cc>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0c6      	beq.n	8004ab6 <_vfiprintf_r+0x156>
 8004b28:	9105      	str	r1, [sp, #20]
 8004b2a:	e7c4      	b.n	8004ab6 <_vfiprintf_r+0x156>
 8004b2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b30:	4604      	mov	r4, r0
 8004b32:	2301      	movs	r3, #1
 8004b34:	e7f0      	b.n	8004b18 <_vfiprintf_r+0x1b8>
 8004b36:	ab03      	add	r3, sp, #12
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	462a      	mov	r2, r5
 8004b3c:	4b12      	ldr	r3, [pc, #72]	@ (8004b88 <_vfiprintf_r+0x228>)
 8004b3e:	a904      	add	r1, sp, #16
 8004b40:	4630      	mov	r0, r6
 8004b42:	f3af 8000 	nop.w
 8004b46:	4607      	mov	r7, r0
 8004b48:	1c78      	adds	r0, r7, #1
 8004b4a:	d1d6      	bne.n	8004afa <_vfiprintf_r+0x19a>
 8004b4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b4e:	07d9      	lsls	r1, r3, #31
 8004b50:	d405      	bmi.n	8004b5e <_vfiprintf_r+0x1fe>
 8004b52:	89ab      	ldrh	r3, [r5, #12]
 8004b54:	059a      	lsls	r2, r3, #22
 8004b56:	d402      	bmi.n	8004b5e <_vfiprintf_r+0x1fe>
 8004b58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b5a:	f7ff fddd 	bl	8004718 <__retarget_lock_release_recursive>
 8004b5e:	89ab      	ldrh	r3, [r5, #12]
 8004b60:	065b      	lsls	r3, r3, #25
 8004b62:	f53f af1f 	bmi.w	80049a4 <_vfiprintf_r+0x44>
 8004b66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b68:	e71e      	b.n	80049a8 <_vfiprintf_r+0x48>
 8004b6a:	ab03      	add	r3, sp, #12
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	462a      	mov	r2, r5
 8004b70:	4b05      	ldr	r3, [pc, #20]	@ (8004b88 <_vfiprintf_r+0x228>)
 8004b72:	a904      	add	r1, sp, #16
 8004b74:	4630      	mov	r0, r6
 8004b76:	f000 f879 	bl	8004c6c <_printf_i>
 8004b7a:	e7e4      	b.n	8004b46 <_vfiprintf_r+0x1e6>
 8004b7c:	080051b1 	.word	0x080051b1
 8004b80:	080051bb 	.word	0x080051bb
 8004b84:	00000000 	.word	0x00000000
 8004b88:	0800493b 	.word	0x0800493b
 8004b8c:	080051b7 	.word	0x080051b7

08004b90 <_printf_common>:
 8004b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b94:	4616      	mov	r6, r2
 8004b96:	4698      	mov	r8, r3
 8004b98:	688a      	ldr	r2, [r1, #8]
 8004b9a:	690b      	ldr	r3, [r1, #16]
 8004b9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	bfb8      	it	lt
 8004ba4:	4613      	movlt	r3, r2
 8004ba6:	6033      	str	r3, [r6, #0]
 8004ba8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004bac:	4607      	mov	r7, r0
 8004bae:	460c      	mov	r4, r1
 8004bb0:	b10a      	cbz	r2, 8004bb6 <_printf_common+0x26>
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	6033      	str	r3, [r6, #0]
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	0699      	lsls	r1, r3, #26
 8004bba:	bf42      	ittt	mi
 8004bbc:	6833      	ldrmi	r3, [r6, #0]
 8004bbe:	3302      	addmi	r3, #2
 8004bc0:	6033      	strmi	r3, [r6, #0]
 8004bc2:	6825      	ldr	r5, [r4, #0]
 8004bc4:	f015 0506 	ands.w	r5, r5, #6
 8004bc8:	d106      	bne.n	8004bd8 <_printf_common+0x48>
 8004bca:	f104 0a19 	add.w	sl, r4, #25
 8004bce:	68e3      	ldr	r3, [r4, #12]
 8004bd0:	6832      	ldr	r2, [r6, #0]
 8004bd2:	1a9b      	subs	r3, r3, r2
 8004bd4:	42ab      	cmp	r3, r5
 8004bd6:	dc26      	bgt.n	8004c26 <_printf_common+0x96>
 8004bd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004bdc:	6822      	ldr	r2, [r4, #0]
 8004bde:	3b00      	subs	r3, #0
 8004be0:	bf18      	it	ne
 8004be2:	2301      	movne	r3, #1
 8004be4:	0692      	lsls	r2, r2, #26
 8004be6:	d42b      	bmi.n	8004c40 <_printf_common+0xb0>
 8004be8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004bec:	4641      	mov	r1, r8
 8004bee:	4638      	mov	r0, r7
 8004bf0:	47c8      	blx	r9
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	d01e      	beq.n	8004c34 <_printf_common+0xa4>
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	6922      	ldr	r2, [r4, #16]
 8004bfa:	f003 0306 	and.w	r3, r3, #6
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	bf02      	ittt	eq
 8004c02:	68e5      	ldreq	r5, [r4, #12]
 8004c04:	6833      	ldreq	r3, [r6, #0]
 8004c06:	1aed      	subeq	r5, r5, r3
 8004c08:	68a3      	ldr	r3, [r4, #8]
 8004c0a:	bf0c      	ite	eq
 8004c0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c10:	2500      	movne	r5, #0
 8004c12:	4293      	cmp	r3, r2
 8004c14:	bfc4      	itt	gt
 8004c16:	1a9b      	subgt	r3, r3, r2
 8004c18:	18ed      	addgt	r5, r5, r3
 8004c1a:	2600      	movs	r6, #0
 8004c1c:	341a      	adds	r4, #26
 8004c1e:	42b5      	cmp	r5, r6
 8004c20:	d11a      	bne.n	8004c58 <_printf_common+0xc8>
 8004c22:	2000      	movs	r0, #0
 8004c24:	e008      	b.n	8004c38 <_printf_common+0xa8>
 8004c26:	2301      	movs	r3, #1
 8004c28:	4652      	mov	r2, sl
 8004c2a:	4641      	mov	r1, r8
 8004c2c:	4638      	mov	r0, r7
 8004c2e:	47c8      	blx	r9
 8004c30:	3001      	adds	r0, #1
 8004c32:	d103      	bne.n	8004c3c <_printf_common+0xac>
 8004c34:	f04f 30ff 	mov.w	r0, #4294967295
 8004c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c3c:	3501      	adds	r5, #1
 8004c3e:	e7c6      	b.n	8004bce <_printf_common+0x3e>
 8004c40:	18e1      	adds	r1, r4, r3
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	2030      	movs	r0, #48	@ 0x30
 8004c46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c4a:	4422      	add	r2, r4
 8004c4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c54:	3302      	adds	r3, #2
 8004c56:	e7c7      	b.n	8004be8 <_printf_common+0x58>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	4638      	mov	r0, r7
 8004c60:	47c8      	blx	r9
 8004c62:	3001      	adds	r0, #1
 8004c64:	d0e6      	beq.n	8004c34 <_printf_common+0xa4>
 8004c66:	3601      	adds	r6, #1
 8004c68:	e7d9      	b.n	8004c1e <_printf_common+0x8e>
	...

08004c6c <_printf_i>:
 8004c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c70:	7e0f      	ldrb	r7, [r1, #24]
 8004c72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c74:	2f78      	cmp	r7, #120	@ 0x78
 8004c76:	4691      	mov	r9, r2
 8004c78:	4680      	mov	r8, r0
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	469a      	mov	sl, r3
 8004c7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c82:	d807      	bhi.n	8004c94 <_printf_i+0x28>
 8004c84:	2f62      	cmp	r7, #98	@ 0x62
 8004c86:	d80a      	bhi.n	8004c9e <_printf_i+0x32>
 8004c88:	2f00      	cmp	r7, #0
 8004c8a:	f000 80d2 	beq.w	8004e32 <_printf_i+0x1c6>
 8004c8e:	2f58      	cmp	r7, #88	@ 0x58
 8004c90:	f000 80b9 	beq.w	8004e06 <_printf_i+0x19a>
 8004c94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c9c:	e03a      	b.n	8004d14 <_printf_i+0xa8>
 8004c9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ca2:	2b15      	cmp	r3, #21
 8004ca4:	d8f6      	bhi.n	8004c94 <_printf_i+0x28>
 8004ca6:	a101      	add	r1, pc, #4	@ (adr r1, 8004cac <_printf_i+0x40>)
 8004ca8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cac:	08004d05 	.word	0x08004d05
 8004cb0:	08004d19 	.word	0x08004d19
 8004cb4:	08004c95 	.word	0x08004c95
 8004cb8:	08004c95 	.word	0x08004c95
 8004cbc:	08004c95 	.word	0x08004c95
 8004cc0:	08004c95 	.word	0x08004c95
 8004cc4:	08004d19 	.word	0x08004d19
 8004cc8:	08004c95 	.word	0x08004c95
 8004ccc:	08004c95 	.word	0x08004c95
 8004cd0:	08004c95 	.word	0x08004c95
 8004cd4:	08004c95 	.word	0x08004c95
 8004cd8:	08004e19 	.word	0x08004e19
 8004cdc:	08004d43 	.word	0x08004d43
 8004ce0:	08004dd3 	.word	0x08004dd3
 8004ce4:	08004c95 	.word	0x08004c95
 8004ce8:	08004c95 	.word	0x08004c95
 8004cec:	08004e3b 	.word	0x08004e3b
 8004cf0:	08004c95 	.word	0x08004c95
 8004cf4:	08004d43 	.word	0x08004d43
 8004cf8:	08004c95 	.word	0x08004c95
 8004cfc:	08004c95 	.word	0x08004c95
 8004d00:	08004ddb 	.word	0x08004ddb
 8004d04:	6833      	ldr	r3, [r6, #0]
 8004d06:	1d1a      	adds	r2, r3, #4
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6032      	str	r2, [r6, #0]
 8004d0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d14:	2301      	movs	r3, #1
 8004d16:	e09d      	b.n	8004e54 <_printf_i+0x1e8>
 8004d18:	6833      	ldr	r3, [r6, #0]
 8004d1a:	6820      	ldr	r0, [r4, #0]
 8004d1c:	1d19      	adds	r1, r3, #4
 8004d1e:	6031      	str	r1, [r6, #0]
 8004d20:	0606      	lsls	r6, r0, #24
 8004d22:	d501      	bpl.n	8004d28 <_printf_i+0xbc>
 8004d24:	681d      	ldr	r5, [r3, #0]
 8004d26:	e003      	b.n	8004d30 <_printf_i+0xc4>
 8004d28:	0645      	lsls	r5, r0, #25
 8004d2a:	d5fb      	bpl.n	8004d24 <_printf_i+0xb8>
 8004d2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d30:	2d00      	cmp	r5, #0
 8004d32:	da03      	bge.n	8004d3c <_printf_i+0xd0>
 8004d34:	232d      	movs	r3, #45	@ 0x2d
 8004d36:	426d      	negs	r5, r5
 8004d38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d3c:	4859      	ldr	r0, [pc, #356]	@ (8004ea4 <_printf_i+0x238>)
 8004d3e:	230a      	movs	r3, #10
 8004d40:	e011      	b.n	8004d66 <_printf_i+0xfa>
 8004d42:	6821      	ldr	r1, [r4, #0]
 8004d44:	6833      	ldr	r3, [r6, #0]
 8004d46:	0608      	lsls	r0, r1, #24
 8004d48:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d4c:	d402      	bmi.n	8004d54 <_printf_i+0xe8>
 8004d4e:	0649      	lsls	r1, r1, #25
 8004d50:	bf48      	it	mi
 8004d52:	b2ad      	uxthmi	r5, r5
 8004d54:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d56:	4853      	ldr	r0, [pc, #332]	@ (8004ea4 <_printf_i+0x238>)
 8004d58:	6033      	str	r3, [r6, #0]
 8004d5a:	bf14      	ite	ne
 8004d5c:	230a      	movne	r3, #10
 8004d5e:	2308      	moveq	r3, #8
 8004d60:	2100      	movs	r1, #0
 8004d62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d66:	6866      	ldr	r6, [r4, #4]
 8004d68:	60a6      	str	r6, [r4, #8]
 8004d6a:	2e00      	cmp	r6, #0
 8004d6c:	bfa2      	ittt	ge
 8004d6e:	6821      	ldrge	r1, [r4, #0]
 8004d70:	f021 0104 	bicge.w	r1, r1, #4
 8004d74:	6021      	strge	r1, [r4, #0]
 8004d76:	b90d      	cbnz	r5, 8004d7c <_printf_i+0x110>
 8004d78:	2e00      	cmp	r6, #0
 8004d7a:	d04b      	beq.n	8004e14 <_printf_i+0x1a8>
 8004d7c:	4616      	mov	r6, r2
 8004d7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d82:	fb03 5711 	mls	r7, r3, r1, r5
 8004d86:	5dc7      	ldrb	r7, [r0, r7]
 8004d88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d8c:	462f      	mov	r7, r5
 8004d8e:	42bb      	cmp	r3, r7
 8004d90:	460d      	mov	r5, r1
 8004d92:	d9f4      	bls.n	8004d7e <_printf_i+0x112>
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d10b      	bne.n	8004db0 <_printf_i+0x144>
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	07df      	lsls	r7, r3, #31
 8004d9c:	d508      	bpl.n	8004db0 <_printf_i+0x144>
 8004d9e:	6923      	ldr	r3, [r4, #16]
 8004da0:	6861      	ldr	r1, [r4, #4]
 8004da2:	4299      	cmp	r1, r3
 8004da4:	bfde      	ittt	le
 8004da6:	2330      	movle	r3, #48	@ 0x30
 8004da8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004dac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004db0:	1b92      	subs	r2, r2, r6
 8004db2:	6122      	str	r2, [r4, #16]
 8004db4:	f8cd a000 	str.w	sl, [sp]
 8004db8:	464b      	mov	r3, r9
 8004dba:	aa03      	add	r2, sp, #12
 8004dbc:	4621      	mov	r1, r4
 8004dbe:	4640      	mov	r0, r8
 8004dc0:	f7ff fee6 	bl	8004b90 <_printf_common>
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	d14a      	bne.n	8004e5e <_printf_i+0x1f2>
 8004dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dcc:	b004      	add	sp, #16
 8004dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd2:	6823      	ldr	r3, [r4, #0]
 8004dd4:	f043 0320 	orr.w	r3, r3, #32
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	4833      	ldr	r0, [pc, #204]	@ (8004ea8 <_printf_i+0x23c>)
 8004ddc:	2778      	movs	r7, #120	@ 0x78
 8004dde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	6831      	ldr	r1, [r6, #0]
 8004de6:	061f      	lsls	r7, r3, #24
 8004de8:	f851 5b04 	ldr.w	r5, [r1], #4
 8004dec:	d402      	bmi.n	8004df4 <_printf_i+0x188>
 8004dee:	065f      	lsls	r7, r3, #25
 8004df0:	bf48      	it	mi
 8004df2:	b2ad      	uxthmi	r5, r5
 8004df4:	6031      	str	r1, [r6, #0]
 8004df6:	07d9      	lsls	r1, r3, #31
 8004df8:	bf44      	itt	mi
 8004dfa:	f043 0320 	orrmi.w	r3, r3, #32
 8004dfe:	6023      	strmi	r3, [r4, #0]
 8004e00:	b11d      	cbz	r5, 8004e0a <_printf_i+0x19e>
 8004e02:	2310      	movs	r3, #16
 8004e04:	e7ac      	b.n	8004d60 <_printf_i+0xf4>
 8004e06:	4827      	ldr	r0, [pc, #156]	@ (8004ea4 <_printf_i+0x238>)
 8004e08:	e7e9      	b.n	8004dde <_printf_i+0x172>
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	f023 0320 	bic.w	r3, r3, #32
 8004e10:	6023      	str	r3, [r4, #0]
 8004e12:	e7f6      	b.n	8004e02 <_printf_i+0x196>
 8004e14:	4616      	mov	r6, r2
 8004e16:	e7bd      	b.n	8004d94 <_printf_i+0x128>
 8004e18:	6833      	ldr	r3, [r6, #0]
 8004e1a:	6825      	ldr	r5, [r4, #0]
 8004e1c:	6961      	ldr	r1, [r4, #20]
 8004e1e:	1d18      	adds	r0, r3, #4
 8004e20:	6030      	str	r0, [r6, #0]
 8004e22:	062e      	lsls	r6, r5, #24
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	d501      	bpl.n	8004e2c <_printf_i+0x1c0>
 8004e28:	6019      	str	r1, [r3, #0]
 8004e2a:	e002      	b.n	8004e32 <_printf_i+0x1c6>
 8004e2c:	0668      	lsls	r0, r5, #25
 8004e2e:	d5fb      	bpl.n	8004e28 <_printf_i+0x1bc>
 8004e30:	8019      	strh	r1, [r3, #0]
 8004e32:	2300      	movs	r3, #0
 8004e34:	6123      	str	r3, [r4, #16]
 8004e36:	4616      	mov	r6, r2
 8004e38:	e7bc      	b.n	8004db4 <_printf_i+0x148>
 8004e3a:	6833      	ldr	r3, [r6, #0]
 8004e3c:	1d1a      	adds	r2, r3, #4
 8004e3e:	6032      	str	r2, [r6, #0]
 8004e40:	681e      	ldr	r6, [r3, #0]
 8004e42:	6862      	ldr	r2, [r4, #4]
 8004e44:	2100      	movs	r1, #0
 8004e46:	4630      	mov	r0, r6
 8004e48:	f7fb f9d2 	bl	80001f0 <memchr>
 8004e4c:	b108      	cbz	r0, 8004e52 <_printf_i+0x1e6>
 8004e4e:	1b80      	subs	r0, r0, r6
 8004e50:	6060      	str	r0, [r4, #4]
 8004e52:	6863      	ldr	r3, [r4, #4]
 8004e54:	6123      	str	r3, [r4, #16]
 8004e56:	2300      	movs	r3, #0
 8004e58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e5c:	e7aa      	b.n	8004db4 <_printf_i+0x148>
 8004e5e:	6923      	ldr	r3, [r4, #16]
 8004e60:	4632      	mov	r2, r6
 8004e62:	4649      	mov	r1, r9
 8004e64:	4640      	mov	r0, r8
 8004e66:	47d0      	blx	sl
 8004e68:	3001      	adds	r0, #1
 8004e6a:	d0ad      	beq.n	8004dc8 <_printf_i+0x15c>
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	079b      	lsls	r3, r3, #30
 8004e70:	d413      	bmi.n	8004e9a <_printf_i+0x22e>
 8004e72:	68e0      	ldr	r0, [r4, #12]
 8004e74:	9b03      	ldr	r3, [sp, #12]
 8004e76:	4298      	cmp	r0, r3
 8004e78:	bfb8      	it	lt
 8004e7a:	4618      	movlt	r0, r3
 8004e7c:	e7a6      	b.n	8004dcc <_printf_i+0x160>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	4632      	mov	r2, r6
 8004e82:	4649      	mov	r1, r9
 8004e84:	4640      	mov	r0, r8
 8004e86:	47d0      	blx	sl
 8004e88:	3001      	adds	r0, #1
 8004e8a:	d09d      	beq.n	8004dc8 <_printf_i+0x15c>
 8004e8c:	3501      	adds	r5, #1
 8004e8e:	68e3      	ldr	r3, [r4, #12]
 8004e90:	9903      	ldr	r1, [sp, #12]
 8004e92:	1a5b      	subs	r3, r3, r1
 8004e94:	42ab      	cmp	r3, r5
 8004e96:	dcf2      	bgt.n	8004e7e <_printf_i+0x212>
 8004e98:	e7eb      	b.n	8004e72 <_printf_i+0x206>
 8004e9a:	2500      	movs	r5, #0
 8004e9c:	f104 0619 	add.w	r6, r4, #25
 8004ea0:	e7f5      	b.n	8004e8e <_printf_i+0x222>
 8004ea2:	bf00      	nop
 8004ea4:	080051c2 	.word	0x080051c2
 8004ea8:	080051d3 	.word	0x080051d3

08004eac <__sflush_r>:
 8004eac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb4:	0716      	lsls	r6, r2, #28
 8004eb6:	4605      	mov	r5, r0
 8004eb8:	460c      	mov	r4, r1
 8004eba:	d454      	bmi.n	8004f66 <__sflush_r+0xba>
 8004ebc:	684b      	ldr	r3, [r1, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	dc02      	bgt.n	8004ec8 <__sflush_r+0x1c>
 8004ec2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	dd48      	ble.n	8004f5a <__sflush_r+0xae>
 8004ec8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004eca:	2e00      	cmp	r6, #0
 8004ecc:	d045      	beq.n	8004f5a <__sflush_r+0xae>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004ed4:	682f      	ldr	r7, [r5, #0]
 8004ed6:	6a21      	ldr	r1, [r4, #32]
 8004ed8:	602b      	str	r3, [r5, #0]
 8004eda:	d030      	beq.n	8004f3e <__sflush_r+0x92>
 8004edc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004ede:	89a3      	ldrh	r3, [r4, #12]
 8004ee0:	0759      	lsls	r1, r3, #29
 8004ee2:	d505      	bpl.n	8004ef0 <__sflush_r+0x44>
 8004ee4:	6863      	ldr	r3, [r4, #4]
 8004ee6:	1ad2      	subs	r2, r2, r3
 8004ee8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004eea:	b10b      	cbz	r3, 8004ef0 <__sflush_r+0x44>
 8004eec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004eee:	1ad2      	subs	r2, r2, r3
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ef4:	6a21      	ldr	r1, [r4, #32]
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	47b0      	blx	r6
 8004efa:	1c43      	adds	r3, r0, #1
 8004efc:	89a3      	ldrh	r3, [r4, #12]
 8004efe:	d106      	bne.n	8004f0e <__sflush_r+0x62>
 8004f00:	6829      	ldr	r1, [r5, #0]
 8004f02:	291d      	cmp	r1, #29
 8004f04:	d82b      	bhi.n	8004f5e <__sflush_r+0xb2>
 8004f06:	4a2a      	ldr	r2, [pc, #168]	@ (8004fb0 <__sflush_r+0x104>)
 8004f08:	410a      	asrs	r2, r1
 8004f0a:	07d6      	lsls	r6, r2, #31
 8004f0c:	d427      	bmi.n	8004f5e <__sflush_r+0xb2>
 8004f0e:	2200      	movs	r2, #0
 8004f10:	6062      	str	r2, [r4, #4]
 8004f12:	04d9      	lsls	r1, r3, #19
 8004f14:	6922      	ldr	r2, [r4, #16]
 8004f16:	6022      	str	r2, [r4, #0]
 8004f18:	d504      	bpl.n	8004f24 <__sflush_r+0x78>
 8004f1a:	1c42      	adds	r2, r0, #1
 8004f1c:	d101      	bne.n	8004f22 <__sflush_r+0x76>
 8004f1e:	682b      	ldr	r3, [r5, #0]
 8004f20:	b903      	cbnz	r3, 8004f24 <__sflush_r+0x78>
 8004f22:	6560      	str	r0, [r4, #84]	@ 0x54
 8004f24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f26:	602f      	str	r7, [r5, #0]
 8004f28:	b1b9      	cbz	r1, 8004f5a <__sflush_r+0xae>
 8004f2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f2e:	4299      	cmp	r1, r3
 8004f30:	d002      	beq.n	8004f38 <__sflush_r+0x8c>
 8004f32:	4628      	mov	r0, r5
 8004f34:	f7ff fbf2 	bl	800471c <_free_r>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f3c:	e00d      	b.n	8004f5a <__sflush_r+0xae>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	4628      	mov	r0, r5
 8004f42:	47b0      	blx	r6
 8004f44:	4602      	mov	r2, r0
 8004f46:	1c50      	adds	r0, r2, #1
 8004f48:	d1c9      	bne.n	8004ede <__sflush_r+0x32>
 8004f4a:	682b      	ldr	r3, [r5, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0c6      	beq.n	8004ede <__sflush_r+0x32>
 8004f50:	2b1d      	cmp	r3, #29
 8004f52:	d001      	beq.n	8004f58 <__sflush_r+0xac>
 8004f54:	2b16      	cmp	r3, #22
 8004f56:	d11e      	bne.n	8004f96 <__sflush_r+0xea>
 8004f58:	602f      	str	r7, [r5, #0]
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	e022      	b.n	8004fa4 <__sflush_r+0xf8>
 8004f5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f62:	b21b      	sxth	r3, r3
 8004f64:	e01b      	b.n	8004f9e <__sflush_r+0xf2>
 8004f66:	690f      	ldr	r7, [r1, #16]
 8004f68:	2f00      	cmp	r7, #0
 8004f6a:	d0f6      	beq.n	8004f5a <__sflush_r+0xae>
 8004f6c:	0793      	lsls	r3, r2, #30
 8004f6e:	680e      	ldr	r6, [r1, #0]
 8004f70:	bf08      	it	eq
 8004f72:	694b      	ldreq	r3, [r1, #20]
 8004f74:	600f      	str	r7, [r1, #0]
 8004f76:	bf18      	it	ne
 8004f78:	2300      	movne	r3, #0
 8004f7a:	eba6 0807 	sub.w	r8, r6, r7
 8004f7e:	608b      	str	r3, [r1, #8]
 8004f80:	f1b8 0f00 	cmp.w	r8, #0
 8004f84:	dde9      	ble.n	8004f5a <__sflush_r+0xae>
 8004f86:	6a21      	ldr	r1, [r4, #32]
 8004f88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004f8a:	4643      	mov	r3, r8
 8004f8c:	463a      	mov	r2, r7
 8004f8e:	4628      	mov	r0, r5
 8004f90:	47b0      	blx	r6
 8004f92:	2800      	cmp	r0, #0
 8004f94:	dc08      	bgt.n	8004fa8 <__sflush_r+0xfc>
 8004f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f9e:	81a3      	strh	r3, [r4, #12]
 8004fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fa8:	4407      	add	r7, r0
 8004faa:	eba8 0800 	sub.w	r8, r8, r0
 8004fae:	e7e7      	b.n	8004f80 <__sflush_r+0xd4>
 8004fb0:	dfbffffe 	.word	0xdfbffffe

08004fb4 <_fflush_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	690b      	ldr	r3, [r1, #16]
 8004fb8:	4605      	mov	r5, r0
 8004fba:	460c      	mov	r4, r1
 8004fbc:	b913      	cbnz	r3, 8004fc4 <_fflush_r+0x10>
 8004fbe:	2500      	movs	r5, #0
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	b118      	cbz	r0, 8004fce <_fflush_r+0x1a>
 8004fc6:	6a03      	ldr	r3, [r0, #32]
 8004fc8:	b90b      	cbnz	r3, 8004fce <_fflush_r+0x1a>
 8004fca:	f7ff f9ad 	bl	8004328 <__sinit>
 8004fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0f3      	beq.n	8004fbe <_fflush_r+0xa>
 8004fd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004fd8:	07d0      	lsls	r0, r2, #31
 8004fda:	d404      	bmi.n	8004fe6 <_fflush_r+0x32>
 8004fdc:	0599      	lsls	r1, r3, #22
 8004fde:	d402      	bmi.n	8004fe6 <_fflush_r+0x32>
 8004fe0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fe2:	f7ff fb98 	bl	8004716 <__retarget_lock_acquire_recursive>
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	4621      	mov	r1, r4
 8004fea:	f7ff ff5f 	bl	8004eac <__sflush_r>
 8004fee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ff0:	07da      	lsls	r2, r3, #31
 8004ff2:	4605      	mov	r5, r0
 8004ff4:	d4e4      	bmi.n	8004fc0 <_fflush_r+0xc>
 8004ff6:	89a3      	ldrh	r3, [r4, #12]
 8004ff8:	059b      	lsls	r3, r3, #22
 8004ffa:	d4e1      	bmi.n	8004fc0 <_fflush_r+0xc>
 8004ffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ffe:	f7ff fb8b 	bl	8004718 <__retarget_lock_release_recursive>
 8005002:	e7dd      	b.n	8004fc0 <_fflush_r+0xc>

08005004 <__swhatbuf_r>:
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	460c      	mov	r4, r1
 8005008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800500c:	2900      	cmp	r1, #0
 800500e:	b096      	sub	sp, #88	@ 0x58
 8005010:	4615      	mov	r5, r2
 8005012:	461e      	mov	r6, r3
 8005014:	da0d      	bge.n	8005032 <__swhatbuf_r+0x2e>
 8005016:	89a3      	ldrh	r3, [r4, #12]
 8005018:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800501c:	f04f 0100 	mov.w	r1, #0
 8005020:	bf14      	ite	ne
 8005022:	2340      	movne	r3, #64	@ 0x40
 8005024:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005028:	2000      	movs	r0, #0
 800502a:	6031      	str	r1, [r6, #0]
 800502c:	602b      	str	r3, [r5, #0]
 800502e:	b016      	add	sp, #88	@ 0x58
 8005030:	bd70      	pop	{r4, r5, r6, pc}
 8005032:	466a      	mov	r2, sp
 8005034:	f000 f848 	bl	80050c8 <_fstat_r>
 8005038:	2800      	cmp	r0, #0
 800503a:	dbec      	blt.n	8005016 <__swhatbuf_r+0x12>
 800503c:	9901      	ldr	r1, [sp, #4]
 800503e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005042:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005046:	4259      	negs	r1, r3
 8005048:	4159      	adcs	r1, r3
 800504a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800504e:	e7eb      	b.n	8005028 <__swhatbuf_r+0x24>

08005050 <__smakebuf_r>:
 8005050:	898b      	ldrh	r3, [r1, #12]
 8005052:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005054:	079d      	lsls	r5, r3, #30
 8005056:	4606      	mov	r6, r0
 8005058:	460c      	mov	r4, r1
 800505a:	d507      	bpl.n	800506c <__smakebuf_r+0x1c>
 800505c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	6123      	str	r3, [r4, #16]
 8005064:	2301      	movs	r3, #1
 8005066:	6163      	str	r3, [r4, #20]
 8005068:	b003      	add	sp, #12
 800506a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800506c:	ab01      	add	r3, sp, #4
 800506e:	466a      	mov	r2, sp
 8005070:	f7ff ffc8 	bl	8005004 <__swhatbuf_r>
 8005074:	9f00      	ldr	r7, [sp, #0]
 8005076:	4605      	mov	r5, r0
 8005078:	4639      	mov	r1, r7
 800507a:	4630      	mov	r0, r6
 800507c:	f7ff fbba 	bl	80047f4 <_malloc_r>
 8005080:	b948      	cbnz	r0, 8005096 <__smakebuf_r+0x46>
 8005082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005086:	059a      	lsls	r2, r3, #22
 8005088:	d4ee      	bmi.n	8005068 <__smakebuf_r+0x18>
 800508a:	f023 0303 	bic.w	r3, r3, #3
 800508e:	f043 0302 	orr.w	r3, r3, #2
 8005092:	81a3      	strh	r3, [r4, #12]
 8005094:	e7e2      	b.n	800505c <__smakebuf_r+0xc>
 8005096:	89a3      	ldrh	r3, [r4, #12]
 8005098:	6020      	str	r0, [r4, #0]
 800509a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800509e:	81a3      	strh	r3, [r4, #12]
 80050a0:	9b01      	ldr	r3, [sp, #4]
 80050a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80050a6:	b15b      	cbz	r3, 80050c0 <__smakebuf_r+0x70>
 80050a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050ac:	4630      	mov	r0, r6
 80050ae:	f000 f81d 	bl	80050ec <_isatty_r>
 80050b2:	b128      	cbz	r0, 80050c0 <__smakebuf_r+0x70>
 80050b4:	89a3      	ldrh	r3, [r4, #12]
 80050b6:	f023 0303 	bic.w	r3, r3, #3
 80050ba:	f043 0301 	orr.w	r3, r3, #1
 80050be:	81a3      	strh	r3, [r4, #12]
 80050c0:	89a3      	ldrh	r3, [r4, #12]
 80050c2:	431d      	orrs	r5, r3
 80050c4:	81a5      	strh	r5, [r4, #12]
 80050c6:	e7cf      	b.n	8005068 <__smakebuf_r+0x18>

080050c8 <_fstat_r>:
 80050c8:	b538      	push	{r3, r4, r5, lr}
 80050ca:	4d07      	ldr	r5, [pc, #28]	@ (80050e8 <_fstat_r+0x20>)
 80050cc:	2300      	movs	r3, #0
 80050ce:	4604      	mov	r4, r0
 80050d0:	4608      	mov	r0, r1
 80050d2:	4611      	mov	r1, r2
 80050d4:	602b      	str	r3, [r5, #0]
 80050d6:	f7fb fe5a 	bl	8000d8e <_fstat>
 80050da:	1c43      	adds	r3, r0, #1
 80050dc:	d102      	bne.n	80050e4 <_fstat_r+0x1c>
 80050de:	682b      	ldr	r3, [r5, #0]
 80050e0:	b103      	cbz	r3, 80050e4 <_fstat_r+0x1c>
 80050e2:	6023      	str	r3, [r4, #0]
 80050e4:	bd38      	pop	{r3, r4, r5, pc}
 80050e6:	bf00      	nop
 80050e8:	200003ec 	.word	0x200003ec

080050ec <_isatty_r>:
 80050ec:	b538      	push	{r3, r4, r5, lr}
 80050ee:	4d06      	ldr	r5, [pc, #24]	@ (8005108 <_isatty_r+0x1c>)
 80050f0:	2300      	movs	r3, #0
 80050f2:	4604      	mov	r4, r0
 80050f4:	4608      	mov	r0, r1
 80050f6:	602b      	str	r3, [r5, #0]
 80050f8:	f7fb fe59 	bl	8000dae <_isatty>
 80050fc:	1c43      	adds	r3, r0, #1
 80050fe:	d102      	bne.n	8005106 <_isatty_r+0x1a>
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	b103      	cbz	r3, 8005106 <_isatty_r+0x1a>
 8005104:	6023      	str	r3, [r4, #0]
 8005106:	bd38      	pop	{r3, r4, r5, pc}
 8005108:	200003ec 	.word	0x200003ec

0800510c <_sbrk_r>:
 800510c:	b538      	push	{r3, r4, r5, lr}
 800510e:	4d06      	ldr	r5, [pc, #24]	@ (8005128 <_sbrk_r+0x1c>)
 8005110:	2300      	movs	r3, #0
 8005112:	4604      	mov	r4, r0
 8005114:	4608      	mov	r0, r1
 8005116:	602b      	str	r3, [r5, #0]
 8005118:	f7fb fe62 	bl	8000de0 <_sbrk>
 800511c:	1c43      	adds	r3, r0, #1
 800511e:	d102      	bne.n	8005126 <_sbrk_r+0x1a>
 8005120:	682b      	ldr	r3, [r5, #0]
 8005122:	b103      	cbz	r3, 8005126 <_sbrk_r+0x1a>
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	bd38      	pop	{r3, r4, r5, pc}
 8005128:	200003ec 	.word	0x200003ec

0800512c <_init>:
 800512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512e:	bf00      	nop
 8005130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005132:	bc08      	pop	{r3}
 8005134:	469e      	mov	lr, r3
 8005136:	4770      	bx	lr

08005138 <_fini>:
 8005138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513a:	bf00      	nop
 800513c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800513e:	bc08      	pop	{r3}
 8005140:	469e      	mov	lr, r3
 8005142:	4770      	bx	lr
