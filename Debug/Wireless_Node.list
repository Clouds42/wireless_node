
Wireless_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f40  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080050d0  080050d0  000060d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005168  08005168  00007078  2**0
                  CONTENTS
  4 .ARM          00000008  08005168  08005168  00006168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005170  08005170  00007078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005170  08005170  00006170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005174  08005174  00006174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08005178  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007078  2**0
                  CONTENTS
 10 .bss          000003c0  20000078  20000078  00007078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000438  20000438  00007078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000134c3  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d65  00000000  00000000  0001a56b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  0001d2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e5f  00000000  00000000  0001e530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000239b9  00000000  00000000  0001f38f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000175b3  00000000  00000000  00042d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1eae  00000000  00000000  0005a2fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012c1a9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054a0  00000000  00000000  0012c1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  0013168c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080050b8 	.word	0x080050b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080050b8 	.word	0x080050b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08c      	sub	sp, #48	@ 0x30
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
 800057a:	4b4b      	ldr	r3, [pc, #300]	@ (80006a8 <MX_GPIO_Init+0x148>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	4a4a      	ldr	r2, [pc, #296]	@ (80006a8 <MX_GPIO_Init+0x148>)
 8000580:	f043 0310 	orr.w	r3, r3, #16
 8000584:	6313      	str	r3, [r2, #48]	@ 0x30
 8000586:	4b48      	ldr	r3, [pc, #288]	@ (80006a8 <MX_GPIO_Init+0x148>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	f003 0310 	and.w	r3, r3, #16
 800058e:	61bb      	str	r3, [r7, #24]
 8000590:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
 8000596:	4b44      	ldr	r3, [pc, #272]	@ (80006a8 <MX_GPIO_Init+0x148>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	4a43      	ldr	r2, [pc, #268]	@ (80006a8 <MX_GPIO_Init+0x148>)
 800059c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a2:	4b41      	ldr	r3, [pc, #260]	@ (80006a8 <MX_GPIO_Init+0x148>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	4b3d      	ldr	r3, [pc, #244]	@ (80006a8 <MX_GPIO_Init+0x148>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	4a3c      	ldr	r2, [pc, #240]	@ (80006a8 <MX_GPIO_Init+0x148>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005be:	4b3a      	ldr	r3, [pc, #232]	@ (80006a8 <MX_GPIO_Init+0x148>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	4b36      	ldr	r3, [pc, #216]	@ (80006a8 <MX_GPIO_Init+0x148>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	4a35      	ldr	r2, [pc, #212]	@ (80006a8 <MX_GPIO_Init+0x148>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005da:	4b33      	ldr	r3, [pc, #204]	@ (80006a8 <MX_GPIO_Init+0x148>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	4b2f      	ldr	r3, [pc, #188]	@ (80006a8 <MX_GPIO_Init+0x148>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	4a2e      	ldr	r2, [pc, #184]	@ (80006a8 <MX_GPIO_Init+0x148>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f6:	4b2c      	ldr	r3, [pc, #176]	@ (80006a8 <MX_GPIO_Init+0x148>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	4b28      	ldr	r3, [pc, #160]	@ (80006a8 <MX_GPIO_Init+0x148>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	4a27      	ldr	r2, [pc, #156]	@ (80006a8 <MX_GPIO_Init+0x148>)
 800060c:	f043 0308 	orr.w	r3, r3, #8
 8000610:	6313      	str	r3, [r2, #48]	@ 0x30
 8000612:	4b25      	ldr	r3, [pc, #148]	@ (80006a8 <MX_GPIO_Init+0x148>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	f003 0308 	and.w	r3, r3, #8
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RF_PTX1_CE_Pin|RF_PTX1_CSN_Pin|RF_PTX2_CE_Pin|RF_PTX2_CSN_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	213c      	movs	r1, #60	@ 0x3c
 8000622:	4822      	ldr	r0, [pc, #136]	@ (80006ac <MX_GPIO_Init+0x14c>)
 8000624:	f001 f91c 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SYS_LED0_Pin|SYS_LED1_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2103      	movs	r1, #3
 800062c:	4820      	ldr	r0, [pc, #128]	@ (80006b0 <MX_GPIO_Init+0x150>)
 800062e:	f001 f917 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = RF_PTX1_CE_Pin|RF_PTX1_CSN_Pin|RF_PTX2_CE_Pin|RF_PTX2_CSN_Pin;
 8000632:	233c      	movs	r3, #60	@ 0x3c
 8000634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2300      	movs	r3, #0
 8000640:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	4619      	mov	r1, r3
 8000648:	4818      	ldr	r0, [pc, #96]	@ (80006ac <MX_GPIO_Init+0x14c>)
 800064a:	f000 ff55 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_PTX2_IRQ_Pin;
 800064e:	2302      	movs	r3, #2
 8000650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000652:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(RF_PTX2_IRQ_GPIO_Port, &GPIO_InitStruct);
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4619      	mov	r1, r3
 8000662:	4814      	ldr	r0, [pc, #80]	@ (80006b4 <MX_GPIO_Init+0x154>)
 8000664:	f000 ff48 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_PTX1_IRQ_Pin;
 8000668:	2310      	movs	r3, #16
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(RF_PTX1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	4619      	mov	r1, r3
 800067c:	480e      	ldr	r0, [pc, #56]	@ (80006b8 <MX_GPIO_Init+0x158>)
 800067e:	f000 ff3b 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SYS_LED0_Pin|SYS_LED1_Pin;
 8000682:	2303      	movs	r3, #3
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	4619      	mov	r1, r3
 8000698:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <MX_GPIO_Init+0x150>)
 800069a:	f000 ff2d 	bl	80014f8 <HAL_GPIO_Init>

}
 800069e:	bf00      	nop
 80006a0:	3730      	adds	r7, #48	@ 0x30
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40020c00 	.word	0x40020c00
 80006b4:	40020800 	.word	0x40020800
 80006b8:	40020000 	.word	0x40020000

080006bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_I2C1_Init+0x50>)
 80006c2:	4a13      	ldr	r2, [pc, #76]	@ (8000710 <MX_I2C1_Init+0x54>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006c6:	4b11      	ldr	r3, [pc, #68]	@ (800070c <MX_I2C1_Init+0x50>)
 80006c8:	4a12      	ldr	r2, [pc, #72]	@ (8000714 <MX_I2C1_Init+0x58>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <MX_I2C1_Init+0x50>)
 80006da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	@ (800070c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	@ (800070c <MX_I2C1_Init+0x50>)
 80006fa:	f001 f8e5 	bl	80018c8 <HAL_I2C_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000704:	f000 f948 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000094 	.word	0x20000094
 8000710:	40005400 	.word	0x40005400
 8000714:	000186a0 	.word	0x000186a0

08000718 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	@ 0x28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a19      	ldr	r2, [pc, #100]	@ (800079c <HAL_I2C_MspInit+0x84>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d12b      	bne.n	8000792 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <HAL_I2C_MspInit+0x88>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a17      	ldr	r2, [pc, #92]	@ (80007a0 <HAL_I2C_MspInit+0x88>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <HAL_I2C_MspInit+0x88>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000756:	23c0      	movs	r3, #192	@ 0xc0
 8000758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800075a:	2312      	movs	r3, #18
 800075c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000762:	2303      	movs	r3, #3
 8000764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000766:	2304      	movs	r3, #4
 8000768:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	480c      	ldr	r0, [pc, #48]	@ (80007a4 <HAL_I2C_MspInit+0x8c>)
 8000772:	f000 fec1 	bl	80014f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <HAL_I2C_MspInit+0x88>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077e:	4a08      	ldr	r2, [pc, #32]	@ (80007a0 <HAL_I2C_MspInit+0x88>)
 8000780:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000784:	6413      	str	r3, [r2, #64]	@ 0x40
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <HAL_I2C_MspInit+0x88>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	@ 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40005400 	.word	0x40005400
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020400 	.word	0x40020400

080007a8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 80007b0:	1d39      	adds	r1, r7, #4
 80007b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007b6:	2201      	movs	r2, #1
 80007b8:	4803      	ldr	r0, [pc, #12]	@ (80007c8 <__io_putchar+0x20>)
 80007ba:	f002 fe67 	bl	800348c <HAL_UART_Transmit>
    return ch;
 80007be:	687b      	ldr	r3, [r7, #4]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000258 	.word	0x20000258

080007cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d0:	f000 fcea 	bl	80011a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d4:	f000 f876 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d8:	f7ff fec2 	bl	8000560 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007dc:	f7ff ff6e 	bl	80006bc <MX_I2C1_Init>
  MX_SPI1_Init();
 80007e0:	f000 f8e0 	bl	80009a4 <MX_SPI1_Init>
  MX_SPI2_Init();
 80007e4:	f000 f914 	bl	8000a10 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80007e8:	f000 fbe4 	bl	8000fb4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007ec:	f000 fc0c 	bl	8001008 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80007f0:	f000 fb54 	bl	8000e9c <MX_TIM3_Init>
  MX_TIM1_Init();
 80007f4:	f000 fb02 	bl	8000dfc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80007f8:	4827      	ldr	r0, [pc, #156]	@ (8000898 <main+0xcc>)
 80007fa:	f002 f9c7 	bl	8002b8c <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(SYS_LED0_GPIO_Port, SYS_LED0_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2101      	movs	r1, #1
 8000802:	4826      	ldr	r0, [pc, #152]	@ (800089c <main+0xd0>)
 8000804:	f001 f82c 	bl	8001860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SYS_LED1_GPIO_Port, SYS_LED1_Pin, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2102      	movs	r1, #2
 800080c:	4823      	ldr	r0, [pc, #140]	@ (800089c <main+0xd0>)
 800080e:	f001 f827 	bl	8001860 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start(&htim1);
 8000812:	4823      	ldr	r0, [pc, #140]	@ (80008a0 <main+0xd4>)
 8000814:	f002 f952 	bl	8002abc <HAL_TIM_Base_Start>

  while (NRF24L01_Check());
 8000818:	bf00      	nop
 800081a:	f003 fa0f 	bl	8003c3c <NRF24L01_Check>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1fa      	bne.n	800081a <main+0x4e>
  printf("NRF24L01 OK!\r\n");
 8000824:	481f      	ldr	r0, [pc, #124]	@ (80008a4 <main+0xd8>)
 8000826:	f003 fde3 	bl	80043f0 <puts>
  NRF24L01_TX_Mode();
 800082a:	f003 fb39 	bl	8003ea0 <NRF24L01_TX_Mode>

  while (NRF24L02_Check());
 800082e:	bf00      	nop
 8000830:	f003 fb70 	bl	8003f14 <NRF24L02_Check>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d1fa      	bne.n	8000830 <main+0x64>
  printf("NRF24L02 OK!\r\n");
 800083a:	481b      	ldr	r0, [pc, #108]	@ (80008a8 <main+0xdc>)
 800083c:	f003 fdd8 	bl	80043f0 <puts>
  NRF24L02_RX_Mode();
 8000840:	f003 fc7a 	bl	8004138 <NRF24L02_RX_Mode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000844:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <main+0xd4>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2200      	movs	r2, #0
 800084a:	625a      	str	r2, [r3, #36]	@ 0x24
	  start_time = __HAL_TIM_GET_COUNTER(&htim1);
 800084c:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <main+0xd4>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000852:	4a16      	ldr	r2, [pc, #88]	@ (80008ac <main+0xe0>)
 8000854:	6013      	str	r3, [r2, #0]
	  NRF24L01_TxPacket_Data((uint8_t *)ADC_Data, 32);
 8000856:	2120      	movs	r1, #32
 8000858:	4815      	ldr	r0, [pc, #84]	@ (80008b0 <main+0xe4>)
 800085a:	f003 fadd 	bl	8003e18 <NRF24L01_TxPacket_Data>
	  while (NRF24L02_RxPacket(receive_buff) != 0);
 800085e:	bf00      	nop
 8000860:	4814      	ldr	r0, [pc, #80]	@ (80008b4 <main+0xe8>)
 8000862:	f003 fc45 	bl	80040f0 <NRF24L02_RxPacket>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1f9      	bne.n	8000860 <main+0x94>
	  end_time = __HAL_TIM_GET_COUNTER(&htim1);
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <main+0xd4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000872:	4a11      	ldr	r2, [pc, #68]	@ (80008b8 <main+0xec>)
 8000874:	6013      	str	r3, [r2, #0]
	  elapsed_cycles = end_time - start_time;
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <main+0xec>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <main+0xe0>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	4a0e      	ldr	r2, [pc, #56]	@ (80008bc <main+0xf0>)
 8000882:	6013      	str	r3, [r2, #0]
//	  HAL_TIM_Base_Stop(&htim1);
//	  printf("Elapsed cycles: %lu\n", elapsed_cycles);
	  printf("%lu\n", elapsed_cycles);
 8000884:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <main+0xf0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	480d      	ldr	r0, [pc, #52]	@ (80008c0 <main+0xf4>)
 800088c:	f003 fd48 	bl	8004320 <iprintf>
	  HAL_Delay(50);
 8000890:	2032      	movs	r0, #50	@ 0x32
 8000892:	f000 fcfb 	bl	800128c <HAL_Delay>
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000896:	e7d5      	b.n	8000844 <main+0x78>
 8000898:	20000210 	.word	0x20000210
 800089c:	40020c00 	.word	0x40020c00
 80008a0:	200001c8 	.word	0x200001c8
 80008a4:	080050d0 	.word	0x080050d0
 80008a8:	080050e0 	.word	0x080050e0
 80008ac:	20000108 	.word	0x20000108
 80008b0:	20000000 	.word	0x20000000
 80008b4:	200000e8 	.word	0x200000e8
 80008b8:	2000010c 	.word	0x2000010c
 80008bc:	20000110 	.word	0x20000110
 80008c0:	080050f0 	.word	0x080050f0

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	@ 0x50
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0320 	add.w	r3, r7, #32
 80008ce:	2230      	movs	r2, #48	@ 0x30
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 fe6c 	bl	80045b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	4b28      	ldr	r3, [pc, #160]	@ (8000990 <SystemClock_Config+0xcc>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f0:	4a27      	ldr	r2, [pc, #156]	@ (8000990 <SystemClock_Config+0xcc>)
 80008f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f8:	4b25      	ldr	r3, [pc, #148]	@ (8000990 <SystemClock_Config+0xcc>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	4b22      	ldr	r3, [pc, #136]	@ (8000994 <SystemClock_Config+0xd0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a21      	ldr	r2, [pc, #132]	@ (8000994 <SystemClock_Config+0xd0>)
 800090e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <SystemClock_Config+0xd0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000920:	2301      	movs	r3, #1
 8000922:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000924:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092a:	2302      	movs	r3, #2
 800092c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000932:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000934:	2319      	movs	r3, #25
 8000936:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000938:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800093c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800093e:	2302      	movs	r3, #2
 8000940:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000942:	2304      	movs	r3, #4
 8000944:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000946:	f107 0320 	add.w	r3, r7, #32
 800094a:	4618      	mov	r0, r3
 800094c:	f001 f900 	bl	8001b50 <HAL_RCC_OscConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000956:	f000 f81f 	bl	8000998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095a:	230f      	movs	r3, #15
 800095c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095e:	2302      	movs	r3, #2
 8000960:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000966:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800096a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800096c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000970:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	2105      	movs	r1, #5
 8000978:	4618      	mov	r0, r3
 800097a:	f001 fb61 	bl	8002040 <HAL_RCC_ClockConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000984:	f000 f808 	bl	8000998 <Error_Handler>
  }
}
 8000988:	bf00      	nop
 800098a:	3750      	adds	r7, #80	@ 0x50
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	40007000 	.word	0x40007000

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <Error_Handler+0x8>

080009a4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80009a8:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <MX_SPI1_Init+0x64>)
 80009aa:	4a18      	ldr	r2, [pc, #96]	@ (8000a0c <MX_SPI1_Init+0x68>)
 80009ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ae:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <MX_SPI1_Init+0x64>)
 80009b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009b6:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <MX_SPI1_Init+0x64>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009bc:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <MX_SPI1_Init+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <MX_SPI1_Init+0x64>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <MX_SPI1_Init+0x64>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <MX_SPI1_Init+0x64>)
 80009d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <MX_SPI1_Init+0x64>)
 80009d8:	2210      	movs	r2, #16
 80009da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <MX_SPI1_Init+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <MX_SPI1_Init+0x64>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e8:	4b07      	ldr	r3, [pc, #28]	@ (8000a08 <MX_SPI1_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <MX_SPI1_Init+0x64>)
 80009f0:	220a      	movs	r2, #10
 80009f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009f4:	4804      	ldr	r0, [pc, #16]	@ (8000a08 <MX_SPI1_Init+0x64>)
 80009f6:	f001 fd03 	bl	8002400 <HAL_SPI_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a00:	f7ff ffca 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000114 	.word	0x20000114
 8000a0c:	40013000 	.word	0x40013000

08000a10 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000a14:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <MX_SPI2_Init+0x64>)
 8000a16:	4a18      	ldr	r2, [pc, #96]	@ (8000a78 <MX_SPI2_Init+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <MX_SPI2_Init+0x64>)
 8000a1c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a22:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <MX_SPI2_Init+0x64>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <MX_SPI2_Init+0x64>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_SPI2_Init+0x64>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <MX_SPI2_Init+0x64>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_SPI2_Init+0x64>)
 8000a3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a40:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_SPI2_Init+0x64>)
 8000a44:	2210      	movs	r2, #16
 8000a46:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <MX_SPI2_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_SPI2_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a54:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <MX_SPI2_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <MX_SPI2_Init+0x64>)
 8000a5c:	220a      	movs	r2, #10
 8000a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	@ (8000a74 <MX_SPI2_Init+0x64>)
 8000a62:	f001 fccd 	bl	8002400 <HAL_SPI_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a6c:	f7ff ff94 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000016c 	.word	0x2000016c
 8000a78:	40003800 	.word	0x40003800

08000a7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08c      	sub	sp, #48	@ 0x30
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a41      	ldr	r2, [pc, #260]	@ (8000ba0 <HAL_SPI_MspInit+0x124>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d12c      	bne.n	8000af8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
 8000aa2:	4b40      	ldr	r3, [pc, #256]	@ (8000ba4 <HAL_SPI_MspInit+0x128>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ba4 <HAL_SPI_MspInit+0x128>)
 8000aa8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aae:	4b3d      	ldr	r3, [pc, #244]	@ (8000ba4 <HAL_SPI_MspInit+0x128>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ab6:	61bb      	str	r3, [r7, #24]
 8000ab8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	4b39      	ldr	r3, [pc, #228]	@ (8000ba4 <HAL_SPI_MspInit+0x128>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a38      	ldr	r2, [pc, #224]	@ (8000ba4 <HAL_SPI_MspInit+0x128>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b36      	ldr	r3, [pc, #216]	@ (8000ba4 <HAL_SPI_MspInit+0x128>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ad6:	23e0      	movs	r3, #224	@ 0xe0
 8000ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ae6:	2305      	movs	r3, #5
 8000ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	482d      	ldr	r0, [pc, #180]	@ (8000ba8 <HAL_SPI_MspInit+0x12c>)
 8000af2:	f000 fd01 	bl	80014f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000af6:	e04f      	b.n	8000b98 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a2b      	ldr	r2, [pc, #172]	@ (8000bac <HAL_SPI_MspInit+0x130>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d14a      	bne.n	8000b98 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b27      	ldr	r3, [pc, #156]	@ (8000ba4 <HAL_SPI_MspInit+0x128>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	4a26      	ldr	r2, [pc, #152]	@ (8000ba4 <HAL_SPI_MspInit+0x128>)
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b12:	4b24      	ldr	r3, [pc, #144]	@ (8000ba4 <HAL_SPI_MspInit+0x128>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b20      	ldr	r3, [pc, #128]	@ (8000ba4 <HAL_SPI_MspInit+0x128>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a1f      	ldr	r2, [pc, #124]	@ (8000ba4 <HAL_SPI_MspInit+0x128>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <HAL_SPI_MspInit+0x128>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <HAL_SPI_MspInit+0x128>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a18      	ldr	r2, [pc, #96]	@ (8000ba4 <HAL_SPI_MspInit+0x128>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <HAL_SPI_MspInit+0x128>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b56:	230c      	movs	r3, #12
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b66:	2305      	movs	r3, #5
 8000b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480f      	ldr	r0, [pc, #60]	@ (8000bb0 <HAL_SPI_MspInit+0x134>)
 8000b72:	f000 fcc1 	bl	80014f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b88:	2305      	movs	r3, #5
 8000b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	4619      	mov	r1, r3
 8000b92:	4808      	ldr	r0, [pc, #32]	@ (8000bb4 <HAL_SPI_MspInit+0x138>)
 8000b94:	f000 fcb0 	bl	80014f8 <HAL_GPIO_Init>
}
 8000b98:	bf00      	nop
 8000b9a:	3730      	adds	r7, #48	@ 0x30
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40013000 	.word	0x40013000
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	40003800 	.word	0x40003800
 8000bb0:	40020800 	.word	0x40020800
 8000bb4:	40020400 	.word	0x40020400

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c04 <HAL_MspInit+0x4c>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bce:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be2:	4a08      	ldr	r2, [pc, #32]	@ (8000c04 <HAL_MspInit+0x4c>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bea:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <NMI_Handler+0x4>

08000c10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <HardFault_Handler+0x4>

08000c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <MemManage_Handler+0x4>

08000c20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5e:	f000 faf5 	bl	800124c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c6c:	4806      	ldr	r0, [pc, #24]	@ (8000c88 <TIM3_IRQHandler+0x20>)
 8000c6e:	f001 fffd 	bl	8002c6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_GPIO_TogglePin(SYS_LED0_GPIO_Port, SYS_LED0_Pin);
 8000c72:	2101      	movs	r1, #1
 8000c74:	4805      	ldr	r0, [pc, #20]	@ (8000c8c <TIM3_IRQHandler+0x24>)
 8000c76:	f000 fe0c 	bl	8001892 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(SYS_LED1_GPIO_Port, SYS_LED1_Pin);
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	4803      	ldr	r0, [pc, #12]	@ (8000c8c <TIM3_IRQHandler+0x24>)
 8000c7e:	f000 fe08 	bl	8001892 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000210 	.word	0x20000210
 8000c8c:	40020c00 	.word	0x40020c00

08000c90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	e00a      	b.n	8000cb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ca2:	f3af 8000 	nop.w
 8000ca6:	4601      	mov	r1, r0
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	60ba      	str	r2, [r7, #8]
 8000cae:	b2ca      	uxtb	r2, r1
 8000cb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbf0      	blt.n	8000ca2 <_read+0x12>
  }

  return len;
 8000cc0:	687b      	ldr	r3, [r7, #4]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	e009      	b.n	8000cf0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	60ba      	str	r2, [r7, #8]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fd5f 	bl	80007a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbf1      	blt.n	8000cdc <_write+0x12>
  }
  return len;
 8000cf8:	687b      	ldr	r3, [r7, #4]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_close>:

int _close(int file)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <_isatty>:

int _isatty(int file)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d74:	4a14      	ldr	r2, [pc, #80]	@ (8000dc8 <_sbrk+0x5c>)
 8000d76:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <_sbrk+0x60>)
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d80:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <_sbrk+0x64>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	@ (8000dd4 <_sbrk+0x68>)
 8000d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d207      	bcs.n	8000dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d9c:	f003 fc56 	bl	800464c <__errno>
 8000da0:	4603      	mov	r3, r0
 8000da2:	220c      	movs	r2, #12
 8000da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	e009      	b.n	8000dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dac:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db2:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <_sbrk+0x64>)
 8000dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20020000 	.word	0x20020000
 8000dcc:	00000400 	.word	0x00000400
 8000dd0:	200001c4 	.word	0x200001c4
 8000dd4:	20000438 	.word	0x20000438

08000dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <SystemInit+0x20>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000de2:	4a05      	ldr	r2, [pc, #20]	@ (8000df8 <SystemInit+0x20>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e02:	f107 0308 	add.w	r3, r7, #8
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e10:	463b      	mov	r3, r7
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e18:	4b1e      	ldr	r3, [pc, #120]	@ (8000e94 <MX_TIM1_Init+0x98>)
 8000e1a:	4a1f      	ldr	r2, [pc, #124]	@ (8000e98 <MX_TIM1_Init+0x9c>)
 8000e1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e94 <MX_TIM1_Init+0x98>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <MX_TIM1_Init+0x98>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <MX_TIM1_Init+0x98>)
 8000e2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e32:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <MX_TIM1_Init+0x98>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e38:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <MX_TIM1_Init+0x98>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <MX_TIM1_Init+0x98>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e44:	4813      	ldr	r0, [pc, #76]	@ (8000e94 <MX_TIM1_Init+0x98>)
 8000e46:	f001 fde9 	bl	8002a1c <HAL_TIM_Base_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000e50:	f7ff fda2 	bl	8000998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480c      	ldr	r0, [pc, #48]	@ (8000e94 <MX_TIM1_Init+0x98>)
 8000e62:	f001 fff3 	bl	8002e4c <HAL_TIM_ConfigClockSource>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000e6c:	f7ff fd94 	bl	8000998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e70:	2300      	movs	r3, #0
 8000e72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <MX_TIM1_Init+0x98>)
 8000e7e:	f002 fa25 	bl	80032cc <HAL_TIMEx_MasterConfigSynchronization>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e88:	f7ff fd86 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200001c8 	.word	0x200001c8
 8000e98:	40010000 	.word	0x40010000

08000e9c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f30 <MX_TIM3_Init+0x94>)
 8000eba:	4a1e      	ldr	r2, [pc, #120]	@ (8000f34 <MX_TIM3_Init+0x98>)
 8000ebc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f30 <MX_TIM3_Init+0x94>)
 8000ec0:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000ec4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f30 <MX_TIM3_Init+0x94>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000ecc:	4b18      	ldr	r3, [pc, #96]	@ (8000f30 <MX_TIM3_Init+0x94>)
 8000ece:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000ed2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed4:	4b16      	ldr	r3, [pc, #88]	@ (8000f30 <MX_TIM3_Init+0x94>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eda:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <MX_TIM3_Init+0x94>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ee0:	4813      	ldr	r0, [pc, #76]	@ (8000f30 <MX_TIM3_Init+0x94>)
 8000ee2:	f001 fd9b 	bl	8002a1c <HAL_TIM_Base_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000eec:	f7ff fd54 	bl	8000998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	4619      	mov	r1, r3
 8000efc:	480c      	ldr	r0, [pc, #48]	@ (8000f30 <MX_TIM3_Init+0x94>)
 8000efe:	f001 ffa5 	bl	8002e4c <HAL_TIM_ConfigClockSource>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000f08:	f7ff fd46 	bl	8000998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	@ (8000f30 <MX_TIM3_Init+0x94>)
 8000f1a:	f002 f9d7 	bl	80032cc <HAL_TIMEx_MasterConfigSynchronization>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000f24:	f7ff fd38 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000210 	.word	0x20000210
 8000f34:	40000400 	.word	0x40000400

08000f38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a18      	ldr	r2, [pc, #96]	@ (8000fa8 <HAL_TIM_Base_MspInit+0x70>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d10e      	bne.n	8000f68 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <HAL_TIM_Base_MspInit+0x74>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	4a16      	ldr	r2, [pc, #88]	@ (8000fac <HAL_TIM_Base_MspInit+0x74>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f5a:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <HAL_TIM_Base_MspInit+0x74>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f66:	e01a      	b.n	8000f9e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM3)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a10      	ldr	r2, [pc, #64]	@ (8000fb0 <HAL_TIM_Base_MspInit+0x78>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d115      	bne.n	8000f9e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	4b0d      	ldr	r3, [pc, #52]	@ (8000fac <HAL_TIM_Base_MspInit+0x74>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8000fac <HAL_TIM_Base_MspInit+0x74>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <HAL_TIM_Base_MspInit+0x74>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	201d      	movs	r0, #29
 8000f94:	f000 fa79 	bl	800148a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f98:	201d      	movs	r0, #29
 8000f9a:	f000 fa92 	bl	80014c2 <HAL_NVIC_EnableIRQ>
}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40010000 	.word	0x40010000
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40000400 	.word	0x40000400

08000fb4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fba:	4a12      	ldr	r2, [pc, #72]	@ (8001004 <MX_USART1_UART_Init+0x50>)
 8000fbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fbe:	4b10      	ldr	r3, [pc, #64]	@ (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fda:	220c      	movs	r2, #12
 8000fdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fde:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fea:	4805      	ldr	r0, [pc, #20]	@ (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fec:	f002 f9fe 	bl	80033ec <HAL_UART_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ff6:	f7ff fccf 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000258 	.word	0x20000258
 8001004:	40011000 	.word	0x40011000

08001008 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 800100e:	4a12      	ldr	r2, [pc, #72]	@ (8001058 <MX_USART2_UART_Init+0x50>)
 8001010:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 8001014:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001018:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800101a:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001020:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800102c:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 800102e:	220c      	movs	r2, #12
 8001030:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001032:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 8001040:	f002 f9d4 	bl	80033ec <HAL_UART_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800104a:	f7ff fca5 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200002a0 	.word	0x200002a0
 8001058:	40004400 	.word	0x40004400

0800105c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	@ 0x30
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a32      	ldr	r2, [pc, #200]	@ (8001144 <HAL_UART_MspInit+0xe8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d12d      	bne.n	80010da <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
 8001082:	4b31      	ldr	r3, [pc, #196]	@ (8001148 <HAL_UART_MspInit+0xec>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	4a30      	ldr	r2, [pc, #192]	@ (8001148 <HAL_UART_MspInit+0xec>)
 8001088:	f043 0310 	orr.w	r3, r3, #16
 800108c:	6453      	str	r3, [r2, #68]	@ 0x44
 800108e:	4b2e      	ldr	r3, [pc, #184]	@ (8001148 <HAL_UART_MspInit+0xec>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001092:	f003 0310 	and.w	r3, r3, #16
 8001096:	61bb      	str	r3, [r7, #24]
 8001098:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	4b2a      	ldr	r3, [pc, #168]	@ (8001148 <HAL_UART_MspInit+0xec>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a29      	ldr	r2, [pc, #164]	@ (8001148 <HAL_UART_MspInit+0xec>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b27      	ldr	r3, [pc, #156]	@ (8001148 <HAL_UART_MspInit+0xec>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010b6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010c8:	2307      	movs	r3, #7
 80010ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4619      	mov	r1, r3
 80010d2:	481e      	ldr	r0, [pc, #120]	@ (800114c <HAL_UART_MspInit+0xf0>)
 80010d4:	f000 fa10 	bl	80014f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010d8:	e030      	b.n	800113c <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a1c      	ldr	r2, [pc, #112]	@ (8001150 <HAL_UART_MspInit+0xf4>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d12b      	bne.n	800113c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010e4:	2300      	movs	r3, #0
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <HAL_UART_MspInit+0xec>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ec:	4a16      	ldr	r2, [pc, #88]	@ (8001148 <HAL_UART_MspInit+0xec>)
 80010ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f4:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <HAL_UART_MspInit+0xec>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <HAL_UART_MspInit+0xec>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001108:	4a0f      	ldr	r2, [pc, #60]	@ (8001148 <HAL_UART_MspInit+0xec>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001110:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <HAL_UART_MspInit+0xec>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800111c:	230c      	movs	r3, #12
 800111e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800112c:	2307      	movs	r3, #7
 800112e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	4805      	ldr	r0, [pc, #20]	@ (800114c <HAL_UART_MspInit+0xf0>)
 8001138:	f000 f9de 	bl	80014f8 <HAL_GPIO_Init>
}
 800113c:	bf00      	nop
 800113e:	3730      	adds	r7, #48	@ 0x30
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40011000 	.word	0x40011000
 8001148:	40023800 	.word	0x40023800
 800114c:	40020000 	.word	0x40020000
 8001150:	40004400 	.word	0x40004400

08001154 <Reset_Handler>:
 8001154:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800118c <LoopFillZerobss+0xe>
 8001158:	f7ff fe3e 	bl	8000dd8 <SystemInit>
 800115c:	480c      	ldr	r0, [pc, #48]	@ (8001190 <LoopFillZerobss+0x12>)
 800115e:	490d      	ldr	r1, [pc, #52]	@ (8001194 <LoopFillZerobss+0x16>)
 8001160:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <LoopFillZerobss+0x1a>)
 8001162:	2300      	movs	r3, #0
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:
 8001166:	58d4      	ldr	r4, [r2, r3]
 8001168:	50c4      	str	r4, [r0, r3]
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:
 800116c:	18c4      	adds	r4, r0, r3
 800116e:	428c      	cmp	r4, r1
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
 8001172:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <LoopFillZerobss+0x1e>)
 8001174:	4c0a      	ldr	r4, [pc, #40]	@ (80011a0 <LoopFillZerobss+0x22>)
 8001176:	2300      	movs	r3, #0
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:
 800117e:	42a2      	cmp	r2, r4
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>
 8001182:	f003 fa69 	bl	8004658 <__libc_init_array>
 8001186:	f7ff fb21 	bl	80007cc <main>
 800118a:	4770      	bx	lr
 800118c:	20020000 	.word	0x20020000
 8001190:	20000000 	.word	0x20000000
 8001194:	20000078 	.word	0x20000078
 8001198:	08005178 	.word	0x08005178
 800119c:	20000078 	.word	0x20000078
 80011a0:	20000438 	.word	0x20000438

080011a4 <ADC_IRQHandler>:
 80011a4:	e7fe      	b.n	80011a4 <ADC_IRQHandler>
	...

080011a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011ac:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <HAL_Init+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0d      	ldr	r2, [pc, #52]	@ (80011e8 <HAL_Init+0x40>)
 80011b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011b8:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <HAL_Init+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0a      	ldr	r2, [pc, #40]	@ (80011e8 <HAL_Init+0x40>)
 80011be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c4:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <HAL_Init+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a07      	ldr	r2, [pc, #28]	@ (80011e8 <HAL_Init+0x40>)
 80011ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f000 f94f 	bl	8001474 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d6:	200f      	movs	r0, #15
 80011d8:	f000 f808 	bl	80011ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011dc:	f7ff fcec 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023c00 	.word	0x40023c00

080011ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <HAL_InitTick+0x54>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <HAL_InitTick+0x58>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001202:	fbb3 f3f1 	udiv	r3, r3, r1
 8001206:	fbb2 f3f3 	udiv	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f967 	bl	80014de <HAL_SYSTICK_Config>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e00e      	b.n	8001238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b0f      	cmp	r3, #15
 800121e:	d80a      	bhi.n	8001236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001220:	2200      	movs	r2, #0
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f000 f92f 	bl	800148a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800122c:	4a06      	ldr	r2, [pc, #24]	@ (8001248 <HAL_InitTick+0x5c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e000      	b.n	8001238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000010 	.word	0x20000010
 8001244:	20000018 	.word	0x20000018
 8001248:	20000014 	.word	0x20000014

0800124c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001250:	4b06      	ldr	r3, [pc, #24]	@ (800126c <HAL_IncTick+0x20>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <HAL_IncTick+0x24>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a04      	ldr	r2, [pc, #16]	@ (8001270 <HAL_IncTick+0x24>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000018 	.word	0x20000018
 8001270:	200002e8 	.word	0x200002e8

08001274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b03      	ldr	r3, [pc, #12]	@ (8001288 <HAL_GetTick+0x14>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	200002e8 	.word	0x200002e8

0800128c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff ffee 	bl	8001274 <HAL_GetTick>
 8001298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a4:	d005      	beq.n	80012b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a6:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <HAL_Delay+0x44>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012b2:	bf00      	nop
 80012b4:	f7ff ffde 	bl	8001274 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d8f7      	bhi.n	80012b4 <HAL_Delay+0x28>
  {
  }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000018 	.word	0x20000018

080012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	@ (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	@ (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	db0b      	blt.n	8001362 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 021f 	and.w	r2, r3, #31
 8001350:	4907      	ldr	r1, [pc, #28]	@ (8001370 <__NVIC_EnableIRQ+0x38>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	2001      	movs	r0, #1
 800135a:	fa00 f202 	lsl.w	r2, r0, r2
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	@ (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	@ (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	@ 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f1c3 0307 	rsb	r3, r3, #7
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	bf28      	it	cs
 80013e6:	2304      	movcs	r3, #4
 80013e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3304      	adds	r3, #4
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d902      	bls.n	80013f8 <NVIC_EncodePriority+0x30>
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3b03      	subs	r3, #3
 80013f6:	e000      	b.n	80013fa <NVIC_EncodePriority+0x32>
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	401a      	ands	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43d9      	mvns	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	4313      	orrs	r3, r2
         );
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	@ 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001440:	d301      	bcc.n	8001446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001442:	2301      	movs	r3, #1
 8001444:	e00f      	b.n	8001466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001446:	4a0a      	ldr	r2, [pc, #40]	@ (8001470 <SysTick_Config+0x40>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144e:	210f      	movs	r1, #15
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f7ff ff8e 	bl	8001374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001458:	4b05      	ldr	r3, [pc, #20]	@ (8001470 <SysTick_Config+0x40>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145e:	4b04      	ldr	r3, [pc, #16]	@ (8001470 <SysTick_Config+0x40>)
 8001460:	2207      	movs	r2, #7
 8001462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	e000e010 	.word	0xe000e010

08001474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff29 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800149c:	f7ff ff3e 	bl	800131c <__NVIC_GetPriorityGrouping>
 80014a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	6978      	ldr	r0, [r7, #20]
 80014a8:	f7ff ff8e 	bl	80013c8 <NVIC_EncodePriority>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff5d 	bl	8001374 <__NVIC_SetPriority>
}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff31 	bl	8001338 <__NVIC_EnableIRQ>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ffa2 	bl	8001430 <SysTick_Config>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	@ 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	e16b      	b.n	80017ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001514:	2201      	movs	r2, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	429a      	cmp	r2, r3
 800152e:	f040 815a 	bne.w	80017e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	2b01      	cmp	r3, #1
 800153c:	d005      	beq.n	800154a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001546:	2b02      	cmp	r3, #2
 8001548:	d130      	bne.n	80015ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	2203      	movs	r2, #3
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001580:	2201      	movs	r2, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	091b      	lsrs	r3, r3, #4
 8001596:	f003 0201 	and.w	r2, r3, #1
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d017      	beq.n	80015e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d123      	bne.n	800163c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	08da      	lsrs	r2, r3, #3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3208      	adds	r2, #8
 80015fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	220f      	movs	r2, #15
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	691a      	ldr	r2, [r3, #16]
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	08da      	lsrs	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3208      	adds	r2, #8
 8001636:	69b9      	ldr	r1, [r7, #24]
 8001638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	2203      	movs	r2, #3
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0203 	and.w	r2, r3, #3
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80b4 	beq.w	80017e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b60      	ldr	r3, [pc, #384]	@ (8001804 <HAL_GPIO_Init+0x30c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001686:	4a5f      	ldr	r2, [pc, #380]	@ (8001804 <HAL_GPIO_Init+0x30c>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800168c:	6453      	str	r3, [r2, #68]	@ 0x44
 800168e:	4b5d      	ldr	r3, [pc, #372]	@ (8001804 <HAL_GPIO_Init+0x30c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169a:	4a5b      	ldr	r2, [pc, #364]	@ (8001808 <HAL_GPIO_Init+0x310>)
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	3302      	adds	r3, #2
 80016a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	220f      	movs	r2, #15
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a52      	ldr	r2, [pc, #328]	@ (800180c <HAL_GPIO_Init+0x314>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d02b      	beq.n	800171e <HAL_GPIO_Init+0x226>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a51      	ldr	r2, [pc, #324]	@ (8001810 <HAL_GPIO_Init+0x318>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d025      	beq.n	800171a <HAL_GPIO_Init+0x222>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a50      	ldr	r2, [pc, #320]	@ (8001814 <HAL_GPIO_Init+0x31c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d01f      	beq.n	8001716 <HAL_GPIO_Init+0x21e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001818 <HAL_GPIO_Init+0x320>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d019      	beq.n	8001712 <HAL_GPIO_Init+0x21a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4e      	ldr	r2, [pc, #312]	@ (800181c <HAL_GPIO_Init+0x324>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d013      	beq.n	800170e <HAL_GPIO_Init+0x216>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4d      	ldr	r2, [pc, #308]	@ (8001820 <HAL_GPIO_Init+0x328>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d00d      	beq.n	800170a <HAL_GPIO_Init+0x212>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001824 <HAL_GPIO_Init+0x32c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d007      	beq.n	8001706 <HAL_GPIO_Init+0x20e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001828 <HAL_GPIO_Init+0x330>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d101      	bne.n	8001702 <HAL_GPIO_Init+0x20a>
 80016fe:	2307      	movs	r3, #7
 8001700:	e00e      	b.n	8001720 <HAL_GPIO_Init+0x228>
 8001702:	2308      	movs	r3, #8
 8001704:	e00c      	b.n	8001720 <HAL_GPIO_Init+0x228>
 8001706:	2306      	movs	r3, #6
 8001708:	e00a      	b.n	8001720 <HAL_GPIO_Init+0x228>
 800170a:	2305      	movs	r3, #5
 800170c:	e008      	b.n	8001720 <HAL_GPIO_Init+0x228>
 800170e:	2304      	movs	r3, #4
 8001710:	e006      	b.n	8001720 <HAL_GPIO_Init+0x228>
 8001712:	2303      	movs	r3, #3
 8001714:	e004      	b.n	8001720 <HAL_GPIO_Init+0x228>
 8001716:	2302      	movs	r3, #2
 8001718:	e002      	b.n	8001720 <HAL_GPIO_Init+0x228>
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <HAL_GPIO_Init+0x228>
 800171e:	2300      	movs	r3, #0
 8001720:	69fa      	ldr	r2, [r7, #28]
 8001722:	f002 0203 	and.w	r2, r2, #3
 8001726:	0092      	lsls	r2, r2, #2
 8001728:	4093      	lsls	r3, r2
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001730:	4935      	ldr	r1, [pc, #212]	@ (8001808 <HAL_GPIO_Init+0x310>)
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	089b      	lsrs	r3, r3, #2
 8001736:	3302      	adds	r3, #2
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800173e:	4b3b      	ldr	r3, [pc, #236]	@ (800182c <HAL_GPIO_Init+0x334>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001762:	4a32      	ldr	r2, [pc, #200]	@ (800182c <HAL_GPIO_Init+0x334>)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001768:	4b30      	ldr	r3, [pc, #192]	@ (800182c <HAL_GPIO_Init+0x334>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800178c:	4a27      	ldr	r2, [pc, #156]	@ (800182c <HAL_GPIO_Init+0x334>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001792:	4b26      	ldr	r3, [pc, #152]	@ (800182c <HAL_GPIO_Init+0x334>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	43db      	mvns	r3, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4013      	ands	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017b6:	4a1d      	ldr	r2, [pc, #116]	@ (800182c <HAL_GPIO_Init+0x334>)
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017bc:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <HAL_GPIO_Init+0x334>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017e0:	4a12      	ldr	r2, [pc, #72]	@ (800182c <HAL_GPIO_Init+0x334>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3301      	adds	r3, #1
 80017ea:	61fb      	str	r3, [r7, #28]
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	2b0f      	cmp	r3, #15
 80017f0:	f67f ae90 	bls.w	8001514 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	3724      	adds	r7, #36	@ 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	40013800 	.word	0x40013800
 800180c:	40020000 	.word	0x40020000
 8001810:	40020400 	.word	0x40020400
 8001814:	40020800 	.word	0x40020800
 8001818:	40020c00 	.word	0x40020c00
 800181c:	40021000 	.word	0x40021000
 8001820:	40021400 	.word	0x40021400
 8001824:	40021800 	.word	0x40021800
 8001828:	40021c00 	.word	0x40021c00
 800182c:	40013c00 	.word	0x40013c00

08001830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	e001      	b.n	8001852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001852:	7bfb      	ldrb	r3, [r7, #15]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
 800186c:	4613      	mov	r3, r2
 800186e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001870:	787b      	ldrb	r3, [r7, #1]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800187c:	e003      	b.n	8001886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	041a      	lsls	r2, r3, #16
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	619a      	str	r2, [r3, #24]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001892:	b480      	push	{r7}
 8001894:	b085      	sub	sp, #20
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018a4:	887a      	ldrh	r2, [r7, #2]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4013      	ands	r3, r2
 80018aa:	041a      	lsls	r2, r3, #16
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	887b      	ldrh	r3, [r7, #2]
 80018b2:	400b      	ands	r3, r1
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	619a      	str	r2, [r3, #24]
}
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e12b      	b.n	8001b32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d106      	bne.n	80018f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7fe ff12 	bl	8000718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2224      	movs	r2, #36	@ 0x24
 80018f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0201 	bic.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800191a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800192a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800192c:	f000 fd40 	bl	80023b0 <HAL_RCC_GetPCLK1Freq>
 8001930:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	4a81      	ldr	r2, [pc, #516]	@ (8001b3c <HAL_I2C_Init+0x274>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d807      	bhi.n	800194c <HAL_I2C_Init+0x84>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4a80      	ldr	r2, [pc, #512]	@ (8001b40 <HAL_I2C_Init+0x278>)
 8001940:	4293      	cmp	r3, r2
 8001942:	bf94      	ite	ls
 8001944:	2301      	movls	r3, #1
 8001946:	2300      	movhi	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	e006      	b.n	800195a <HAL_I2C_Init+0x92>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4a7d      	ldr	r2, [pc, #500]	@ (8001b44 <HAL_I2C_Init+0x27c>)
 8001950:	4293      	cmp	r3, r2
 8001952:	bf94      	ite	ls
 8001954:	2301      	movls	r3, #1
 8001956:	2300      	movhi	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e0e7      	b.n	8001b32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4a78      	ldr	r2, [pc, #480]	@ (8001b48 <HAL_I2C_Init+0x280>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0c9b      	lsrs	r3, r3, #18
 800196c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	430a      	orrs	r2, r1
 8001980:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4a6a      	ldr	r2, [pc, #424]	@ (8001b3c <HAL_I2C_Init+0x274>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d802      	bhi.n	800199c <HAL_I2C_Init+0xd4>
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	3301      	adds	r3, #1
 800199a:	e009      	b.n	80019b0 <HAL_I2C_Init+0xe8>
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019a2:	fb02 f303 	mul.w	r3, r2, r3
 80019a6:	4a69      	ldr	r2, [pc, #420]	@ (8001b4c <HAL_I2C_Init+0x284>)
 80019a8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ac:	099b      	lsrs	r3, r3, #6
 80019ae:	3301      	adds	r3, #1
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	430b      	orrs	r3, r1
 80019b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80019c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	495c      	ldr	r1, [pc, #368]	@ (8001b3c <HAL_I2C_Init+0x274>)
 80019cc:	428b      	cmp	r3, r1
 80019ce:	d819      	bhi.n	8001a04 <HAL_I2C_Init+0x13c>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	1e59      	subs	r1, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	fbb1 f3f3 	udiv	r3, r1, r3
 80019de:	1c59      	adds	r1, r3, #1
 80019e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80019e4:	400b      	ands	r3, r1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00a      	beq.n	8001a00 <HAL_I2C_Init+0x138>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1e59      	subs	r1, r3, #1
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80019f8:	3301      	adds	r3, #1
 80019fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019fe:	e051      	b.n	8001aa4 <HAL_I2C_Init+0x1dc>
 8001a00:	2304      	movs	r3, #4
 8001a02:	e04f      	b.n	8001aa4 <HAL_I2C_Init+0x1dc>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d111      	bne.n	8001a30 <HAL_I2C_Init+0x168>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1e58      	subs	r0, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6859      	ldr	r1, [r3, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	440b      	add	r3, r1
 8001a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a1e:	3301      	adds	r3, #1
 8001a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf0c      	ite	eq
 8001a28:	2301      	moveq	r3, #1
 8001a2a:	2300      	movne	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	e012      	b.n	8001a56 <HAL_I2C_Init+0x18e>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1e58      	subs	r0, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6859      	ldr	r1, [r3, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	0099      	lsls	r1, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a46:	3301      	adds	r3, #1
 8001a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bf0c      	ite	eq
 8001a50:	2301      	moveq	r3, #1
 8001a52:	2300      	movne	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_Init+0x196>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e022      	b.n	8001aa4 <HAL_I2C_Init+0x1dc>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10e      	bne.n	8001a84 <HAL_I2C_Init+0x1bc>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1e58      	subs	r0, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6859      	ldr	r1, [r3, #4]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	440b      	add	r3, r1
 8001a74:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a82:	e00f      	b.n	8001aa4 <HAL_I2C_Init+0x1dc>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1e58      	subs	r0, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6859      	ldr	r1, [r3, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	0099      	lsls	r1, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	6809      	ldr	r1, [r1, #0]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69da      	ldr	r2, [r3, #28]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001ad2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6911      	ldr	r1, [r2, #16]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	68d2      	ldr	r2, [r2, #12]
 8001ade:	4311      	orrs	r1, r2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	000186a0 	.word	0x000186a0
 8001b40:	001e847f 	.word	0x001e847f
 8001b44:	003d08ff 	.word	0x003d08ff
 8001b48:	431bde83 	.word	0x431bde83
 8001b4c:	10624dd3 	.word	0x10624dd3

08001b50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e267      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d075      	beq.n	8001c5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b6e:	4b88      	ldr	r3, [pc, #544]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d00c      	beq.n	8001b94 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b7a:	4b85      	ldr	r3, [pc, #532]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d112      	bne.n	8001bac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b86:	4b82      	ldr	r3, [pc, #520]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b92:	d10b      	bne.n	8001bac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b94:	4b7e      	ldr	r3, [pc, #504]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d05b      	beq.n	8001c58 <HAL_RCC_OscConfig+0x108>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d157      	bne.n	8001c58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e242      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bb4:	d106      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x74>
 8001bb6:	4b76      	ldr	r3, [pc, #472]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a75      	ldr	r2, [pc, #468]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e01d      	b.n	8001c00 <HAL_RCC_OscConfig+0xb0>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x98>
 8001bce:	4b70      	ldr	r3, [pc, #448]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a6f      	ldr	r2, [pc, #444]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b6d      	ldr	r3, [pc, #436]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a6c      	ldr	r2, [pc, #432]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e00b      	b.n	8001c00 <HAL_RCC_OscConfig+0xb0>
 8001be8:	4b69      	ldr	r3, [pc, #420]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a68      	ldr	r2, [pc, #416]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b66      	ldr	r3, [pc, #408]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a65      	ldr	r2, [pc, #404]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d013      	beq.n	8001c30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7ff fb34 	bl	8001274 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff fb30 	bl	8001274 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	@ 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e207      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	4b5b      	ldr	r3, [pc, #364]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0xc0>
 8001c2e:	e014      	b.n	8001c5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff fb20 	bl	8001274 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff fb1c 	bl	8001274 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	@ 0x64
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e1f3      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4a:	4b51      	ldr	r3, [pc, #324]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0xe8>
 8001c56:	e000      	b.n	8001c5a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d063      	beq.n	8001d2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c66:	4b4a      	ldr	r3, [pc, #296]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c72:	4b47      	ldr	r3, [pc, #284]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d11c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c7e:	4b44      	ldr	r3, [pc, #272]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d116      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8a:	4b41      	ldr	r3, [pc, #260]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d005      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x152>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d001      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e1c7      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4937      	ldr	r1, [pc, #220]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb6:	e03a      	b.n	8001d2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d020      	beq.n	8001d02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc0:	4b34      	ldr	r3, [pc, #208]	@ (8001d94 <HAL_RCC_OscConfig+0x244>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc6:	f7ff fad5 	bl	8001274 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cce:	f7ff fad1 	bl	8001274 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e1a8      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cec:	4b28      	ldr	r3, [pc, #160]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4925      	ldr	r1, [pc, #148]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]
 8001d00:	e015      	b.n	8001d2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d02:	4b24      	ldr	r3, [pc, #144]	@ (8001d94 <HAL_RCC_OscConfig+0x244>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff fab4 	bl	8001274 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d10:	f7ff fab0 	bl	8001274 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e187      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d22:	4b1b      	ldr	r3, [pc, #108]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d036      	beq.n	8001da8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d016      	beq.n	8001d70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <HAL_RCC_OscConfig+0x248>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d48:	f7ff fa94 	bl	8001274 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d50:	f7ff fa90 	bl	8001274 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e167      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d62:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x200>
 8001d6e:	e01b      	b.n	8001da8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d70:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <HAL_RCC_OscConfig+0x248>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d76:	f7ff fa7d 	bl	8001274 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7c:	e00e      	b.n	8001d9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d7e:	f7ff fa79 	bl	8001274 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d907      	bls.n	8001d9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e150      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
 8001d90:	40023800 	.word	0x40023800
 8001d94:	42470000 	.word	0x42470000
 8001d98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9c:	4b88      	ldr	r3, [pc, #544]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001d9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1ea      	bne.n	8001d7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 8097 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db6:	2300      	movs	r3, #0
 8001db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dba:	4b81      	ldr	r3, [pc, #516]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10f      	bne.n	8001de6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b7d      	ldr	r3, [pc, #500]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	4a7c      	ldr	r2, [pc, #496]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001dd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd6:	4b7a      	ldr	r3, [pc, #488]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de2:	2301      	movs	r3, #1
 8001de4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de6:	4b77      	ldr	r3, [pc, #476]	@ (8001fc4 <HAL_RCC_OscConfig+0x474>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d118      	bne.n	8001e24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001df2:	4b74      	ldr	r3, [pc, #464]	@ (8001fc4 <HAL_RCC_OscConfig+0x474>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a73      	ldr	r2, [pc, #460]	@ (8001fc4 <HAL_RCC_OscConfig+0x474>)
 8001df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfe:	f7ff fa39 	bl	8001274 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e06:	f7ff fa35 	bl	8001274 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e10c      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	4b6a      	ldr	r3, [pc, #424]	@ (8001fc4 <HAL_RCC_OscConfig+0x474>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d106      	bne.n	8001e3a <HAL_RCC_OscConfig+0x2ea>
 8001e2c:	4b64      	ldr	r3, [pc, #400]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e30:	4a63      	ldr	r2, [pc, #396]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e38:	e01c      	b.n	8001e74 <HAL_RCC_OscConfig+0x324>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x30c>
 8001e42:	4b5f      	ldr	r3, [pc, #380]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e46:	4a5e      	ldr	r2, [pc, #376]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001e48:	f043 0304 	orr.w	r3, r3, #4
 8001e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e4e:	4b5c      	ldr	r3, [pc, #368]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e52:	4a5b      	ldr	r2, [pc, #364]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e5a:	e00b      	b.n	8001e74 <HAL_RCC_OscConfig+0x324>
 8001e5c:	4b58      	ldr	r3, [pc, #352]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e60:	4a57      	ldr	r2, [pc, #348]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001e62:	f023 0301 	bic.w	r3, r3, #1
 8001e66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e68:	4b55      	ldr	r3, [pc, #340]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6c:	4a54      	ldr	r2, [pc, #336]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001e6e:	f023 0304 	bic.w	r3, r3, #4
 8001e72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d015      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7c:	f7ff f9fa 	bl	8001274 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e82:	e00a      	b.n	8001e9a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e84:	f7ff f9f6 	bl	8001274 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e0cb      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9a:	4b49      	ldr	r3, [pc, #292]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0ee      	beq.n	8001e84 <HAL_RCC_OscConfig+0x334>
 8001ea6:	e014      	b.n	8001ed2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea8:	f7ff f9e4 	bl	8001274 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb0:	f7ff f9e0 	bl	8001274 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e0b5      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1ee      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ed2:	7dfb      	ldrb	r3, [r7, #23]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d105      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed8:	4b39      	ldr	r3, [pc, #228]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001edc:	4a38      	ldr	r2, [pc, #224]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001ede:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ee2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80a1 	beq.w	8002030 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eee:	4b34      	ldr	r3, [pc, #208]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d05c      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d141      	bne.n	8001f86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f02:	4b31      	ldr	r3, [pc, #196]	@ (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7ff f9b4 	bl	8001274 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff f9b0 	bl	8001274 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e087      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f22:	4b27      	ldr	r3, [pc, #156]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69da      	ldr	r2, [r3, #28]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3c:	019b      	lsls	r3, r3, #6
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f44:	085b      	lsrs	r3, r3, #1
 8001f46:	3b01      	subs	r3, #1
 8001f48:	041b      	lsls	r3, r3, #16
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f50:	061b      	lsls	r3, r3, #24
 8001f52:	491b      	ldr	r1, [pc, #108]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f58:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5e:	f7ff f989 	bl	8001274 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f66:	f7ff f985 	bl	8001274 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e05c      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f78:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x416>
 8001f84:	e054      	b.n	8002030 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f86:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7ff f972 	bl	8001274 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f94:	f7ff f96e 	bl	8001274 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e045      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa6:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0x444>
 8001fb2:	e03d      	b.n	8002030 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d107      	bne.n	8001fcc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e038      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40007000 	.word	0x40007000
 8001fc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800203c <HAL_RCC_OscConfig+0x4ec>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d028      	beq.n	800202c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d121      	bne.n	800202c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d11a      	bne.n	800202c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002002:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002004:	4293      	cmp	r3, r2
 8002006:	d111      	bne.n	800202c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002012:	085b      	lsrs	r3, r3, #1
 8002014:	3b01      	subs	r3, #1
 8002016:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002018:	429a      	cmp	r2, r3
 800201a:	d107      	bne.n	800202c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002026:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002028:	429a      	cmp	r2, r3
 800202a:	d001      	beq.n	8002030 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800

08002040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0cc      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002054:	4b68      	ldr	r3, [pc, #416]	@ (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d90c      	bls.n	800207c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002062:	4b65      	ldr	r3, [pc, #404]	@ (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206a:	4b63      	ldr	r3, [pc, #396]	@ (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0b8      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d020      	beq.n	80020ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002094:	4b59      	ldr	r3, [pc, #356]	@ (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	4a58      	ldr	r2, [pc, #352]	@ (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800209e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020ac:	4b53      	ldr	r3, [pc, #332]	@ (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4a52      	ldr	r2, [pc, #328]	@ (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b8:	4b50      	ldr	r3, [pc, #320]	@ (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	494d      	ldr	r1, [pc, #308]	@ (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d044      	beq.n	8002160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020de:	4b47      	ldr	r3, [pc, #284]	@ (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d119      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e07f      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d003      	beq.n	80020fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fe:	4b3f      	ldr	r3, [pc, #252]	@ (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d109      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e06f      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210e:	4b3b      	ldr	r3, [pc, #236]	@ (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e067      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211e:	4b37      	ldr	r3, [pc, #220]	@ (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f023 0203 	bic.w	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4934      	ldr	r1, [pc, #208]	@ (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	4313      	orrs	r3, r2
 800212e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002130:	f7ff f8a0 	bl	8001274 <HAL_GetTick>
 8002134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	e00a      	b.n	800214e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002138:	f7ff f89c 	bl	8001274 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e04f      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	4b2b      	ldr	r3, [pc, #172]	@ (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 020c 	and.w	r2, r3, #12
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	429a      	cmp	r2, r3
 800215e:	d1eb      	bne.n	8002138 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002160:	4b25      	ldr	r3, [pc, #148]	@ (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d20c      	bcs.n	8002188 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b22      	ldr	r3, [pc, #136]	@ (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	4b20      	ldr	r3, [pc, #128]	@ (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e032      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002194:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4916      	ldr	r1, [pc, #88]	@ (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021b2:	4b12      	ldr	r3, [pc, #72]	@ (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	490e      	ldr	r1, [pc, #56]	@ (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021c6:	f000 f821 	bl	800220c <HAL_RCC_GetSysClockFreq>
 80021ca:	4602      	mov	r2, r0
 80021cc:	4b0b      	ldr	r3, [pc, #44]	@ (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	490a      	ldr	r1, [pc, #40]	@ (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	5ccb      	ldrb	r3, [r1, r3]
 80021da:	fa22 f303 	lsr.w	r3, r2, r3
 80021de:	4a09      	ldr	r2, [pc, #36]	@ (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021e2:	4b09      	ldr	r3, [pc, #36]	@ (8002208 <HAL_RCC_ClockConfig+0x1c8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff f800 	bl	80011ec <HAL_InitTick>

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023c00 	.word	0x40023c00
 80021fc:	40023800 	.word	0x40023800
 8002200:	08005108 	.word	0x08005108
 8002204:	20000010 	.word	0x20000010
 8002208:	20000014 	.word	0x20000014

0800220c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800220c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002210:	b090      	sub	sp, #64	@ 0x40
 8002212:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002224:	4b59      	ldr	r3, [pc, #356]	@ (800238c <HAL_RCC_GetSysClockFreq+0x180>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b08      	cmp	r3, #8
 800222e:	d00d      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0x40>
 8002230:	2b08      	cmp	r3, #8
 8002232:	f200 80a1 	bhi.w	8002378 <HAL_RCC_GetSysClockFreq+0x16c>
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0x34>
 800223a:	2b04      	cmp	r3, #4
 800223c:	d003      	beq.n	8002246 <HAL_RCC_GetSysClockFreq+0x3a>
 800223e:	e09b      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002240:	4b53      	ldr	r3, [pc, #332]	@ (8002390 <HAL_RCC_GetSysClockFreq+0x184>)
 8002242:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002244:	e09b      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002246:	4b53      	ldr	r3, [pc, #332]	@ (8002394 <HAL_RCC_GetSysClockFreq+0x188>)
 8002248:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800224a:	e098      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800224c:	4b4f      	ldr	r3, [pc, #316]	@ (800238c <HAL_RCC_GetSysClockFreq+0x180>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002254:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002256:	4b4d      	ldr	r3, [pc, #308]	@ (800238c <HAL_RCC_GetSysClockFreq+0x180>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d028      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002262:	4b4a      	ldr	r3, [pc, #296]	@ (800238c <HAL_RCC_GetSysClockFreq+0x180>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	099b      	lsrs	r3, r3, #6
 8002268:	2200      	movs	r2, #0
 800226a:	623b      	str	r3, [r7, #32]
 800226c:	627a      	str	r2, [r7, #36]	@ 0x24
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002274:	2100      	movs	r1, #0
 8002276:	4b47      	ldr	r3, [pc, #284]	@ (8002394 <HAL_RCC_GetSysClockFreq+0x188>)
 8002278:	fb03 f201 	mul.w	r2, r3, r1
 800227c:	2300      	movs	r3, #0
 800227e:	fb00 f303 	mul.w	r3, r0, r3
 8002282:	4413      	add	r3, r2
 8002284:	4a43      	ldr	r2, [pc, #268]	@ (8002394 <HAL_RCC_GetSysClockFreq+0x188>)
 8002286:	fba0 1202 	umull	r1, r2, r0, r2
 800228a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800228c:	460a      	mov	r2, r1
 800228e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002290:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002292:	4413      	add	r3, r2
 8002294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002298:	2200      	movs	r2, #0
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	61fa      	str	r2, [r7, #28]
 800229e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80022a6:	f7fd ffe3 	bl	8000270 <__aeabi_uldivmod>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4613      	mov	r3, r2
 80022b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022b2:	e053      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b4:	4b35      	ldr	r3, [pc, #212]	@ (800238c <HAL_RCC_GetSysClockFreq+0x180>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	099b      	lsrs	r3, r3, #6
 80022ba:	2200      	movs	r2, #0
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	617a      	str	r2, [r7, #20]
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80022c6:	f04f 0b00 	mov.w	fp, #0
 80022ca:	4652      	mov	r2, sl
 80022cc:	465b      	mov	r3, fp
 80022ce:	f04f 0000 	mov.w	r0, #0
 80022d2:	f04f 0100 	mov.w	r1, #0
 80022d6:	0159      	lsls	r1, r3, #5
 80022d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022dc:	0150      	lsls	r0, r2, #5
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	ebb2 080a 	subs.w	r8, r2, sl
 80022e6:	eb63 090b 	sbc.w	r9, r3, fp
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022fe:	ebb2 0408 	subs.w	r4, r2, r8
 8002302:	eb63 0509 	sbc.w	r5, r3, r9
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	00eb      	lsls	r3, r5, #3
 8002310:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002314:	00e2      	lsls	r2, r4, #3
 8002316:	4614      	mov	r4, r2
 8002318:	461d      	mov	r5, r3
 800231a:	eb14 030a 	adds.w	r3, r4, sl
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	eb45 030b 	adc.w	r3, r5, fp
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002332:	4629      	mov	r1, r5
 8002334:	028b      	lsls	r3, r1, #10
 8002336:	4621      	mov	r1, r4
 8002338:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800233c:	4621      	mov	r1, r4
 800233e:	028a      	lsls	r2, r1, #10
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002346:	2200      	movs	r2, #0
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	60fa      	str	r2, [r7, #12]
 800234c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002350:	f7fd ff8e 	bl	8000270 <__aeabi_uldivmod>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4613      	mov	r3, r2
 800235a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800235c:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <HAL_RCC_GetSysClockFreq+0x180>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	0c1b      	lsrs	r3, r3, #16
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	3301      	adds	r3, #1
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800236c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800236e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002370:	fbb2 f3f3 	udiv	r3, r2, r3
 8002374:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002376:	e002      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002378:	4b05      	ldr	r3, [pc, #20]	@ (8002390 <HAL_RCC_GetSysClockFreq+0x184>)
 800237a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800237c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002380:	4618      	mov	r0, r3
 8002382:	3740      	adds	r7, #64	@ 0x40
 8002384:	46bd      	mov	sp, r7
 8002386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800
 8002390:	00f42400 	.word	0x00f42400
 8002394:	017d7840 	.word	0x017d7840

08002398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800239c:	4b03      	ldr	r3, [pc, #12]	@ (80023ac <HAL_RCC_GetHCLKFreq+0x14>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	20000010 	.word	0x20000010

080023b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023b4:	f7ff fff0 	bl	8002398 <HAL_RCC_GetHCLKFreq>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4b05      	ldr	r3, [pc, #20]	@ (80023d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	0a9b      	lsrs	r3, r3, #10
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	4903      	ldr	r1, [pc, #12]	@ (80023d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c6:	5ccb      	ldrb	r3, [r1, r3]
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40023800 	.word	0x40023800
 80023d4:	08005118 	.word	0x08005118

080023d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023dc:	f7ff ffdc 	bl	8002398 <HAL_RCC_GetHCLKFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b05      	ldr	r3, [pc, #20]	@ (80023f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	0b5b      	lsrs	r3, r3, #13
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	4903      	ldr	r1, [pc, #12]	@ (80023fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ee:	5ccb      	ldrb	r3, [r1, r3]
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40023800 	.word	0x40023800
 80023fc:	08005118 	.word	0x08005118

08002400 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e07b      	b.n	800250a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	2b00      	cmp	r3, #0
 8002418:	d108      	bne.n	800242c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002422:	d009      	beq.n	8002438 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	61da      	str	r2, [r3, #28]
 800242a:	e005      	b.n	8002438 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7fe fb12 	bl	8000a7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800246e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024bc:	ea42 0103 	orr.w	r1, r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	0c1b      	lsrs	r3, r3, #16
 80024d6:	f003 0104 	and.w	r1, r3, #4
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024de:	f003 0210 	and.w	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69da      	ldr	r2, [r3, #28]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b08a      	sub	sp, #40	@ 0x28
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002520:	2301      	movs	r3, #1
 8002522:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002524:	f7fe fea6 	bl	8001274 <HAL_GetTick>
 8002528:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002530:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002538:	887b      	ldrh	r3, [r7, #2]
 800253a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800253c:	7ffb      	ldrb	r3, [r7, #31]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d00c      	beq.n	800255c <HAL_SPI_TransmitReceive+0x4a>
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002548:	d106      	bne.n	8002558 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d102      	bne.n	8002558 <HAL_SPI_TransmitReceive+0x46>
 8002552:	7ffb      	ldrb	r3, [r7, #31]
 8002554:	2b04      	cmp	r3, #4
 8002556:	d001      	beq.n	800255c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002558:	2302      	movs	r3, #2
 800255a:	e17f      	b.n	800285c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_SPI_TransmitReceive+0x5c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <HAL_SPI_TransmitReceive+0x5c>
 8002568:	887b      	ldrh	r3, [r7, #2]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e174      	b.n	800285c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_SPI_TransmitReceive+0x6e>
 800257c:	2302      	movs	r3, #2
 800257e:	e16d      	b.n	800285c <HAL_SPI_TransmitReceive+0x34a>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b04      	cmp	r3, #4
 8002592:	d003      	beq.n	800259c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2205      	movs	r2, #5
 8002598:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	887a      	ldrh	r2, [r7, #2]
 80025ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	887a      	ldrh	r2, [r7, #2]
 80025b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	887a      	ldrh	r2, [r7, #2]
 80025be:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025dc:	2b40      	cmp	r3, #64	@ 0x40
 80025de:	d007      	beq.n	80025f0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025f8:	d17e      	bne.n	80026f8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <HAL_SPI_TransmitReceive+0xf6>
 8002602:	8afb      	ldrh	r3, [r7, #22]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d16c      	bne.n	80026e2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260c:	881a      	ldrh	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002618:	1c9a      	adds	r2, r3, #2
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800262c:	e059      	b.n	80026e2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b02      	cmp	r3, #2
 800263a:	d11b      	bne.n	8002674 <HAL_SPI_TransmitReceive+0x162>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d016      	beq.n	8002674 <HAL_SPI_TransmitReceive+0x162>
 8002646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002648:	2b01      	cmp	r3, #1
 800264a:	d113      	bne.n	8002674 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002650:	881a      	ldrh	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265c:	1c9a      	adds	r2, r3, #2
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b01      	cmp	r3, #1
 8002680:	d119      	bne.n	80026b6 <HAL_SPI_TransmitReceive+0x1a4>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002686:	b29b      	uxth	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d014      	beq.n	80026b6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002696:	b292      	uxth	r2, r2
 8002698:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269e:	1c9a      	adds	r2, r3, #2
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026b2:	2301      	movs	r3, #1
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80026b6:	f7fe fddd 	bl	8001274 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d80d      	bhi.n	80026e2 <HAL_SPI_TransmitReceive+0x1d0>
 80026c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d009      	beq.n	80026e2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e0bc      	b.n	800285c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1a0      	bne.n	800262e <HAL_SPI_TransmitReceive+0x11c>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d19b      	bne.n	800262e <HAL_SPI_TransmitReceive+0x11c>
 80026f6:	e082      	b.n	80027fe <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <HAL_SPI_TransmitReceive+0x1f4>
 8002700:	8afb      	ldrh	r3, [r7, #22]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d171      	bne.n	80027ea <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	330c      	adds	r3, #12
 8002710:	7812      	ldrb	r2, [r2, #0]
 8002712:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002722:	b29b      	uxth	r3, r3
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800272c:	e05d      	b.n	80027ea <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b02      	cmp	r3, #2
 800273a:	d11c      	bne.n	8002776 <HAL_SPI_TransmitReceive+0x264>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d017      	beq.n	8002776 <HAL_SPI_TransmitReceive+0x264>
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	2b01      	cmp	r3, #1
 800274a:	d114      	bne.n	8002776 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	330c      	adds	r3, #12
 8002756:	7812      	ldrb	r2, [r2, #0]
 8002758:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b01      	cmp	r3, #1
 8002782:	d119      	bne.n	80027b8 <HAL_SPI_TransmitReceive+0x2a6>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002788:	b29b      	uxth	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d014      	beq.n	80027b8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027b4:	2301      	movs	r3, #1
 80027b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027b8:	f7fe fd5c 	bl	8001274 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d803      	bhi.n	80027d0 <HAL_SPI_TransmitReceive+0x2be>
 80027c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ce:	d102      	bne.n	80027d6 <HAL_SPI_TransmitReceive+0x2c4>
 80027d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e038      	b.n	800285c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d19c      	bne.n	800272e <HAL_SPI_TransmitReceive+0x21c>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d197      	bne.n	800272e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027fe:	6a3a      	ldr	r2, [r7, #32]
 8002800:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 f8b6 	bl	8002974 <SPI_EndRxTxTransaction>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d008      	beq.n	8002820 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2220      	movs	r2, #32
 8002812:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e01d      	b.n	800285c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10a      	bne.n	800283e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002828:	2300      	movs	r3, #0
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800285a:	2300      	movs	r3, #0
  }
}
 800285c:	4618      	mov	r0, r3
 800285e:	3728      	adds	r7, #40	@ 0x28
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	4613      	mov	r3, r2
 8002872:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002874:	f7fe fcfe 	bl	8001274 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	4413      	add	r3, r2
 8002882:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002884:	f7fe fcf6 	bl	8001274 <HAL_GetTick>
 8002888:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800288a:	4b39      	ldr	r3, [pc, #228]	@ (8002970 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	015b      	lsls	r3, r3, #5
 8002890:	0d1b      	lsrs	r3, r3, #20
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	fb02 f303 	mul.w	r3, r2, r3
 8002898:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800289a:	e054      	b.n	8002946 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a2:	d050      	beq.n	8002946 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028a4:	f7fe fce6 	bl	8001274 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d902      	bls.n	80028ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d13d      	bne.n	8002936 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80028c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028d2:	d111      	bne.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028dc:	d004      	beq.n	80028e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028e6:	d107      	bne.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002900:	d10f      	bne.n	8002922 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002920:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e017      	b.n	8002966 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	3b01      	subs	r3, #1
 8002944:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4013      	ands	r3, r2
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	429a      	cmp	r2, r3
 8002954:	bf0c      	ite	eq
 8002956:	2301      	moveq	r3, #1
 8002958:	2300      	movne	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	429a      	cmp	r2, r3
 8002962:	d19b      	bne.n	800289c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3720      	adds	r7, #32
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000010 	.word	0x20000010

08002974 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af02      	add	r7, sp, #8
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2201      	movs	r2, #1
 8002988:	2102      	movs	r1, #2
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f7ff ff6a 	bl	8002864 <SPI_WaitFlagStateUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d007      	beq.n	80029a6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299a:	f043 0220 	orr.w	r2, r3, #32
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e032      	b.n	8002a0c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a14 <SPI_EndRxTxTransaction+0xa0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002a18 <SPI_EndRxTxTransaction+0xa4>)
 80029ac:	fba2 2303 	umull	r2, r3, r2, r3
 80029b0:	0d5b      	lsrs	r3, r3, #21
 80029b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80029b6:	fb02 f303 	mul.w	r3, r2, r3
 80029ba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029c4:	d112      	bne.n	80029ec <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2200      	movs	r2, #0
 80029ce:	2180      	movs	r1, #128	@ 0x80
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f7ff ff47 	bl	8002864 <SPI_WaitFlagStateUntilTimeout>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d016      	beq.n	8002a0a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e0:	f043 0220 	orr.w	r2, r3, #32
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e00f      	b.n	8002a0c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	3b01      	subs	r3, #1
 80029f6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a02:	2b80      	cmp	r3, #128	@ 0x80
 8002a04:	d0f2      	beq.n	80029ec <SPI_EndRxTxTransaction+0x78>
 8002a06:	e000      	b.n	8002a0a <SPI_EndRxTxTransaction+0x96>
        break;
 8002a08:	bf00      	nop
  }

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20000010 	.word	0x20000010
 8002a18:	165e9f81 	.word	0x165e9f81

08002a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e041      	b.n	8002ab2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe fa78 	bl	8000f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3304      	adds	r3, #4
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f000 faf0 	bl	8003040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d001      	beq.n	8002ad4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e046      	b.n	8002b62 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a23      	ldr	r2, [pc, #140]	@ (8002b70 <HAL_TIM_Base_Start+0xb4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d022      	beq.n	8002b2c <HAL_TIM_Base_Start+0x70>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aee:	d01d      	beq.n	8002b2c <HAL_TIM_Base_Start+0x70>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b74 <HAL_TIM_Base_Start+0xb8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d018      	beq.n	8002b2c <HAL_TIM_Base_Start+0x70>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1e      	ldr	r2, [pc, #120]	@ (8002b78 <HAL_TIM_Base_Start+0xbc>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d013      	beq.n	8002b2c <HAL_TIM_Base_Start+0x70>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1c      	ldr	r2, [pc, #112]	@ (8002b7c <HAL_TIM_Base_Start+0xc0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00e      	beq.n	8002b2c <HAL_TIM_Base_Start+0x70>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1b      	ldr	r2, [pc, #108]	@ (8002b80 <HAL_TIM_Base_Start+0xc4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d009      	beq.n	8002b2c <HAL_TIM_Base_Start+0x70>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a19      	ldr	r2, [pc, #100]	@ (8002b84 <HAL_TIM_Base_Start+0xc8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d004      	beq.n	8002b2c <HAL_TIM_Base_Start+0x70>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a18      	ldr	r2, [pc, #96]	@ (8002b88 <HAL_TIM_Base_Start+0xcc>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d111      	bne.n	8002b50 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b06      	cmp	r3, #6
 8002b3c:	d010      	beq.n	8002b60 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0201 	orr.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b4e:	e007      	b.n	8002b60 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40010000 	.word	0x40010000
 8002b74:	40000400 	.word	0x40000400
 8002b78:	40000800 	.word	0x40000800
 8002b7c:	40000c00 	.word	0x40000c00
 8002b80:	40010400 	.word	0x40010400
 8002b84:	40014000 	.word	0x40014000
 8002b88:	40001800 	.word	0x40001800

08002b8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d001      	beq.n	8002ba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e04e      	b.n	8002c42 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a23      	ldr	r2, [pc, #140]	@ (8002c50 <HAL_TIM_Base_Start_IT+0xc4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d022      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x80>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bce:	d01d      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x80>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c54 <HAL_TIM_Base_Start_IT+0xc8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d018      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x80>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a1e      	ldr	r2, [pc, #120]	@ (8002c58 <HAL_TIM_Base_Start_IT+0xcc>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d013      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x80>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c5c <HAL_TIM_Base_Start_IT+0xd0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00e      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x80>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c60 <HAL_TIM_Base_Start_IT+0xd4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d009      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x80>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a19      	ldr	r2, [pc, #100]	@ (8002c64 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d004      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x80>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a18      	ldr	r2, [pc, #96]	@ (8002c68 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d111      	bne.n	8002c30 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2b06      	cmp	r3, #6
 8002c1c:	d010      	beq.n	8002c40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0201 	orr.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2e:	e007      	b.n	8002c40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40010000 	.word	0x40010000
 8002c54:	40000400 	.word	0x40000400
 8002c58:	40000800 	.word	0x40000800
 8002c5c:	40000c00 	.word	0x40000c00
 8002c60:	40010400 	.word	0x40010400
 8002c64:	40014000 	.word	0x40014000
 8002c68:	40001800 	.word	0x40001800

08002c6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d020      	beq.n	8002cd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d01b      	beq.n	8002cd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0202 	mvn.w	r2, #2
 8002ca0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f9a3 	bl	8003002 <HAL_TIM_IC_CaptureCallback>
 8002cbc:	e005      	b.n	8002cca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f995 	bl	8002fee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f9a6 	bl	8003016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d020      	beq.n	8002d1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d01b      	beq.n	8002d1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0204 	mvn.w	r2, #4
 8002cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f97d 	bl	8003002 <HAL_TIM_IC_CaptureCallback>
 8002d08:	e005      	b.n	8002d16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f96f 	bl	8002fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f980 	bl	8003016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d020      	beq.n	8002d68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d01b      	beq.n	8002d68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0208 	mvn.w	r2, #8
 8002d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2204      	movs	r2, #4
 8002d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f957 	bl	8003002 <HAL_TIM_IC_CaptureCallback>
 8002d54:	e005      	b.n	8002d62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f949 	bl	8002fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f95a 	bl	8003016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d020      	beq.n	8002db4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d01b      	beq.n	8002db4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f06f 0210 	mvn.w	r2, #16
 8002d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2208      	movs	r2, #8
 8002d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f931 	bl	8003002 <HAL_TIM_IC_CaptureCallback>
 8002da0:	e005      	b.n	8002dae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f923 	bl	8002fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f934 	bl	8003016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00c      	beq.n	8002dd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d007      	beq.n	8002dd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0201 	mvn.w	r2, #1
 8002dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f901 	bl	8002fda <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00c      	beq.n	8002dfc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d007      	beq.n	8002dfc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 faee 	bl	80033d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00c      	beq.n	8002e20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d007      	beq.n	8002e20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f905 	bl	800302a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00c      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0220 	mvn.w	r2, #32
 8002e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fac0 	bl	80033c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_TIM_ConfigClockSource+0x1c>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e0b4      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x186>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ea0:	d03e      	beq.n	8002f20 <HAL_TIM_ConfigClockSource+0xd4>
 8002ea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ea6:	f200 8087 	bhi.w	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002eaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eae:	f000 8086 	beq.w	8002fbe <HAL_TIM_ConfigClockSource+0x172>
 8002eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eb6:	d87f      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb8:	2b70      	cmp	r3, #112	@ 0x70
 8002eba:	d01a      	beq.n	8002ef2 <HAL_TIM_ConfigClockSource+0xa6>
 8002ebc:	2b70      	cmp	r3, #112	@ 0x70
 8002ebe:	d87b      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec0:	2b60      	cmp	r3, #96	@ 0x60
 8002ec2:	d050      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x11a>
 8002ec4:	2b60      	cmp	r3, #96	@ 0x60
 8002ec6:	d877      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec8:	2b50      	cmp	r3, #80	@ 0x50
 8002eca:	d03c      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0xfa>
 8002ecc:	2b50      	cmp	r3, #80	@ 0x50
 8002ece:	d873      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed0:	2b40      	cmp	r3, #64	@ 0x40
 8002ed2:	d058      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x13a>
 8002ed4:	2b40      	cmp	r3, #64	@ 0x40
 8002ed6:	d86f      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed8:	2b30      	cmp	r3, #48	@ 0x30
 8002eda:	d064      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8002edc:	2b30      	cmp	r3, #48	@ 0x30
 8002ede:	d86b      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d060      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d867      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d05c      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8002eec:	2b10      	cmp	r3, #16
 8002eee:	d05a      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8002ef0:	e062      	b.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f02:	f000 f9c3 	bl	800328c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	609a      	str	r2, [r3, #8]
      break;
 8002f1e:	e04f      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f30:	f000 f9ac 	bl	800328c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f42:	609a      	str	r2, [r3, #8]
      break;
 8002f44:	e03c      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f52:	461a      	mov	r2, r3
 8002f54:	f000 f920 	bl	8003198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2150      	movs	r1, #80	@ 0x50
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f979 	bl	8003256 <TIM_ITRx_SetConfig>
      break;
 8002f64:	e02c      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f72:	461a      	mov	r2, r3
 8002f74:	f000 f93f 	bl	80031f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2160      	movs	r1, #96	@ 0x60
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 f969 	bl	8003256 <TIM_ITRx_SetConfig>
      break;
 8002f84:	e01c      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f92:	461a      	mov	r2, r3
 8002f94:	f000 f900 	bl	8003198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2140      	movs	r1, #64	@ 0x40
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f959 	bl	8003256 <TIM_ITRx_SetConfig>
      break;
 8002fa4:	e00c      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	f000 f950 	bl	8003256 <TIM_ITRx_SetConfig>
      break;
 8002fb6:	e003      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
      break;
 8002fbc:	e000      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
	...

08003040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a46      	ldr	r2, [pc, #280]	@ (800316c <TIM_Base_SetConfig+0x12c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d013      	beq.n	8003080 <TIM_Base_SetConfig+0x40>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800305e:	d00f      	beq.n	8003080 <TIM_Base_SetConfig+0x40>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a43      	ldr	r2, [pc, #268]	@ (8003170 <TIM_Base_SetConfig+0x130>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d00b      	beq.n	8003080 <TIM_Base_SetConfig+0x40>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a42      	ldr	r2, [pc, #264]	@ (8003174 <TIM_Base_SetConfig+0x134>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d007      	beq.n	8003080 <TIM_Base_SetConfig+0x40>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a41      	ldr	r2, [pc, #260]	@ (8003178 <TIM_Base_SetConfig+0x138>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d003      	beq.n	8003080 <TIM_Base_SetConfig+0x40>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a40      	ldr	r2, [pc, #256]	@ (800317c <TIM_Base_SetConfig+0x13c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d108      	bne.n	8003092 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a35      	ldr	r2, [pc, #212]	@ (800316c <TIM_Base_SetConfig+0x12c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d02b      	beq.n	80030f2 <TIM_Base_SetConfig+0xb2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030a0:	d027      	beq.n	80030f2 <TIM_Base_SetConfig+0xb2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a32      	ldr	r2, [pc, #200]	@ (8003170 <TIM_Base_SetConfig+0x130>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d023      	beq.n	80030f2 <TIM_Base_SetConfig+0xb2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a31      	ldr	r2, [pc, #196]	@ (8003174 <TIM_Base_SetConfig+0x134>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d01f      	beq.n	80030f2 <TIM_Base_SetConfig+0xb2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a30      	ldr	r2, [pc, #192]	@ (8003178 <TIM_Base_SetConfig+0x138>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d01b      	beq.n	80030f2 <TIM_Base_SetConfig+0xb2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a2f      	ldr	r2, [pc, #188]	@ (800317c <TIM_Base_SetConfig+0x13c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d017      	beq.n	80030f2 <TIM_Base_SetConfig+0xb2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003180 <TIM_Base_SetConfig+0x140>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d013      	beq.n	80030f2 <TIM_Base_SetConfig+0xb2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a2d      	ldr	r2, [pc, #180]	@ (8003184 <TIM_Base_SetConfig+0x144>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00f      	beq.n	80030f2 <TIM_Base_SetConfig+0xb2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003188 <TIM_Base_SetConfig+0x148>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00b      	beq.n	80030f2 <TIM_Base_SetConfig+0xb2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a2b      	ldr	r2, [pc, #172]	@ (800318c <TIM_Base_SetConfig+0x14c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d007      	beq.n	80030f2 <TIM_Base_SetConfig+0xb2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a2a      	ldr	r2, [pc, #168]	@ (8003190 <TIM_Base_SetConfig+0x150>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d003      	beq.n	80030f2 <TIM_Base_SetConfig+0xb2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a29      	ldr	r2, [pc, #164]	@ (8003194 <TIM_Base_SetConfig+0x154>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d108      	bne.n	8003104 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4313      	orrs	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a10      	ldr	r2, [pc, #64]	@ (800316c <TIM_Base_SetConfig+0x12c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d003      	beq.n	8003138 <TIM_Base_SetConfig+0xf8>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a12      	ldr	r2, [pc, #72]	@ (800317c <TIM_Base_SetConfig+0x13c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d103      	bne.n	8003140 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b01      	cmp	r3, #1
 8003150:	d105      	bne.n	800315e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f023 0201 	bic.w	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	611a      	str	r2, [r3, #16]
  }
}
 800315e:	bf00      	nop
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40010000 	.word	0x40010000
 8003170:	40000400 	.word	0x40000400
 8003174:	40000800 	.word	0x40000800
 8003178:	40000c00 	.word	0x40000c00
 800317c:	40010400 	.word	0x40010400
 8003180:	40014000 	.word	0x40014000
 8003184:	40014400 	.word	0x40014400
 8003188:	40014800 	.word	0x40014800
 800318c:	40001800 	.word	0x40001800
 8003190:	40001c00 	.word	0x40001c00
 8003194:	40002000 	.word	0x40002000

08003198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	f023 0201 	bic.w	r2, r3, #1
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f023 030a 	bic.w	r3, r3, #10
 80031d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4313      	orrs	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	621a      	str	r2, [r3, #32]
}
 80031ea:	bf00      	nop
 80031ec:	371c      	adds	r7, #28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b087      	sub	sp, #28
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	f023 0210 	bic.w	r2, r3, #16
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003220:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	031b      	lsls	r3, r3, #12
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003232:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	4313      	orrs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	621a      	str	r2, [r3, #32]
}
 800324a:	bf00      	nop
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003256:	b480      	push	{r7}
 8003258:	b085      	sub	sp, #20
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800326c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	f043 0307 	orr.w	r3, r3, #7
 8003278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	609a      	str	r2, [r3, #8]
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	021a      	lsls	r2, r3, #8
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	609a      	str	r2, [r3, #8]
}
 80032c0:	bf00      	nop
 80032c2:	371c      	adds	r7, #28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e05a      	b.n	800339a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800330a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a21      	ldr	r2, [pc, #132]	@ (80033a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d022      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003330:	d01d      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1d      	ldr	r2, [pc, #116]	@ (80033ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d018      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1b      	ldr	r2, [pc, #108]	@ (80033b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d013      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1a      	ldr	r2, [pc, #104]	@ (80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00e      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a18      	ldr	r2, [pc, #96]	@ (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d009      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a17      	ldr	r2, [pc, #92]	@ (80033bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d004      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a15      	ldr	r2, [pc, #84]	@ (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d10c      	bne.n	8003388 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003374:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	4313      	orrs	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40010000 	.word	0x40010000
 80033ac:	40000400 	.word	0x40000400
 80033b0:	40000800 	.word	0x40000800
 80033b4:	40000c00 	.word	0x40000c00
 80033b8:	40010400 	.word	0x40010400
 80033bc:	40014000 	.word	0x40014000
 80033c0:	40001800 	.word	0x40001800

080033c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e042      	b.n	8003484 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fd fe22 	bl	800105c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2224      	movs	r2, #36	@ 0x24
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800342e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f973 	bl	800371c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003444:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695a      	ldr	r2, [r3, #20]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003454:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003464:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	@ 0x28
 8003490:	af02      	add	r7, sp, #8
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	4613      	mov	r3, r2
 800349a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	d175      	bne.n	8003598 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <HAL_UART_Transmit+0x2c>
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e06e      	b.n	800359a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2221      	movs	r2, #33	@ 0x21
 80034c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ca:	f7fd fed3 	bl	8001274 <HAL_GetTick>
 80034ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	88fa      	ldrh	r2, [r7, #6]
 80034d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	88fa      	ldrh	r2, [r7, #6]
 80034da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034e4:	d108      	bne.n	80034f8 <HAL_UART_Transmit+0x6c>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d104      	bne.n	80034f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	61bb      	str	r3, [r7, #24]
 80034f6:	e003      	b.n	8003500 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003500:	e02e      	b.n	8003560 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2200      	movs	r2, #0
 800350a:	2180      	movs	r1, #128	@ 0x80
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f848 	bl	80035a2 <UART_WaitOnFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e03a      	b.n	800359a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10b      	bne.n	8003542 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	461a      	mov	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003538:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	3302      	adds	r3, #2
 800353e:	61bb      	str	r3, [r7, #24]
 8003540:	e007      	b.n	8003552 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	781a      	ldrb	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	3301      	adds	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003556:	b29b      	uxth	r3, r3
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003564:	b29b      	uxth	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1cb      	bne.n	8003502 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2200      	movs	r2, #0
 8003572:	2140      	movs	r1, #64	@ 0x40
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 f814 	bl	80035a2 <UART_WaitOnFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e006      	b.n	800359a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	e000      	b.n	800359a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003598:	2302      	movs	r3, #2
  }
}
 800359a:	4618      	mov	r0, r3
 800359c:	3720      	adds	r7, #32
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b086      	sub	sp, #24
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	603b      	str	r3, [r7, #0]
 80035ae:	4613      	mov	r3, r2
 80035b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b2:	e03b      	b.n	800362c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ba:	d037      	beq.n	800362c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035bc:	f7fd fe5a 	bl	8001274 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	6a3a      	ldr	r2, [r7, #32]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d302      	bcc.n	80035d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e03a      	b.n	800364c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d023      	beq.n	800362c <UART_WaitOnFlagUntilTimeout+0x8a>
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b80      	cmp	r3, #128	@ 0x80
 80035e8:	d020      	beq.n	800362c <UART_WaitOnFlagUntilTimeout+0x8a>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b40      	cmp	r3, #64	@ 0x40
 80035ee:	d01d      	beq.n	800362c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d116      	bne.n	800362c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 f81d 	bl	8003654 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2208      	movs	r2, #8
 800361e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e00f      	b.n	800364c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	4013      	ands	r3, r2
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	429a      	cmp	r2, r3
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	461a      	mov	r2, r3
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	429a      	cmp	r2, r3
 8003648:	d0b4      	beq.n	80035b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003654:	b480      	push	{r7}
 8003656:	b095      	sub	sp, #84	@ 0x54
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	330c      	adds	r3, #12
 8003662:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003666:	e853 3f00 	ldrex	r3, [r3]
 800366a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800366c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003672:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	330c      	adds	r3, #12
 800367a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800367c:	643a      	str	r2, [r7, #64]	@ 0x40
 800367e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003680:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003682:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003684:	e841 2300 	strex	r3, r2, [r1]
 8003688:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800368a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e5      	bne.n	800365c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3314      	adds	r3, #20
 8003696:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	e853 3f00 	ldrex	r3, [r3]
 800369e:	61fb      	str	r3, [r7, #28]
   return(result);
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f023 0301 	bic.w	r3, r3, #1
 80036a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3314      	adds	r3, #20
 80036ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036b8:	e841 2300 	strex	r3, r2, [r1]
 80036bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1e5      	bne.n	8003690 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d119      	bne.n	8003700 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	330c      	adds	r3, #12
 80036d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	e853 3f00 	ldrex	r3, [r3]
 80036da:	60bb      	str	r3, [r7, #8]
   return(result);
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f023 0310 	bic.w	r3, r3, #16
 80036e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	330c      	adds	r3, #12
 80036ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036ec:	61ba      	str	r2, [r7, #24]
 80036ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	6979      	ldr	r1, [r7, #20]
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	e841 2300 	strex	r3, r2, [r1]
 80036f8:	613b      	str	r3, [r7, #16]
   return(result);
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e5      	bne.n	80036cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800370e:	bf00      	nop
 8003710:	3754      	adds	r7, #84	@ 0x54
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
	...

0800371c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800371c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003720:	b0c0      	sub	sp, #256	@ 0x100
 8003722:	af00      	add	r7, sp, #0
 8003724:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003738:	68d9      	ldr	r1, [r3, #12]
 800373a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	ea40 0301 	orr.w	r3, r0, r1
 8003744:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	431a      	orrs	r2, r3
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	431a      	orrs	r2, r3
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003774:	f021 010c 	bic.w	r1, r1, #12
 8003778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003782:	430b      	orrs	r3, r1
 8003784:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003796:	6999      	ldr	r1, [r3, #24]
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	ea40 0301 	orr.w	r3, r0, r1
 80037a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4b8f      	ldr	r3, [pc, #572]	@ (80039e8 <UART_SetConfig+0x2cc>)
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d005      	beq.n	80037bc <UART_SetConfig+0xa0>
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4b8d      	ldr	r3, [pc, #564]	@ (80039ec <UART_SetConfig+0x2d0>)
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d104      	bne.n	80037c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037bc:	f7fe fe0c 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 80037c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80037c4:	e003      	b.n	80037ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037c6:	f7fe fdf3 	bl	80023b0 <HAL_RCC_GetPCLK1Freq>
 80037ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037d8:	f040 810c 	bne.w	80039f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037e0:	2200      	movs	r2, #0
 80037e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80037ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80037ee:	4622      	mov	r2, r4
 80037f0:	462b      	mov	r3, r5
 80037f2:	1891      	adds	r1, r2, r2
 80037f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80037f6:	415b      	adcs	r3, r3
 80037f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80037fe:	4621      	mov	r1, r4
 8003800:	eb12 0801 	adds.w	r8, r2, r1
 8003804:	4629      	mov	r1, r5
 8003806:	eb43 0901 	adc.w	r9, r3, r1
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003816:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800381a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800381e:	4690      	mov	r8, r2
 8003820:	4699      	mov	r9, r3
 8003822:	4623      	mov	r3, r4
 8003824:	eb18 0303 	adds.w	r3, r8, r3
 8003828:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800382c:	462b      	mov	r3, r5
 800382e:	eb49 0303 	adc.w	r3, r9, r3
 8003832:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003842:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003846:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800384a:	460b      	mov	r3, r1
 800384c:	18db      	adds	r3, r3, r3
 800384e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003850:	4613      	mov	r3, r2
 8003852:	eb42 0303 	adc.w	r3, r2, r3
 8003856:	657b      	str	r3, [r7, #84]	@ 0x54
 8003858:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800385c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003860:	f7fc fd06 	bl	8000270 <__aeabi_uldivmod>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4b61      	ldr	r3, [pc, #388]	@ (80039f0 <UART_SetConfig+0x2d4>)
 800386a:	fba3 2302 	umull	r2, r3, r3, r2
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	011c      	lsls	r4, r3, #4
 8003872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003876:	2200      	movs	r2, #0
 8003878:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800387c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003880:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003884:	4642      	mov	r2, r8
 8003886:	464b      	mov	r3, r9
 8003888:	1891      	adds	r1, r2, r2
 800388a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800388c:	415b      	adcs	r3, r3
 800388e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003890:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003894:	4641      	mov	r1, r8
 8003896:	eb12 0a01 	adds.w	sl, r2, r1
 800389a:	4649      	mov	r1, r9
 800389c:	eb43 0b01 	adc.w	fp, r3, r1
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038b4:	4692      	mov	sl, r2
 80038b6:	469b      	mov	fp, r3
 80038b8:	4643      	mov	r3, r8
 80038ba:	eb1a 0303 	adds.w	r3, sl, r3
 80038be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038c2:	464b      	mov	r3, r9
 80038c4:	eb4b 0303 	adc.w	r3, fp, r3
 80038c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80038dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80038e0:	460b      	mov	r3, r1
 80038e2:	18db      	adds	r3, r3, r3
 80038e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80038e6:	4613      	mov	r3, r2
 80038e8:	eb42 0303 	adc.w	r3, r2, r3
 80038ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80038ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80038f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80038f6:	f7fc fcbb 	bl	8000270 <__aeabi_uldivmod>
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4611      	mov	r1, r2
 8003900:	4b3b      	ldr	r3, [pc, #236]	@ (80039f0 <UART_SetConfig+0x2d4>)
 8003902:	fba3 2301 	umull	r2, r3, r3, r1
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	2264      	movs	r2, #100	@ 0x64
 800390a:	fb02 f303 	mul.w	r3, r2, r3
 800390e:	1acb      	subs	r3, r1, r3
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003916:	4b36      	ldr	r3, [pc, #216]	@ (80039f0 <UART_SetConfig+0x2d4>)
 8003918:	fba3 2302 	umull	r2, r3, r3, r2
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003924:	441c      	add	r4, r3
 8003926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800392a:	2200      	movs	r2, #0
 800392c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003930:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003934:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003938:	4642      	mov	r2, r8
 800393a:	464b      	mov	r3, r9
 800393c:	1891      	adds	r1, r2, r2
 800393e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003940:	415b      	adcs	r3, r3
 8003942:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003944:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003948:	4641      	mov	r1, r8
 800394a:	1851      	adds	r1, r2, r1
 800394c:	6339      	str	r1, [r7, #48]	@ 0x30
 800394e:	4649      	mov	r1, r9
 8003950:	414b      	adcs	r3, r1
 8003952:	637b      	str	r3, [r7, #52]	@ 0x34
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003960:	4659      	mov	r1, fp
 8003962:	00cb      	lsls	r3, r1, #3
 8003964:	4651      	mov	r1, sl
 8003966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800396a:	4651      	mov	r1, sl
 800396c:	00ca      	lsls	r2, r1, #3
 800396e:	4610      	mov	r0, r2
 8003970:	4619      	mov	r1, r3
 8003972:	4603      	mov	r3, r0
 8003974:	4642      	mov	r2, r8
 8003976:	189b      	adds	r3, r3, r2
 8003978:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800397c:	464b      	mov	r3, r9
 800397e:	460a      	mov	r2, r1
 8003980:	eb42 0303 	adc.w	r3, r2, r3
 8003984:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003994:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003998:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800399c:	460b      	mov	r3, r1
 800399e:	18db      	adds	r3, r3, r3
 80039a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039a2:	4613      	mov	r3, r2
 80039a4:	eb42 0303 	adc.w	r3, r2, r3
 80039a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80039b2:	f7fc fc5d 	bl	8000270 <__aeabi_uldivmod>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4b0d      	ldr	r3, [pc, #52]	@ (80039f0 <UART_SetConfig+0x2d4>)
 80039bc:	fba3 1302 	umull	r1, r3, r3, r2
 80039c0:	095b      	lsrs	r3, r3, #5
 80039c2:	2164      	movs	r1, #100	@ 0x64
 80039c4:	fb01 f303 	mul.w	r3, r1, r3
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	3332      	adds	r3, #50	@ 0x32
 80039ce:	4a08      	ldr	r2, [pc, #32]	@ (80039f0 <UART_SetConfig+0x2d4>)
 80039d0:	fba2 2303 	umull	r2, r3, r2, r3
 80039d4:	095b      	lsrs	r3, r3, #5
 80039d6:	f003 0207 	and.w	r2, r3, #7
 80039da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4422      	add	r2, r4
 80039e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039e4:	e106      	b.n	8003bf4 <UART_SetConfig+0x4d8>
 80039e6:	bf00      	nop
 80039e8:	40011000 	.word	0x40011000
 80039ec:	40011400 	.word	0x40011400
 80039f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039f8:	2200      	movs	r2, #0
 80039fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80039fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a06:	4642      	mov	r2, r8
 8003a08:	464b      	mov	r3, r9
 8003a0a:	1891      	adds	r1, r2, r2
 8003a0c:	6239      	str	r1, [r7, #32]
 8003a0e:	415b      	adcs	r3, r3
 8003a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a16:	4641      	mov	r1, r8
 8003a18:	1854      	adds	r4, r2, r1
 8003a1a:	4649      	mov	r1, r9
 8003a1c:	eb43 0501 	adc.w	r5, r3, r1
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	00eb      	lsls	r3, r5, #3
 8003a2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a2e:	00e2      	lsls	r2, r4, #3
 8003a30:	4614      	mov	r4, r2
 8003a32:	461d      	mov	r5, r3
 8003a34:	4643      	mov	r3, r8
 8003a36:	18e3      	adds	r3, r4, r3
 8003a38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a3c:	464b      	mov	r3, r9
 8003a3e:	eb45 0303 	adc.w	r3, r5, r3
 8003a42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a62:	4629      	mov	r1, r5
 8003a64:	008b      	lsls	r3, r1, #2
 8003a66:	4621      	mov	r1, r4
 8003a68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	008a      	lsls	r2, r1, #2
 8003a70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a74:	f7fc fbfc 	bl	8000270 <__aeabi_uldivmod>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4b60      	ldr	r3, [pc, #384]	@ (8003c00 <UART_SetConfig+0x4e4>)
 8003a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	011c      	lsls	r4, r3, #4
 8003a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003a98:	4642      	mov	r2, r8
 8003a9a:	464b      	mov	r3, r9
 8003a9c:	1891      	adds	r1, r2, r2
 8003a9e:	61b9      	str	r1, [r7, #24]
 8003aa0:	415b      	adcs	r3, r3
 8003aa2:	61fb      	str	r3, [r7, #28]
 8003aa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aa8:	4641      	mov	r1, r8
 8003aaa:	1851      	adds	r1, r2, r1
 8003aac:	6139      	str	r1, [r7, #16]
 8003aae:	4649      	mov	r1, r9
 8003ab0:	414b      	adcs	r3, r1
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ac0:	4659      	mov	r1, fp
 8003ac2:	00cb      	lsls	r3, r1, #3
 8003ac4:	4651      	mov	r1, sl
 8003ac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aca:	4651      	mov	r1, sl
 8003acc:	00ca      	lsls	r2, r1, #3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	4642      	mov	r2, r8
 8003ad6:	189b      	adds	r3, r3, r2
 8003ad8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003adc:	464b      	mov	r3, r9
 8003ade:	460a      	mov	r2, r1
 8003ae0:	eb42 0303 	adc.w	r3, r2, r3
 8003ae4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003af2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b00:	4649      	mov	r1, r9
 8003b02:	008b      	lsls	r3, r1, #2
 8003b04:	4641      	mov	r1, r8
 8003b06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b0a:	4641      	mov	r1, r8
 8003b0c:	008a      	lsls	r2, r1, #2
 8003b0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b12:	f7fc fbad 	bl	8000270 <__aeabi_uldivmod>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	4b38      	ldr	r3, [pc, #224]	@ (8003c00 <UART_SetConfig+0x4e4>)
 8003b1e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	2264      	movs	r2, #100	@ 0x64
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	1acb      	subs	r3, r1, r3
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	3332      	adds	r3, #50	@ 0x32
 8003b30:	4a33      	ldr	r2, [pc, #204]	@ (8003c00 <UART_SetConfig+0x4e4>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b3c:	441c      	add	r4, r3
 8003b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b42:	2200      	movs	r2, #0
 8003b44:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b46:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b4c:	4642      	mov	r2, r8
 8003b4e:	464b      	mov	r3, r9
 8003b50:	1891      	adds	r1, r2, r2
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	415b      	adcs	r3, r3
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b5c:	4641      	mov	r1, r8
 8003b5e:	1851      	adds	r1, r2, r1
 8003b60:	6039      	str	r1, [r7, #0]
 8003b62:	4649      	mov	r1, r9
 8003b64:	414b      	adcs	r3, r1
 8003b66:	607b      	str	r3, [r7, #4]
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b74:	4659      	mov	r1, fp
 8003b76:	00cb      	lsls	r3, r1, #3
 8003b78:	4651      	mov	r1, sl
 8003b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b7e:	4651      	mov	r1, sl
 8003b80:	00ca      	lsls	r2, r1, #3
 8003b82:	4610      	mov	r0, r2
 8003b84:	4619      	mov	r1, r3
 8003b86:	4603      	mov	r3, r0
 8003b88:	4642      	mov	r2, r8
 8003b8a:	189b      	adds	r3, r3, r2
 8003b8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b8e:	464b      	mov	r3, r9
 8003b90:	460a      	mov	r2, r1
 8003b92:	eb42 0303 	adc.w	r3, r2, r3
 8003b96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ba2:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003bb0:	4649      	mov	r1, r9
 8003bb2:	008b      	lsls	r3, r1, #2
 8003bb4:	4641      	mov	r1, r8
 8003bb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bba:	4641      	mov	r1, r8
 8003bbc:	008a      	lsls	r2, r1, #2
 8003bbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003bc2:	f7fc fb55 	bl	8000270 <__aeabi_uldivmod>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4b0d      	ldr	r3, [pc, #52]	@ (8003c00 <UART_SetConfig+0x4e4>)
 8003bcc:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	2164      	movs	r1, #100	@ 0x64
 8003bd4:	fb01 f303 	mul.w	r3, r1, r3
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	3332      	adds	r3, #50	@ 0x32
 8003bde:	4a08      	ldr	r2, [pc, #32]	@ (8003c00 <UART_SetConfig+0x4e4>)
 8003be0:	fba2 2303 	umull	r2, r3, r2, r3
 8003be4:	095b      	lsrs	r3, r3, #5
 8003be6:	f003 020f 	and.w	r2, r3, #15
 8003bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4422      	add	r2, r4
 8003bf2:	609a      	str	r2, [r3, #8]
}
 8003bf4:	bf00      	nop
 8003bf6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c00:	51eb851f 	.word	0x51eb851f

08003c04 <SPIx_ReadWriteByte>:
  * 输入参数: byte：待发送数据
  * 返 回 值: uint8_t：接收到的数据
  * 说    明：无
  */
uint8_t SPIx_ReadWriteByte(SPI_HandleTypeDef* hspi,uint8_t byte)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	70fb      	strb	r3, [r7, #3]
  uint8_t d_read,d_send=byte;
 8003c10:	78fb      	ldrb	r3, [r7, #3]
 8003c12:	73bb      	strb	r3, [r7, #14]
  if(HAL_SPI_TransmitReceive(hspi,&d_send,&d_read,1,0xFF)!=HAL_OK)
 8003c14:	f107 020f 	add.w	r2, r7, #15
 8003c18:	f107 010e 	add.w	r1, r7, #14
 8003c1c:	23ff      	movs	r3, #255	@ 0xff
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	2301      	movs	r3, #1
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fe fc75 	bl	8002512 <HAL_SPI_TransmitReceive>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <SPIx_ReadWriteByte+0x2e>
  {
    d_read=0xFF;
 8003c2e:	23ff      	movs	r3, #255	@ 0xff
 8003c30:	73fb      	strb	r3, [r7, #15]
  }
  return d_read;
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <NRF24L01_Check>:
  * 输入参数: 无
  * 返 回 值: 0，成功;1，失败
  * 说    明：无
  */
uint8_t NRF24L01_Check(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
	uint8_t buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};
 8003c42:	4a17      	ldr	r2, [pc, #92]	@ (8003ca0 <NRF24L01_Check+0x64>)
 8003c44:	463b      	mov	r3, r7
 8003c46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c4a:	6018      	str	r0, [r3, #0]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	7019      	strb	r1, [r3, #0]
	uint8_t i;

	NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,buf,5);//写入5个字节的地址.
 8003c50:	463b      	mov	r3, r7
 8003c52:	2205      	movs	r2, #5
 8003c54:	4619      	mov	r1, r3
 8003c56:	2030      	movs	r0, #48	@ 0x30
 8003c58:	f000 f8a6 	bl	8003da8 <NRF24L01_Write_Buf>
	NRF24L01_Read_Buf(TX_ADDR,buf,5); //读出写入的地址
 8003c5c:	463b      	mov	r3, r7
 8003c5e:	2205      	movs	r2, #5
 8003c60:	4619      	mov	r1, r3
 8003c62:	2010      	movs	r0, #16
 8003c64:	f000 f86a 	bl	8003d3c <NRF24L01_Read_Buf>
	for(i=0;i<5;i++)if(buf[i]!=0XA5)break;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	71fb      	strb	r3, [r7, #7]
 8003c6c:	e009      	b.n	8003c82 <NRF24L01_Check+0x46>
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	3308      	adds	r3, #8
 8003c72:	443b      	add	r3, r7
 8003c74:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003c78:	2ba5      	cmp	r3, #165	@ 0xa5
 8003c7a:	d106      	bne.n	8003c8a <NRF24L01_Check+0x4e>
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	71fb      	strb	r3, [r7, #7]
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d9f2      	bls.n	8003c6e <NRF24L01_Check+0x32>
 8003c88:	e000      	b.n	8003c8c <NRF24L01_Check+0x50>
 8003c8a:	bf00      	nop
	if(i!=5)return 1;//检测24L01错误
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d001      	beq.n	8003c96 <NRF24L01_Check+0x5a>
 8003c92:	2301      	movs	r3, #1
 8003c94:	e000      	b.n	8003c98 <NRF24L01_Check+0x5c>
	return 0;		 //检测到24L01
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	080050f8 	.word	0x080050f8

08003ca4 <NRF24L01_Write_Reg>:
  * 返 回 值: 无
  * 说    明：reg:指定寄存器地址
  *
  */
uint8_t NRF24L01_Write_Reg(uint8_t reg,uint8_t value)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	460a      	mov	r2, r1
 8003cae:	71fb      	strb	r3, [r7, #7]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	71bb      	strb	r3, [r7, #6]
	uint8_t status;
  NRF24L01_SPI_CS_ENABLE();                 //使能SPI传输
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2108      	movs	r1, #8
 8003cb8:	480c      	ldr	r0, [pc, #48]	@ (8003cec <NRF24L01_Write_Reg+0x48>)
 8003cba:	f7fd fdd1 	bl	8001860 <HAL_GPIO_WritePin>
  status =SPIx_ReadWriteByte(&hspi_NRF24L01,reg);//发送寄存器号
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	480b      	ldr	r0, [pc, #44]	@ (8003cf0 <NRF24L01_Write_Reg+0x4c>)
 8003cc4:	f7ff ff9e 	bl	8003c04 <SPIx_ReadWriteByte>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	73fb      	strb	r3, [r7, #15]
  SPIx_ReadWriteByte(&hspi_NRF24L01,value);      //写入寄存器的值
 8003ccc:	79bb      	ldrb	r3, [r7, #6]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4807      	ldr	r0, [pc, #28]	@ (8003cf0 <NRF24L01_Write_Reg+0x4c>)
 8003cd2:	f7ff ff97 	bl	8003c04 <SPIx_ReadWriteByte>
  NRF24L01_SPI_CS_DISABLE();                 //禁止SPI传输
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	2108      	movs	r1, #8
 8003cda:	4804      	ldr	r0, [pc, #16]	@ (8003cec <NRF24L01_Write_Reg+0x48>)
 8003cdc:	f7fd fdc0 	bl	8001860 <HAL_GPIO_WritePin>
  return(status);       			//返回状态值
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	20000114 	.word	0x20000114

08003cf4 <NRF24L01_Read_Reg>:
  * 返 回 值: 无
  * 说    明：reg:要读的寄存器
  *
  */
uint8_t NRF24L01_Read_Reg(uint8_t reg)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_val;
 	NRF24L01_SPI_CS_ENABLE();          //使能SPI传输
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2108      	movs	r1, #8
 8003d02:	480c      	ldr	r0, [pc, #48]	@ (8003d34 <NRF24L01_Read_Reg+0x40>)
 8003d04:	f7fd fdac 	bl	8001860 <HAL_GPIO_WritePin>
  SPIx_ReadWriteByte(&hspi_NRF24L01,reg);   //发送寄存器号
 8003d08:	79fb      	ldrb	r3, [r7, #7]
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	480a      	ldr	r0, [pc, #40]	@ (8003d38 <NRF24L01_Read_Reg+0x44>)
 8003d0e:	f7ff ff79 	bl	8003c04 <SPIx_ReadWriteByte>
  reg_val=SPIx_ReadWriteByte(&hspi_NRF24L01,0XFF);//读取寄存器内容
 8003d12:	21ff      	movs	r1, #255	@ 0xff
 8003d14:	4808      	ldr	r0, [pc, #32]	@ (8003d38 <NRF24L01_Read_Reg+0x44>)
 8003d16:	f7ff ff75 	bl	8003c04 <SPIx_ReadWriteByte>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	73fb      	strb	r3, [r7, #15]
  NRF24L01_SPI_CS_DISABLE();          //禁止SPI传输
 8003d1e:	2201      	movs	r2, #1
 8003d20:	2108      	movs	r1, #8
 8003d22:	4804      	ldr	r0, [pc, #16]	@ (8003d34 <NRF24L01_Read_Reg+0x40>)
 8003d24:	f7fd fd9c 	bl	8001860 <HAL_GPIO_WritePin>
  return(reg_val);           //返回状态值
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40021000 	.word	0x40021000
 8003d38:	20000114 	.word	0x20000114

08003d3c <NRF24L01_Read_Buf>:
  * 返 回 值: 此次读到的状态寄存器值
  * 说    明：无
  *
  */
uint8_t NRF24L01_Read_Buf(uint8_t reg,uint8_t *pBuf,uint8_t len)
{
 8003d3c:	b590      	push	{r4, r7, lr}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	6039      	str	r1, [r7, #0]
 8003d46:	71fb      	strb	r3, [r7, #7]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	71bb      	strb	r3, [r7, #6]
	uint8_t status,uint8_t_ctr;

  NRF24L01_SPI_CS_ENABLE();           //使能SPI传输
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2108      	movs	r1, #8
 8003d50:	4813      	ldr	r0, [pc, #76]	@ (8003da0 <NRF24L01_Read_Buf+0x64>)
 8003d52:	f7fd fd85 	bl	8001860 <HAL_GPIO_WritePin>
  status=SPIx_ReadWriteByte(&hspi_NRF24L01,reg);//发送寄存器值(位置),并读取状态值
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4812      	ldr	r0, [pc, #72]	@ (8003da4 <NRF24L01_Read_Buf+0x68>)
 8003d5c:	f7ff ff52 	bl	8003c04 <SPIx_ReadWriteByte>
 8003d60:	4603      	mov	r3, r0
 8003d62:	73bb      	strb	r3, [r7, #14]
 	for(uint8_t_ctr=0;uint8_t_ctr<len;uint8_t_ctr++)
 8003d64:	2300      	movs	r3, #0
 8003d66:	73fb      	strb	r3, [r7, #15]
 8003d68:	e00b      	b.n	8003d82 <NRF24L01_Read_Buf+0x46>
  {
    pBuf[uint8_t_ctr]=SPIx_ReadWriteByte(&hspi_NRF24L01,0XFF);//读出数据
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	18d4      	adds	r4, r2, r3
 8003d70:	21ff      	movs	r1, #255	@ 0xff
 8003d72:	480c      	ldr	r0, [pc, #48]	@ (8003da4 <NRF24L01_Read_Buf+0x68>)
 8003d74:	f7ff ff46 	bl	8003c04 <SPIx_ReadWriteByte>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	7023      	strb	r3, [r4, #0]
 	for(uint8_t_ctr=0;uint8_t_ctr<len;uint8_t_ctr++)
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	73fb      	strb	r3, [r7, #15]
 8003d82:	7bfa      	ldrb	r2, [r7, #15]
 8003d84:	79bb      	ldrb	r3, [r7, #6]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d3ef      	bcc.n	8003d6a <NRF24L01_Read_Buf+0x2e>
  }
  NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	2108      	movs	r1, #8
 8003d8e:	4804      	ldr	r0, [pc, #16]	@ (8003da0 <NRF24L01_Read_Buf+0x64>)
 8003d90:	f7fd fd66 	bl	8001860 <HAL_GPIO_WritePin>
  return status;        //返回读到的状态值
 8003d94:	7bbb      	ldrb	r3, [r7, #14]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd90      	pop	{r4, r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40021000 	.word	0x40021000
 8003da4:	20000114 	.word	0x20000114

08003da8 <NRF24L01_Write_Buf>:
  * 返 回 值: 无
  * 说    明：reg:寄存器(位置)  *pBuf:数据指针  len:数据长度
  *
  */
uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	6039      	str	r1, [r7, #0]
 8003db2:	71fb      	strb	r3, [r7, #7]
 8003db4:	4613      	mov	r3, r2
 8003db6:	71bb      	strb	r3, [r7, #6]
	uint8_t status,uint8_t_ctr;
 	NRF24L01_SPI_CS_ENABLE();          //使能SPI传输
 8003db8:	2200      	movs	r2, #0
 8003dba:	2108      	movs	r1, #8
 8003dbc:	4814      	ldr	r0, [pc, #80]	@ (8003e10 <NRF24L01_Write_Buf+0x68>)
 8003dbe:	f7fd fd4f 	bl	8001860 <HAL_GPIO_WritePin>
	status = SPIx_ReadWriteByte(&hspi_NRF24L01,reg);//发送寄存器值(位置),并读取状态值
 8003dc2:	79fb      	ldrb	r3, [r7, #7]
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4813      	ldr	r0, [pc, #76]	@ (8003e14 <NRF24L01_Write_Buf+0x6c>)
 8003dc8:	f7ff ff1c 	bl	8003c04 <SPIx_ReadWriteByte>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(1);
 8003dd0:	2001      	movs	r0, #1
 8003dd2:	f7fd fa5b 	bl	800128c <HAL_Delay>
	for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++)
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	73fb      	strb	r3, [r7, #15]
 8003dda:	e00a      	b.n	8003df2 <NRF24L01_Write_Buf+0x4a>
	{
		SPIx_ReadWriteByte(&hspi_NRF24L01,*pBuf++); //写入数据
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	603a      	str	r2, [r7, #0]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	4619      	mov	r1, r3
 8003de6:	480b      	ldr	r0, [pc, #44]	@ (8003e14 <NRF24L01_Write_Buf+0x6c>)
 8003de8:	f7ff ff0c 	bl	8003c04 <SPIx_ReadWriteByte>
	for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++)
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	3301      	adds	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
 8003df2:	7bfa      	ldrb	r2, [r7, #15]
 8003df4:	79bb      	ldrb	r3, [r7, #6]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d3f0      	bcc.n	8003ddc <NRF24L01_Write_Buf+0x34>
	}
	NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	2108      	movs	r1, #8
 8003dfe:	4804      	ldr	r0, [pc, #16]	@ (8003e10 <NRF24L01_Write_Buf+0x68>)
 8003e00:	f7fd fd2e 	bl	8001860 <HAL_GPIO_WritePin>
	return status;          //返回读到的状态值
 8003e04:	7bbb      	ldrb	r3, [r7, #14]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000
 8003e14:	20000114 	.word	0x20000114

08003e18 <NRF24L01_TxPacket_Data>:
  * 返 回 值: 发送完成状况
  * 说    明：txbuf:待发送数据首地址; len: 数据长度字节数
  *
  */
uint8_t NRF24L01_TxPacket_Data(uint8_t *txbuf, uint8_t len)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	460b      	mov	r3, r1
 8003e22:	70fb      	strb	r3, [r7, #3]
	uint8_t sta;
	NRF24L01_CE_LOW();
 8003e24:	2200      	movs	r2, #0
 8003e26:	2104      	movs	r1, #4
 8003e28:	481b      	ldr	r0, [pc, #108]	@ (8003e98 <NRF24L01_TxPacket_Data+0x80>)
 8003e2a:	f7fd fd19 	bl	8001860 <HAL_GPIO_WritePin>
    NRF24L01_Write_Buf(WR_TX_PLOAD,txbuf,len);//写数据到TX BUF 小于 32个字节
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	461a      	mov	r2, r3
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	20a0      	movs	r0, #160	@ 0xa0
 8003e36:	f7ff ffb7 	bl	8003da8 <NRF24L01_Write_Buf>
 	NRF24L01_CE_HIGH();//启动发送
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	2104      	movs	r1, #4
 8003e3e:	4816      	ldr	r0, [pc, #88]	@ (8003e98 <NRF24L01_TxPacket_Data+0x80>)
 8003e40:	f7fd fd0e 	bl	8001860 <HAL_GPIO_WritePin>

	while(NRF24L01_IRQ_PIN_READ()!=0);//等待发送完成
 8003e44:	bf00      	nop
 8003e46:	2110      	movs	r1, #16
 8003e48:	4814      	ldr	r0, [pc, #80]	@ (8003e9c <NRF24L01_TxPacket_Data+0x84>)
 8003e4a:	f7fd fcf1 	bl	8001830 <HAL_GPIO_ReadPin>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f8      	bne.n	8003e46 <NRF24L01_TxPacket_Data+0x2e>

	sta=NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值
 8003e54:	2007      	movs	r0, #7
 8003e56:	f7ff ff4d 	bl	8003cf4 <NRF24L01_Read_Reg>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	73fb      	strb	r3, [r7, #15]
	NRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
 8003e60:	4619      	mov	r1, r3
 8003e62:	2027      	movs	r0, #39	@ 0x27
 8003e64:	f7ff ff1e 	bl	8003ca4 <NRF24L01_Write_Reg>
	if(sta&MAX_TX)//达到最大重发次数
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <NRF24L01_TxPacket_Data+0x66>
	{
		NRF24L01_Write_Reg(FLUSH_TX,0xff);//清除TX FIFO寄存器
 8003e72:	21ff      	movs	r1, #255	@ 0xff
 8003e74:	20e1      	movs	r0, #225	@ 0xe1
 8003e76:	f7ff ff15 	bl	8003ca4 <NRF24L01_Write_Reg>
		return MAX_TX;
 8003e7a:	2310      	movs	r3, #16
 8003e7c:	e007      	b.n	8003e8e <NRF24L01_TxPacket_Data+0x76>
	}
	if(sta&TX_OK)//发送完成
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	f003 0320 	and.w	r3, r3, #32
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <NRF24L01_TxPacket_Data+0x74>
	{
		return TX_OK;
 8003e88:	2320      	movs	r3, #32
 8003e8a:	e000      	b.n	8003e8e <NRF24L01_TxPacket_Data+0x76>
	}
	return 0xff;//其他原因发送失败
 8003e8c:	23ff      	movs	r3, #255	@ 0xff
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40020000 	.word	0x40020000

08003ea0 <NRF24L01_TX_Mode>:
  * 返 回 值: 无
  * 说    明：无
  *
  */
void NRF24L01_TX_Mode(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
	NRF24L01_CE_LOW();
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	2104      	movs	r1, #4
 8003ea8:	4817      	ldr	r0, [pc, #92]	@ (8003f08 <NRF24L01_TX_Mode+0x68>)
 8003eaa:	f7fd fcd9 	bl	8001860 <HAL_GPIO_WritePin>
  NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS,TX_ADR_WIDTH);//写TX节点地址
 8003eae:	2205      	movs	r2, #5
 8003eb0:	4916      	ldr	r1, [pc, #88]	@ (8003f0c <NRF24L01_TX_Mode+0x6c>)
 8003eb2:	2030      	movs	r0, #48	@ 0x30
 8003eb4:	f7ff ff78 	bl	8003da8 <NRF24L01_Write_Buf>
  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK
 8003eb8:	2205      	movs	r2, #5
 8003eba:	4915      	ldr	r1, [pc, #84]	@ (8003f10 <NRF24L01_TX_Mode+0x70>)
 8003ebc:	202a      	movs	r0, #42	@ 0x2a
 8003ebe:	f7ff ff73 	bl	8003da8 <NRF24L01_Write_Buf>

  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);     //使能通道0的自动应答
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	2021      	movs	r0, #33	@ 0x21
 8003ec6:	f7ff feed 	bl	8003ca4 <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01); //使能通道0的接收地址
 8003eca:	2101      	movs	r1, #1
 8003ecc:	2022      	movs	r0, #34	@ 0x22
 8003ece:	f7ff fee9 	bl	8003ca4 <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+SETUP_RETR,0xff);//设置自动重发间隔时间:4000us + 86us;最大自动重发次数:15次
 8003ed2:	21ff      	movs	r1, #255	@ 0xff
 8003ed4:	2024      	movs	r0, #36	@ 0x24
 8003ed6:	f7ff fee5 	bl	8003ca4 <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);       //设置RF通道为40
 8003eda:	2128      	movs	r1, #40	@ 0x28
 8003edc:	2025      	movs	r0, #37	@ 0x25
 8003ede:	f7ff fee1 	bl	8003ca4 <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启
 8003ee2:	210f      	movs	r1, #15
 8003ee4:	2026      	movs	r0, #38	@ 0x26
 8003ee6:	f7ff fedd 	bl	8003ca4 <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG,0x0e);    //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式,开启所有中断
 8003eea:	210e      	movs	r1, #14
 8003eec:	2020      	movs	r0, #32
 8003eee:	f7ff fed9 	bl	8003ca4 <NRF24L01_Write_Reg>
	NRF24L01_CE_HIGH();//CE为高,10us后启动发送
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	2104      	movs	r1, #4
 8003ef6:	4804      	ldr	r0, [pc, #16]	@ (8003f08 <NRF24L01_TX_Mode+0x68>)
 8003ef8:	f7fd fcb2 	bl	8001860 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8003efc:	2001      	movs	r0, #1
 8003efe:	f7fd f9c5 	bl	800128c <HAL_Delay>
}
 8003f02:	bf00      	nop
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	08005120 	.word	0x08005120
 8003f10:	08005128 	.word	0x08005128

08003f14 <NRF24L02_Check>:
  * 输入参数: 无
  * 返 回 值: 0，成功;1，失败
  * 说    明：无
  */
uint8_t NRF24L02_Check(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
	uint8_t buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};
 8003f1a:	4a17      	ldr	r2, [pc, #92]	@ (8003f78 <NRF24L02_Check+0x64>)
 8003f1c:	463b      	mov	r3, r7
 8003f1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f22:	6018      	str	r0, [r3, #0]
 8003f24:	3304      	adds	r3, #4
 8003f26:	7019      	strb	r1, [r3, #0]
	uint8_t i;

	NRF24L02_Write_Buf(NRF_WRITE_REG+TX_ADDR,buf,5);//写入5个字节的地址.
 8003f28:	463b      	mov	r3, r7
 8003f2a:	2205      	movs	r2, #5
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	2030      	movs	r0, #48	@ 0x30
 8003f30:	f000 f8a6 	bl	8004080 <NRF24L02_Write_Buf>
	NRF24L02_Read_Buf(TX_ADDR,buf,5); //读出写入的地址
 8003f34:	463b      	mov	r3, r7
 8003f36:	2205      	movs	r2, #5
 8003f38:	4619      	mov	r1, r3
 8003f3a:	2010      	movs	r0, #16
 8003f3c:	f000 f86a 	bl	8004014 <NRF24L02_Read_Buf>
	for(i=0;i<5;i++)if(buf[i]!=0XA5)break;
 8003f40:	2300      	movs	r3, #0
 8003f42:	71fb      	strb	r3, [r7, #7]
 8003f44:	e009      	b.n	8003f5a <NRF24L02_Check+0x46>
 8003f46:	79fb      	ldrb	r3, [r7, #7]
 8003f48:	3308      	adds	r3, #8
 8003f4a:	443b      	add	r3, r7
 8003f4c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003f50:	2ba5      	cmp	r3, #165	@ 0xa5
 8003f52:	d106      	bne.n	8003f62 <NRF24L02_Check+0x4e>
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	3301      	adds	r3, #1
 8003f58:	71fb      	strb	r3, [r7, #7]
 8003f5a:	79fb      	ldrb	r3, [r7, #7]
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d9f2      	bls.n	8003f46 <NRF24L02_Check+0x32>
 8003f60:	e000      	b.n	8003f64 <NRF24L02_Check+0x50>
 8003f62:	bf00      	nop
	if(i!=5)return 1;//检测24L01错误
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	2b05      	cmp	r3, #5
 8003f68:	d001      	beq.n	8003f6e <NRF24L02_Check+0x5a>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <NRF24L02_Check+0x5c>
	return 0;		 //检测到24L01
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	08005100 	.word	0x08005100

08003f7c <NRF24L02_Write_Reg>:
  * 返 回 值: 无
  * 说    明：reg:指定寄存器地址
  *
  */
uint8_t NRF24L02_Write_Reg(uint8_t reg,uint8_t value)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	460a      	mov	r2, r1
 8003f86:	71fb      	strb	r3, [r7, #7]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	71bb      	strb	r3, [r7, #6]
	uint8_t status;
  NRF24L02_SPI_CS_ENABLE();                 //使能SPI传输
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	2120      	movs	r1, #32
 8003f90:	480c      	ldr	r0, [pc, #48]	@ (8003fc4 <NRF24L02_Write_Reg+0x48>)
 8003f92:	f7fd fc65 	bl	8001860 <HAL_GPIO_WritePin>
  status =SPIx_ReadWriteByte(&hspi_NRF24L02,reg);//发送寄存器号
 8003f96:	79fb      	ldrb	r3, [r7, #7]
 8003f98:	4619      	mov	r1, r3
 8003f9a:	480b      	ldr	r0, [pc, #44]	@ (8003fc8 <NRF24L02_Write_Reg+0x4c>)
 8003f9c:	f7ff fe32 	bl	8003c04 <SPIx_ReadWriteByte>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	73fb      	strb	r3, [r7, #15]
  SPIx_ReadWriteByte(&hspi_NRF24L02,value);      //写入寄存器的值
 8003fa4:	79bb      	ldrb	r3, [r7, #6]
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4807      	ldr	r0, [pc, #28]	@ (8003fc8 <NRF24L02_Write_Reg+0x4c>)
 8003faa:	f7ff fe2b 	bl	8003c04 <SPIx_ReadWriteByte>
  NRF24L02_SPI_CS_DISABLE();                 //禁止SPI传输
 8003fae:	2201      	movs	r2, #1
 8003fb0:	2120      	movs	r1, #32
 8003fb2:	4804      	ldr	r0, [pc, #16]	@ (8003fc4 <NRF24L02_Write_Reg+0x48>)
 8003fb4:	f7fd fc54 	bl	8001860 <HAL_GPIO_WritePin>
  return(status);       			//返回状态值
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	2000016c 	.word	0x2000016c

08003fcc <NRF24L02_Read_Reg>:
  * 返 回 值: 无
  * 说    明：reg:要读的寄存器
  *
  */
uint8_t NRF24L02_Read_Reg(uint8_t reg)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_val;
 	NRF24L02_SPI_CS_ENABLE();          //使能SPI传输
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2120      	movs	r1, #32
 8003fda:	480c      	ldr	r0, [pc, #48]	@ (800400c <NRF24L02_Read_Reg+0x40>)
 8003fdc:	f7fd fc40 	bl	8001860 <HAL_GPIO_WritePin>
  SPIx_ReadWriteByte(&hspi_NRF24L02,reg);   //发送寄存器号
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	480a      	ldr	r0, [pc, #40]	@ (8004010 <NRF24L02_Read_Reg+0x44>)
 8003fe6:	f7ff fe0d 	bl	8003c04 <SPIx_ReadWriteByte>
  reg_val=SPIx_ReadWriteByte(&hspi_NRF24L02,0XFF);//读取寄存器内容
 8003fea:	21ff      	movs	r1, #255	@ 0xff
 8003fec:	4808      	ldr	r0, [pc, #32]	@ (8004010 <NRF24L02_Read_Reg+0x44>)
 8003fee:	f7ff fe09 	bl	8003c04 <SPIx_ReadWriteByte>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	73fb      	strb	r3, [r7, #15]
  NRF24L02_SPI_CS_DISABLE();          //禁止SPI传输
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	2120      	movs	r1, #32
 8003ffa:	4804      	ldr	r0, [pc, #16]	@ (800400c <NRF24L02_Read_Reg+0x40>)
 8003ffc:	f7fd fc30 	bl	8001860 <HAL_GPIO_WritePin>
  return(reg_val);           //返回状态值
 8004000:	7bfb      	ldrb	r3, [r7, #15]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40021000 	.word	0x40021000
 8004010:	2000016c 	.word	0x2000016c

08004014 <NRF24L02_Read_Buf>:
  * 返 回 值: 此次读到的状态寄存器值
  * 说    明：无
  *
  */
uint8_t NRF24L02_Read_Buf(uint8_t reg,uint8_t *pBuf,uint8_t len)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	4603      	mov	r3, r0
 800401c:	6039      	str	r1, [r7, #0]
 800401e:	71fb      	strb	r3, [r7, #7]
 8004020:	4613      	mov	r3, r2
 8004022:	71bb      	strb	r3, [r7, #6]
	uint8_t status,uint8_t_ctr;

  NRF24L02_SPI_CS_ENABLE();           //使能SPI传输
 8004024:	2200      	movs	r2, #0
 8004026:	2120      	movs	r1, #32
 8004028:	4813      	ldr	r0, [pc, #76]	@ (8004078 <NRF24L02_Read_Buf+0x64>)
 800402a:	f7fd fc19 	bl	8001860 <HAL_GPIO_WritePin>
  status=SPIx_ReadWriteByte(&hspi_NRF24L02,reg);//发送寄存器值(位置),并读取状态值
 800402e:	79fb      	ldrb	r3, [r7, #7]
 8004030:	4619      	mov	r1, r3
 8004032:	4812      	ldr	r0, [pc, #72]	@ (800407c <NRF24L02_Read_Buf+0x68>)
 8004034:	f7ff fde6 	bl	8003c04 <SPIx_ReadWriteByte>
 8004038:	4603      	mov	r3, r0
 800403a:	73bb      	strb	r3, [r7, #14]
 	for(uint8_t_ctr=0;uint8_t_ctr<len;uint8_t_ctr++)
 800403c:	2300      	movs	r3, #0
 800403e:	73fb      	strb	r3, [r7, #15]
 8004040:	e00c      	b.n	800405c <NRF24L02_Read_Buf+0x48>
  {
    pBuf[uint8_t_ctr]=SPIx_ReadWriteByte(&hspi_NRF24L02,0XFF);//读出数据
 8004042:	21ff      	movs	r1, #255	@ 0xff
 8004044:	480d      	ldr	r0, [pc, #52]	@ (800407c <NRF24L02_Read_Buf+0x68>)
 8004046:	f7ff fddd 	bl	8003c04 <SPIx_ReadWriteByte>
 800404a:	4601      	mov	r1, r0
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	4413      	add	r3, r2
 8004052:	b2ca      	uxtb	r2, r1
 8004054:	701a      	strb	r2, [r3, #0]
 	for(uint8_t_ctr=0;uint8_t_ctr<len;uint8_t_ctr++)
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	3301      	adds	r3, #1
 800405a:	73fb      	strb	r3, [r7, #15]
 800405c:	7bfa      	ldrb	r2, [r7, #15]
 800405e:	79bb      	ldrb	r3, [r7, #6]
 8004060:	429a      	cmp	r2, r3
 8004062:	d3ee      	bcc.n	8004042 <NRF24L02_Read_Buf+0x2e>
  }
  NRF24L02_SPI_CS_DISABLE();       //关闭SPI传输
 8004064:	2201      	movs	r2, #1
 8004066:	2120      	movs	r1, #32
 8004068:	4803      	ldr	r0, [pc, #12]	@ (8004078 <NRF24L02_Read_Buf+0x64>)
 800406a:	f7fd fbf9 	bl	8001860 <HAL_GPIO_WritePin>
  return status;        //返回读到的状态值
 800406e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40021000 	.word	0x40021000
 800407c:	2000016c 	.word	0x2000016c

08004080 <NRF24L02_Write_Buf>:
  * 返 回 值: 无
  * 说    明：reg:寄存器(位置)  *pBuf:数据指针  len:数据长度
  *
  */
uint8_t NRF24L02_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	6039      	str	r1, [r7, #0]
 800408a:	71fb      	strb	r3, [r7, #7]
 800408c:	4613      	mov	r3, r2
 800408e:	71bb      	strb	r3, [r7, #6]
	uint8_t status,uint8_t_ctr;
 	NRF24L02_SPI_CS_ENABLE();          //使能SPI传输
 8004090:	2200      	movs	r2, #0
 8004092:	2120      	movs	r1, #32
 8004094:	4814      	ldr	r0, [pc, #80]	@ (80040e8 <NRF24L02_Write_Buf+0x68>)
 8004096:	f7fd fbe3 	bl	8001860 <HAL_GPIO_WritePin>
	status = SPIx_ReadWriteByte(&hspi_NRF24L02,reg);//发送寄存器值(位置),并读取状态值
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	4619      	mov	r1, r3
 800409e:	4813      	ldr	r0, [pc, #76]	@ (80040ec <NRF24L02_Write_Buf+0x6c>)
 80040a0:	f7ff fdb0 	bl	8003c04 <SPIx_ReadWriteByte>
 80040a4:	4603      	mov	r3, r0
 80040a6:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(1);
 80040a8:	2001      	movs	r0, #1
 80040aa:	f7fd f8ef 	bl	800128c <HAL_Delay>
	for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++)
 80040ae:	2300      	movs	r3, #0
 80040b0:	73fb      	strb	r3, [r7, #15]
 80040b2:	e00a      	b.n	80040ca <NRF24L02_Write_Buf+0x4a>
	{
		SPIx_ReadWriteByte(&hspi_NRF24L02,*pBuf++); //写入数据
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	603a      	str	r2, [r7, #0]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	4619      	mov	r1, r3
 80040be:	480b      	ldr	r0, [pc, #44]	@ (80040ec <NRF24L02_Write_Buf+0x6c>)
 80040c0:	f7ff fda0 	bl	8003c04 <SPIx_ReadWriteByte>
	for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++)
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	3301      	adds	r3, #1
 80040c8:	73fb      	strb	r3, [r7, #15]
 80040ca:	7bfa      	ldrb	r2, [r7, #15]
 80040cc:	79bb      	ldrb	r3, [r7, #6]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d3f0      	bcc.n	80040b4 <NRF24L02_Write_Buf+0x34>
	}
	NRF24L02_SPI_CS_DISABLE();       //关闭SPI传输
 80040d2:	2201      	movs	r2, #1
 80040d4:	2120      	movs	r1, #32
 80040d6:	4804      	ldr	r0, [pc, #16]	@ (80040e8 <NRF24L02_Write_Buf+0x68>)
 80040d8:	f7fd fbc2 	bl	8001860 <HAL_GPIO_WritePin>
	return status;          //返回读到的状态值
 80040dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40021000 	.word	0x40021000
 80040ec:	2000016c 	.word	0x2000016c

080040f0 <NRF24L02_RxPacket>:
  * 返 回 值: 无
  * 说    明：无
  *
  */
uint8_t NRF24L02_RxPacket(uint8_t *rxbuf)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
	uint8_t sta;
	sta=NRF24L02_Read_Reg(STATUS);  //读取状态寄存器的值
 80040f8:	2007      	movs	r0, #7
 80040fa:	f7ff ff67 	bl	8003fcc <NRF24L02_Read_Reg>
 80040fe:	4603      	mov	r3, r0
 8004100:	73fb      	strb	r3, [r7, #15]
	NRF24L02_Write_Reg(NRF_WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	4619      	mov	r1, r3
 8004106:	2027      	movs	r0, #39	@ 0x27
 8004108:	f7ff ff38 	bl	8003f7c <NRF24L02_Write_Reg>
	if(sta&RX_OK)//接收到数据
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <NRF24L02_RxPacket+0x3c>
	{
		NRF24L02_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);//读取数据
 8004116:	2220      	movs	r2, #32
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	2061      	movs	r0, #97	@ 0x61
 800411c:	f7ff ff7a 	bl	8004014 <NRF24L02_Read_Buf>
		NRF24L02_Write_Reg(FLUSH_RX,0xff);//清除RX FIFO寄存器
 8004120:	21ff      	movs	r1, #255	@ 0xff
 8004122:	20e2      	movs	r0, #226	@ 0xe2
 8004124:	f7ff ff2a 	bl	8003f7c <NRF24L02_Write_Reg>
		return 0;
 8004128:	2300      	movs	r3, #0
 800412a:	e000      	b.n	800412e <NRF24L02_RxPacket+0x3e>
	}
	return 1;//没收到任何数据
 800412c:	2301      	movs	r3, #1
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <NRF24L02_RX_Mode>:
  * 返 回 值: 无
  * 说    明：无
  *
  */
void NRF24L02_RX_Mode(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
	NRF24L02_CE_LOW();
 800413c:	2200      	movs	r2, #0
 800413e:	2110      	movs	r1, #16
 8004140:	4814      	ldr	r0, [pc, #80]	@ (8004194 <NRF24L02_RX_Mode+0x5c>)
 8004142:	f7fd fb8d 	bl	8001860 <HAL_GPIO_WritePin>
  NRF24L02_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0F);//配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC
 8004146:	210f      	movs	r1, #15
 8004148:	2020      	movs	r0, #32
 800414a:	f7ff ff17 	bl	8003f7c <NRF24L02_Write_Reg>
  NRF24L02_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);    //使能通道0的自动应答
 800414e:	2101      	movs	r1, #1
 8004150:	2021      	movs	r0, #33	@ 0x21
 8004152:	f7ff ff13 	bl	8003f7c <NRF24L02_Write_Reg>
  NRF24L02_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01);//使能通道0的接收地址
 8004156:	2101      	movs	r1, #1
 8004158:	2022      	movs	r0, #34	@ 0x22
 800415a:	f7ff ff0f 	bl	8003f7c <NRF24L02_Write_Reg>
  NRF24L02_Write_Reg(NRF_WRITE_REG+RF_CH,40);	     //设置RF通信频率
 800415e:	2128      	movs	r1, #40	@ 0x28
 8004160:	2025      	movs	r0, #37	@ 0x25
 8004162:	f7ff ff0b 	bl	8003f7c <NRF24L02_Write_Reg>
  NRF24L02_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);//设置TX发射参数,0db增益,2Mbps,低噪声增益开启
 8004166:	210f      	movs	r1, #15
 8004168:	2026      	movs	r0, #38	@ 0x26
 800416a:	f7ff ff07 	bl	8003f7c <NRF24L02_Write_Reg>

  NRF24L02_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);//选择通道0的有效数据宽度
 800416e:	2120      	movs	r1, #32
 8004170:	2031      	movs	r0, #49	@ 0x31
 8004172:	f7ff ff03 	bl	8003f7c <NRF24L02_Write_Reg>

  NRF24L02_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS2,RX_ADR_WIDTH);//写RX节点地址
 8004176:	2205      	movs	r2, #5
 8004178:	4907      	ldr	r1, [pc, #28]	@ (8004198 <NRF24L02_RX_Mode+0x60>)
 800417a:	202a      	movs	r0, #42	@ 0x2a
 800417c:	f7ff ff80 	bl	8004080 <NRF24L02_Write_Buf>

  NRF24L02_CE_HIGH(); //CE为高,进入接收模式
 8004180:	2201      	movs	r2, #1
 8004182:	2110      	movs	r1, #16
 8004184:	4803      	ldr	r0, [pc, #12]	@ (8004194 <NRF24L02_RX_Mode+0x5c>)
 8004186:	f7fd fb6b 	bl	8001860 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800418a:	2001      	movs	r0, #1
 800418c:	f7fd f87e 	bl	800128c <HAL_Delay>
}
 8004190:	bf00      	nop
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40021000 	.word	0x40021000
 8004198:	08005130 	.word	0x08005130

0800419c <std>:
 800419c:	2300      	movs	r3, #0
 800419e:	b510      	push	{r4, lr}
 80041a0:	4604      	mov	r4, r0
 80041a2:	e9c0 3300 	strd	r3, r3, [r0]
 80041a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041aa:	6083      	str	r3, [r0, #8]
 80041ac:	8181      	strh	r1, [r0, #12]
 80041ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80041b0:	81c2      	strh	r2, [r0, #14]
 80041b2:	6183      	str	r3, [r0, #24]
 80041b4:	4619      	mov	r1, r3
 80041b6:	2208      	movs	r2, #8
 80041b8:	305c      	adds	r0, #92	@ 0x5c
 80041ba:	f000 f9f9 	bl	80045b0 <memset>
 80041be:	4b0d      	ldr	r3, [pc, #52]	@ (80041f4 <std+0x58>)
 80041c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80041c2:	4b0d      	ldr	r3, [pc, #52]	@ (80041f8 <std+0x5c>)
 80041c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80041c6:	4b0d      	ldr	r3, [pc, #52]	@ (80041fc <std+0x60>)
 80041c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80041ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004200 <std+0x64>)
 80041cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80041ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004204 <std+0x68>)
 80041d0:	6224      	str	r4, [r4, #32]
 80041d2:	429c      	cmp	r4, r3
 80041d4:	d006      	beq.n	80041e4 <std+0x48>
 80041d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80041da:	4294      	cmp	r4, r2
 80041dc:	d002      	beq.n	80041e4 <std+0x48>
 80041de:	33d0      	adds	r3, #208	@ 0xd0
 80041e0:	429c      	cmp	r4, r3
 80041e2:	d105      	bne.n	80041f0 <std+0x54>
 80041e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80041e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041ec:	f000 ba58 	b.w	80046a0 <__retarget_lock_init_recursive>
 80041f0:	bd10      	pop	{r4, pc}
 80041f2:	bf00      	nop
 80041f4:	08004401 	.word	0x08004401
 80041f8:	08004423 	.word	0x08004423
 80041fc:	0800445b 	.word	0x0800445b
 8004200:	0800447f 	.word	0x0800447f
 8004204:	200002ec 	.word	0x200002ec

08004208 <stdio_exit_handler>:
 8004208:	4a02      	ldr	r2, [pc, #8]	@ (8004214 <stdio_exit_handler+0xc>)
 800420a:	4903      	ldr	r1, [pc, #12]	@ (8004218 <stdio_exit_handler+0x10>)
 800420c:	4803      	ldr	r0, [pc, #12]	@ (800421c <stdio_exit_handler+0x14>)
 800420e:	f000 b869 	b.w	80042e4 <_fwalk_sglue>
 8004212:	bf00      	nop
 8004214:	2000001c 	.word	0x2000001c
 8004218:	08004f41 	.word	0x08004f41
 800421c:	2000002c 	.word	0x2000002c

08004220 <cleanup_stdio>:
 8004220:	6841      	ldr	r1, [r0, #4]
 8004222:	4b0c      	ldr	r3, [pc, #48]	@ (8004254 <cleanup_stdio+0x34>)
 8004224:	4299      	cmp	r1, r3
 8004226:	b510      	push	{r4, lr}
 8004228:	4604      	mov	r4, r0
 800422a:	d001      	beq.n	8004230 <cleanup_stdio+0x10>
 800422c:	f000 fe88 	bl	8004f40 <_fflush_r>
 8004230:	68a1      	ldr	r1, [r4, #8]
 8004232:	4b09      	ldr	r3, [pc, #36]	@ (8004258 <cleanup_stdio+0x38>)
 8004234:	4299      	cmp	r1, r3
 8004236:	d002      	beq.n	800423e <cleanup_stdio+0x1e>
 8004238:	4620      	mov	r0, r4
 800423a:	f000 fe81 	bl	8004f40 <_fflush_r>
 800423e:	68e1      	ldr	r1, [r4, #12]
 8004240:	4b06      	ldr	r3, [pc, #24]	@ (800425c <cleanup_stdio+0x3c>)
 8004242:	4299      	cmp	r1, r3
 8004244:	d004      	beq.n	8004250 <cleanup_stdio+0x30>
 8004246:	4620      	mov	r0, r4
 8004248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800424c:	f000 be78 	b.w	8004f40 <_fflush_r>
 8004250:	bd10      	pop	{r4, pc}
 8004252:	bf00      	nop
 8004254:	200002ec 	.word	0x200002ec
 8004258:	20000354 	.word	0x20000354
 800425c:	200003bc 	.word	0x200003bc

08004260 <global_stdio_init.part.0>:
 8004260:	b510      	push	{r4, lr}
 8004262:	4b0b      	ldr	r3, [pc, #44]	@ (8004290 <global_stdio_init.part.0+0x30>)
 8004264:	4c0b      	ldr	r4, [pc, #44]	@ (8004294 <global_stdio_init.part.0+0x34>)
 8004266:	4a0c      	ldr	r2, [pc, #48]	@ (8004298 <global_stdio_init.part.0+0x38>)
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	4620      	mov	r0, r4
 800426c:	2200      	movs	r2, #0
 800426e:	2104      	movs	r1, #4
 8004270:	f7ff ff94 	bl	800419c <std>
 8004274:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004278:	2201      	movs	r2, #1
 800427a:	2109      	movs	r1, #9
 800427c:	f7ff ff8e 	bl	800419c <std>
 8004280:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004284:	2202      	movs	r2, #2
 8004286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800428a:	2112      	movs	r1, #18
 800428c:	f7ff bf86 	b.w	800419c <std>
 8004290:	20000424 	.word	0x20000424
 8004294:	200002ec 	.word	0x200002ec
 8004298:	08004209 	.word	0x08004209

0800429c <__sfp_lock_acquire>:
 800429c:	4801      	ldr	r0, [pc, #4]	@ (80042a4 <__sfp_lock_acquire+0x8>)
 800429e:	f000 ba00 	b.w	80046a2 <__retarget_lock_acquire_recursive>
 80042a2:	bf00      	nop
 80042a4:	2000042d 	.word	0x2000042d

080042a8 <__sfp_lock_release>:
 80042a8:	4801      	ldr	r0, [pc, #4]	@ (80042b0 <__sfp_lock_release+0x8>)
 80042aa:	f000 b9fb 	b.w	80046a4 <__retarget_lock_release_recursive>
 80042ae:	bf00      	nop
 80042b0:	2000042d 	.word	0x2000042d

080042b4 <__sinit>:
 80042b4:	b510      	push	{r4, lr}
 80042b6:	4604      	mov	r4, r0
 80042b8:	f7ff fff0 	bl	800429c <__sfp_lock_acquire>
 80042bc:	6a23      	ldr	r3, [r4, #32]
 80042be:	b11b      	cbz	r3, 80042c8 <__sinit+0x14>
 80042c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042c4:	f7ff bff0 	b.w	80042a8 <__sfp_lock_release>
 80042c8:	4b04      	ldr	r3, [pc, #16]	@ (80042dc <__sinit+0x28>)
 80042ca:	6223      	str	r3, [r4, #32]
 80042cc:	4b04      	ldr	r3, [pc, #16]	@ (80042e0 <__sinit+0x2c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1f5      	bne.n	80042c0 <__sinit+0xc>
 80042d4:	f7ff ffc4 	bl	8004260 <global_stdio_init.part.0>
 80042d8:	e7f2      	b.n	80042c0 <__sinit+0xc>
 80042da:	bf00      	nop
 80042dc:	08004221 	.word	0x08004221
 80042e0:	20000424 	.word	0x20000424

080042e4 <_fwalk_sglue>:
 80042e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042e8:	4607      	mov	r7, r0
 80042ea:	4688      	mov	r8, r1
 80042ec:	4614      	mov	r4, r2
 80042ee:	2600      	movs	r6, #0
 80042f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042f4:	f1b9 0901 	subs.w	r9, r9, #1
 80042f8:	d505      	bpl.n	8004306 <_fwalk_sglue+0x22>
 80042fa:	6824      	ldr	r4, [r4, #0]
 80042fc:	2c00      	cmp	r4, #0
 80042fe:	d1f7      	bne.n	80042f0 <_fwalk_sglue+0xc>
 8004300:	4630      	mov	r0, r6
 8004302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004306:	89ab      	ldrh	r3, [r5, #12]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d907      	bls.n	800431c <_fwalk_sglue+0x38>
 800430c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004310:	3301      	adds	r3, #1
 8004312:	d003      	beq.n	800431c <_fwalk_sglue+0x38>
 8004314:	4629      	mov	r1, r5
 8004316:	4638      	mov	r0, r7
 8004318:	47c0      	blx	r8
 800431a:	4306      	orrs	r6, r0
 800431c:	3568      	adds	r5, #104	@ 0x68
 800431e:	e7e9      	b.n	80042f4 <_fwalk_sglue+0x10>

08004320 <iprintf>:
 8004320:	b40f      	push	{r0, r1, r2, r3}
 8004322:	b507      	push	{r0, r1, r2, lr}
 8004324:	4906      	ldr	r1, [pc, #24]	@ (8004340 <iprintf+0x20>)
 8004326:	ab04      	add	r3, sp, #16
 8004328:	6808      	ldr	r0, [r1, #0]
 800432a:	f853 2b04 	ldr.w	r2, [r3], #4
 800432e:	6881      	ldr	r1, [r0, #8]
 8004330:	9301      	str	r3, [sp, #4]
 8004332:	f000 fadb 	bl	80048ec <_vfiprintf_r>
 8004336:	b003      	add	sp, #12
 8004338:	f85d eb04 	ldr.w	lr, [sp], #4
 800433c:	b004      	add	sp, #16
 800433e:	4770      	bx	lr
 8004340:	20000028 	.word	0x20000028

08004344 <_puts_r>:
 8004344:	6a03      	ldr	r3, [r0, #32]
 8004346:	b570      	push	{r4, r5, r6, lr}
 8004348:	6884      	ldr	r4, [r0, #8]
 800434a:	4605      	mov	r5, r0
 800434c:	460e      	mov	r6, r1
 800434e:	b90b      	cbnz	r3, 8004354 <_puts_r+0x10>
 8004350:	f7ff ffb0 	bl	80042b4 <__sinit>
 8004354:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004356:	07db      	lsls	r3, r3, #31
 8004358:	d405      	bmi.n	8004366 <_puts_r+0x22>
 800435a:	89a3      	ldrh	r3, [r4, #12]
 800435c:	0598      	lsls	r0, r3, #22
 800435e:	d402      	bmi.n	8004366 <_puts_r+0x22>
 8004360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004362:	f000 f99e 	bl	80046a2 <__retarget_lock_acquire_recursive>
 8004366:	89a3      	ldrh	r3, [r4, #12]
 8004368:	0719      	lsls	r1, r3, #28
 800436a:	d502      	bpl.n	8004372 <_puts_r+0x2e>
 800436c:	6923      	ldr	r3, [r4, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d135      	bne.n	80043de <_puts_r+0x9a>
 8004372:	4621      	mov	r1, r4
 8004374:	4628      	mov	r0, r5
 8004376:	f000 f8c5 	bl	8004504 <__swsetup_r>
 800437a:	b380      	cbz	r0, 80043de <_puts_r+0x9a>
 800437c:	f04f 35ff 	mov.w	r5, #4294967295
 8004380:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004382:	07da      	lsls	r2, r3, #31
 8004384:	d405      	bmi.n	8004392 <_puts_r+0x4e>
 8004386:	89a3      	ldrh	r3, [r4, #12]
 8004388:	059b      	lsls	r3, r3, #22
 800438a:	d402      	bmi.n	8004392 <_puts_r+0x4e>
 800438c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800438e:	f000 f989 	bl	80046a4 <__retarget_lock_release_recursive>
 8004392:	4628      	mov	r0, r5
 8004394:	bd70      	pop	{r4, r5, r6, pc}
 8004396:	2b00      	cmp	r3, #0
 8004398:	da04      	bge.n	80043a4 <_puts_r+0x60>
 800439a:	69a2      	ldr	r2, [r4, #24]
 800439c:	429a      	cmp	r2, r3
 800439e:	dc17      	bgt.n	80043d0 <_puts_r+0x8c>
 80043a0:	290a      	cmp	r1, #10
 80043a2:	d015      	beq.n	80043d0 <_puts_r+0x8c>
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	6022      	str	r2, [r4, #0]
 80043aa:	7019      	strb	r1, [r3, #0]
 80043ac:	68a3      	ldr	r3, [r4, #8]
 80043ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80043b2:	3b01      	subs	r3, #1
 80043b4:	60a3      	str	r3, [r4, #8]
 80043b6:	2900      	cmp	r1, #0
 80043b8:	d1ed      	bne.n	8004396 <_puts_r+0x52>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	da11      	bge.n	80043e2 <_puts_r+0x9e>
 80043be:	4622      	mov	r2, r4
 80043c0:	210a      	movs	r1, #10
 80043c2:	4628      	mov	r0, r5
 80043c4:	f000 f85f 	bl	8004486 <__swbuf_r>
 80043c8:	3001      	adds	r0, #1
 80043ca:	d0d7      	beq.n	800437c <_puts_r+0x38>
 80043cc:	250a      	movs	r5, #10
 80043ce:	e7d7      	b.n	8004380 <_puts_r+0x3c>
 80043d0:	4622      	mov	r2, r4
 80043d2:	4628      	mov	r0, r5
 80043d4:	f000 f857 	bl	8004486 <__swbuf_r>
 80043d8:	3001      	adds	r0, #1
 80043da:	d1e7      	bne.n	80043ac <_puts_r+0x68>
 80043dc:	e7ce      	b.n	800437c <_puts_r+0x38>
 80043de:	3e01      	subs	r6, #1
 80043e0:	e7e4      	b.n	80043ac <_puts_r+0x68>
 80043e2:	6823      	ldr	r3, [r4, #0]
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	6022      	str	r2, [r4, #0]
 80043e8:	220a      	movs	r2, #10
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	e7ee      	b.n	80043cc <_puts_r+0x88>
	...

080043f0 <puts>:
 80043f0:	4b02      	ldr	r3, [pc, #8]	@ (80043fc <puts+0xc>)
 80043f2:	4601      	mov	r1, r0
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	f7ff bfa5 	b.w	8004344 <_puts_r>
 80043fa:	bf00      	nop
 80043fc:	20000028 	.word	0x20000028

08004400 <__sread>:
 8004400:	b510      	push	{r4, lr}
 8004402:	460c      	mov	r4, r1
 8004404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004408:	f000 f8fc 	bl	8004604 <_read_r>
 800440c:	2800      	cmp	r0, #0
 800440e:	bfab      	itete	ge
 8004410:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004412:	89a3      	ldrhlt	r3, [r4, #12]
 8004414:	181b      	addge	r3, r3, r0
 8004416:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800441a:	bfac      	ite	ge
 800441c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800441e:	81a3      	strhlt	r3, [r4, #12]
 8004420:	bd10      	pop	{r4, pc}

08004422 <__swrite>:
 8004422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004426:	461f      	mov	r7, r3
 8004428:	898b      	ldrh	r3, [r1, #12]
 800442a:	05db      	lsls	r3, r3, #23
 800442c:	4605      	mov	r5, r0
 800442e:	460c      	mov	r4, r1
 8004430:	4616      	mov	r6, r2
 8004432:	d505      	bpl.n	8004440 <__swrite+0x1e>
 8004434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004438:	2302      	movs	r3, #2
 800443a:	2200      	movs	r2, #0
 800443c:	f000 f8d0 	bl	80045e0 <_lseek_r>
 8004440:	89a3      	ldrh	r3, [r4, #12]
 8004442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004446:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800444a:	81a3      	strh	r3, [r4, #12]
 800444c:	4632      	mov	r2, r6
 800444e:	463b      	mov	r3, r7
 8004450:	4628      	mov	r0, r5
 8004452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004456:	f000 b8e7 	b.w	8004628 <_write_r>

0800445a <__sseek>:
 800445a:	b510      	push	{r4, lr}
 800445c:	460c      	mov	r4, r1
 800445e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004462:	f000 f8bd 	bl	80045e0 <_lseek_r>
 8004466:	1c43      	adds	r3, r0, #1
 8004468:	89a3      	ldrh	r3, [r4, #12]
 800446a:	bf15      	itete	ne
 800446c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800446e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004472:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004476:	81a3      	strheq	r3, [r4, #12]
 8004478:	bf18      	it	ne
 800447a:	81a3      	strhne	r3, [r4, #12]
 800447c:	bd10      	pop	{r4, pc}

0800447e <__sclose>:
 800447e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004482:	f000 b89d 	b.w	80045c0 <_close_r>

08004486 <__swbuf_r>:
 8004486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004488:	460e      	mov	r6, r1
 800448a:	4614      	mov	r4, r2
 800448c:	4605      	mov	r5, r0
 800448e:	b118      	cbz	r0, 8004498 <__swbuf_r+0x12>
 8004490:	6a03      	ldr	r3, [r0, #32]
 8004492:	b90b      	cbnz	r3, 8004498 <__swbuf_r+0x12>
 8004494:	f7ff ff0e 	bl	80042b4 <__sinit>
 8004498:	69a3      	ldr	r3, [r4, #24]
 800449a:	60a3      	str	r3, [r4, #8]
 800449c:	89a3      	ldrh	r3, [r4, #12]
 800449e:	071a      	lsls	r2, r3, #28
 80044a0:	d501      	bpl.n	80044a6 <__swbuf_r+0x20>
 80044a2:	6923      	ldr	r3, [r4, #16]
 80044a4:	b943      	cbnz	r3, 80044b8 <__swbuf_r+0x32>
 80044a6:	4621      	mov	r1, r4
 80044a8:	4628      	mov	r0, r5
 80044aa:	f000 f82b 	bl	8004504 <__swsetup_r>
 80044ae:	b118      	cbz	r0, 80044b8 <__swbuf_r+0x32>
 80044b0:	f04f 37ff 	mov.w	r7, #4294967295
 80044b4:	4638      	mov	r0, r7
 80044b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	6922      	ldr	r2, [r4, #16]
 80044bc:	1a98      	subs	r0, r3, r2
 80044be:	6963      	ldr	r3, [r4, #20]
 80044c0:	b2f6      	uxtb	r6, r6
 80044c2:	4283      	cmp	r3, r0
 80044c4:	4637      	mov	r7, r6
 80044c6:	dc05      	bgt.n	80044d4 <__swbuf_r+0x4e>
 80044c8:	4621      	mov	r1, r4
 80044ca:	4628      	mov	r0, r5
 80044cc:	f000 fd38 	bl	8004f40 <_fflush_r>
 80044d0:	2800      	cmp	r0, #0
 80044d2:	d1ed      	bne.n	80044b0 <__swbuf_r+0x2a>
 80044d4:	68a3      	ldr	r3, [r4, #8]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	60a3      	str	r3, [r4, #8]
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	6022      	str	r2, [r4, #0]
 80044e0:	701e      	strb	r6, [r3, #0]
 80044e2:	6962      	ldr	r2, [r4, #20]
 80044e4:	1c43      	adds	r3, r0, #1
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d004      	beq.n	80044f4 <__swbuf_r+0x6e>
 80044ea:	89a3      	ldrh	r3, [r4, #12]
 80044ec:	07db      	lsls	r3, r3, #31
 80044ee:	d5e1      	bpl.n	80044b4 <__swbuf_r+0x2e>
 80044f0:	2e0a      	cmp	r6, #10
 80044f2:	d1df      	bne.n	80044b4 <__swbuf_r+0x2e>
 80044f4:	4621      	mov	r1, r4
 80044f6:	4628      	mov	r0, r5
 80044f8:	f000 fd22 	bl	8004f40 <_fflush_r>
 80044fc:	2800      	cmp	r0, #0
 80044fe:	d0d9      	beq.n	80044b4 <__swbuf_r+0x2e>
 8004500:	e7d6      	b.n	80044b0 <__swbuf_r+0x2a>
	...

08004504 <__swsetup_r>:
 8004504:	b538      	push	{r3, r4, r5, lr}
 8004506:	4b29      	ldr	r3, [pc, #164]	@ (80045ac <__swsetup_r+0xa8>)
 8004508:	4605      	mov	r5, r0
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	460c      	mov	r4, r1
 800450e:	b118      	cbz	r0, 8004518 <__swsetup_r+0x14>
 8004510:	6a03      	ldr	r3, [r0, #32]
 8004512:	b90b      	cbnz	r3, 8004518 <__swsetup_r+0x14>
 8004514:	f7ff fece 	bl	80042b4 <__sinit>
 8004518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800451c:	0719      	lsls	r1, r3, #28
 800451e:	d422      	bmi.n	8004566 <__swsetup_r+0x62>
 8004520:	06da      	lsls	r2, r3, #27
 8004522:	d407      	bmi.n	8004534 <__swsetup_r+0x30>
 8004524:	2209      	movs	r2, #9
 8004526:	602a      	str	r2, [r5, #0]
 8004528:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800452c:	81a3      	strh	r3, [r4, #12]
 800452e:	f04f 30ff 	mov.w	r0, #4294967295
 8004532:	e033      	b.n	800459c <__swsetup_r+0x98>
 8004534:	0758      	lsls	r0, r3, #29
 8004536:	d512      	bpl.n	800455e <__swsetup_r+0x5a>
 8004538:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800453a:	b141      	cbz	r1, 800454e <__swsetup_r+0x4a>
 800453c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004540:	4299      	cmp	r1, r3
 8004542:	d002      	beq.n	800454a <__swsetup_r+0x46>
 8004544:	4628      	mov	r0, r5
 8004546:	f000 f8af 	bl	80046a8 <_free_r>
 800454a:	2300      	movs	r3, #0
 800454c:	6363      	str	r3, [r4, #52]	@ 0x34
 800454e:	89a3      	ldrh	r3, [r4, #12]
 8004550:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004554:	81a3      	strh	r3, [r4, #12]
 8004556:	2300      	movs	r3, #0
 8004558:	6063      	str	r3, [r4, #4]
 800455a:	6923      	ldr	r3, [r4, #16]
 800455c:	6023      	str	r3, [r4, #0]
 800455e:	89a3      	ldrh	r3, [r4, #12]
 8004560:	f043 0308 	orr.w	r3, r3, #8
 8004564:	81a3      	strh	r3, [r4, #12]
 8004566:	6923      	ldr	r3, [r4, #16]
 8004568:	b94b      	cbnz	r3, 800457e <__swsetup_r+0x7a>
 800456a:	89a3      	ldrh	r3, [r4, #12]
 800456c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004574:	d003      	beq.n	800457e <__swsetup_r+0x7a>
 8004576:	4621      	mov	r1, r4
 8004578:	4628      	mov	r0, r5
 800457a:	f000 fd2f 	bl	8004fdc <__smakebuf_r>
 800457e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004582:	f013 0201 	ands.w	r2, r3, #1
 8004586:	d00a      	beq.n	800459e <__swsetup_r+0x9a>
 8004588:	2200      	movs	r2, #0
 800458a:	60a2      	str	r2, [r4, #8]
 800458c:	6962      	ldr	r2, [r4, #20]
 800458e:	4252      	negs	r2, r2
 8004590:	61a2      	str	r2, [r4, #24]
 8004592:	6922      	ldr	r2, [r4, #16]
 8004594:	b942      	cbnz	r2, 80045a8 <__swsetup_r+0xa4>
 8004596:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800459a:	d1c5      	bne.n	8004528 <__swsetup_r+0x24>
 800459c:	bd38      	pop	{r3, r4, r5, pc}
 800459e:	0799      	lsls	r1, r3, #30
 80045a0:	bf58      	it	pl
 80045a2:	6962      	ldrpl	r2, [r4, #20]
 80045a4:	60a2      	str	r2, [r4, #8]
 80045a6:	e7f4      	b.n	8004592 <__swsetup_r+0x8e>
 80045a8:	2000      	movs	r0, #0
 80045aa:	e7f7      	b.n	800459c <__swsetup_r+0x98>
 80045ac:	20000028 	.word	0x20000028

080045b0 <memset>:
 80045b0:	4402      	add	r2, r0
 80045b2:	4603      	mov	r3, r0
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d100      	bne.n	80045ba <memset+0xa>
 80045b8:	4770      	bx	lr
 80045ba:	f803 1b01 	strb.w	r1, [r3], #1
 80045be:	e7f9      	b.n	80045b4 <memset+0x4>

080045c0 <_close_r>:
 80045c0:	b538      	push	{r3, r4, r5, lr}
 80045c2:	4d06      	ldr	r5, [pc, #24]	@ (80045dc <_close_r+0x1c>)
 80045c4:	2300      	movs	r3, #0
 80045c6:	4604      	mov	r4, r0
 80045c8:	4608      	mov	r0, r1
 80045ca:	602b      	str	r3, [r5, #0]
 80045cc:	f7fc fb99 	bl	8000d02 <_close>
 80045d0:	1c43      	adds	r3, r0, #1
 80045d2:	d102      	bne.n	80045da <_close_r+0x1a>
 80045d4:	682b      	ldr	r3, [r5, #0]
 80045d6:	b103      	cbz	r3, 80045da <_close_r+0x1a>
 80045d8:	6023      	str	r3, [r4, #0]
 80045da:	bd38      	pop	{r3, r4, r5, pc}
 80045dc:	20000428 	.word	0x20000428

080045e0 <_lseek_r>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	4d07      	ldr	r5, [pc, #28]	@ (8004600 <_lseek_r+0x20>)
 80045e4:	4604      	mov	r4, r0
 80045e6:	4608      	mov	r0, r1
 80045e8:	4611      	mov	r1, r2
 80045ea:	2200      	movs	r2, #0
 80045ec:	602a      	str	r2, [r5, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	f7fc fbae 	bl	8000d50 <_lseek>
 80045f4:	1c43      	adds	r3, r0, #1
 80045f6:	d102      	bne.n	80045fe <_lseek_r+0x1e>
 80045f8:	682b      	ldr	r3, [r5, #0]
 80045fa:	b103      	cbz	r3, 80045fe <_lseek_r+0x1e>
 80045fc:	6023      	str	r3, [r4, #0]
 80045fe:	bd38      	pop	{r3, r4, r5, pc}
 8004600:	20000428 	.word	0x20000428

08004604 <_read_r>:
 8004604:	b538      	push	{r3, r4, r5, lr}
 8004606:	4d07      	ldr	r5, [pc, #28]	@ (8004624 <_read_r+0x20>)
 8004608:	4604      	mov	r4, r0
 800460a:	4608      	mov	r0, r1
 800460c:	4611      	mov	r1, r2
 800460e:	2200      	movs	r2, #0
 8004610:	602a      	str	r2, [r5, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	f7fc fb3c 	bl	8000c90 <_read>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	d102      	bne.n	8004622 <_read_r+0x1e>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	b103      	cbz	r3, 8004622 <_read_r+0x1e>
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	bd38      	pop	{r3, r4, r5, pc}
 8004624:	20000428 	.word	0x20000428

08004628 <_write_r>:
 8004628:	b538      	push	{r3, r4, r5, lr}
 800462a:	4d07      	ldr	r5, [pc, #28]	@ (8004648 <_write_r+0x20>)
 800462c:	4604      	mov	r4, r0
 800462e:	4608      	mov	r0, r1
 8004630:	4611      	mov	r1, r2
 8004632:	2200      	movs	r2, #0
 8004634:	602a      	str	r2, [r5, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	f7fc fb47 	bl	8000cca <_write>
 800463c:	1c43      	adds	r3, r0, #1
 800463e:	d102      	bne.n	8004646 <_write_r+0x1e>
 8004640:	682b      	ldr	r3, [r5, #0]
 8004642:	b103      	cbz	r3, 8004646 <_write_r+0x1e>
 8004644:	6023      	str	r3, [r4, #0]
 8004646:	bd38      	pop	{r3, r4, r5, pc}
 8004648:	20000428 	.word	0x20000428

0800464c <__errno>:
 800464c:	4b01      	ldr	r3, [pc, #4]	@ (8004654 <__errno+0x8>)
 800464e:	6818      	ldr	r0, [r3, #0]
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	20000028 	.word	0x20000028

08004658 <__libc_init_array>:
 8004658:	b570      	push	{r4, r5, r6, lr}
 800465a:	4d0d      	ldr	r5, [pc, #52]	@ (8004690 <__libc_init_array+0x38>)
 800465c:	4c0d      	ldr	r4, [pc, #52]	@ (8004694 <__libc_init_array+0x3c>)
 800465e:	1b64      	subs	r4, r4, r5
 8004660:	10a4      	asrs	r4, r4, #2
 8004662:	2600      	movs	r6, #0
 8004664:	42a6      	cmp	r6, r4
 8004666:	d109      	bne.n	800467c <__libc_init_array+0x24>
 8004668:	4d0b      	ldr	r5, [pc, #44]	@ (8004698 <__libc_init_array+0x40>)
 800466a:	4c0c      	ldr	r4, [pc, #48]	@ (800469c <__libc_init_array+0x44>)
 800466c:	f000 fd24 	bl	80050b8 <_init>
 8004670:	1b64      	subs	r4, r4, r5
 8004672:	10a4      	asrs	r4, r4, #2
 8004674:	2600      	movs	r6, #0
 8004676:	42a6      	cmp	r6, r4
 8004678:	d105      	bne.n	8004686 <__libc_init_array+0x2e>
 800467a:	bd70      	pop	{r4, r5, r6, pc}
 800467c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004680:	4798      	blx	r3
 8004682:	3601      	adds	r6, #1
 8004684:	e7ee      	b.n	8004664 <__libc_init_array+0xc>
 8004686:	f855 3b04 	ldr.w	r3, [r5], #4
 800468a:	4798      	blx	r3
 800468c:	3601      	adds	r6, #1
 800468e:	e7f2      	b.n	8004676 <__libc_init_array+0x1e>
 8004690:	08005170 	.word	0x08005170
 8004694:	08005170 	.word	0x08005170
 8004698:	08005170 	.word	0x08005170
 800469c:	08005174 	.word	0x08005174

080046a0 <__retarget_lock_init_recursive>:
 80046a0:	4770      	bx	lr

080046a2 <__retarget_lock_acquire_recursive>:
 80046a2:	4770      	bx	lr

080046a4 <__retarget_lock_release_recursive>:
 80046a4:	4770      	bx	lr
	...

080046a8 <_free_r>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	4605      	mov	r5, r0
 80046ac:	2900      	cmp	r1, #0
 80046ae:	d041      	beq.n	8004734 <_free_r+0x8c>
 80046b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046b4:	1f0c      	subs	r4, r1, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	bfb8      	it	lt
 80046ba:	18e4      	addlt	r4, r4, r3
 80046bc:	f000 f8e0 	bl	8004880 <__malloc_lock>
 80046c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004738 <_free_r+0x90>)
 80046c2:	6813      	ldr	r3, [r2, #0]
 80046c4:	b933      	cbnz	r3, 80046d4 <_free_r+0x2c>
 80046c6:	6063      	str	r3, [r4, #4]
 80046c8:	6014      	str	r4, [r2, #0]
 80046ca:	4628      	mov	r0, r5
 80046cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046d0:	f000 b8dc 	b.w	800488c <__malloc_unlock>
 80046d4:	42a3      	cmp	r3, r4
 80046d6:	d908      	bls.n	80046ea <_free_r+0x42>
 80046d8:	6820      	ldr	r0, [r4, #0]
 80046da:	1821      	adds	r1, r4, r0
 80046dc:	428b      	cmp	r3, r1
 80046de:	bf01      	itttt	eq
 80046e0:	6819      	ldreq	r1, [r3, #0]
 80046e2:	685b      	ldreq	r3, [r3, #4]
 80046e4:	1809      	addeq	r1, r1, r0
 80046e6:	6021      	streq	r1, [r4, #0]
 80046e8:	e7ed      	b.n	80046c6 <_free_r+0x1e>
 80046ea:	461a      	mov	r2, r3
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	b10b      	cbz	r3, 80046f4 <_free_r+0x4c>
 80046f0:	42a3      	cmp	r3, r4
 80046f2:	d9fa      	bls.n	80046ea <_free_r+0x42>
 80046f4:	6811      	ldr	r1, [r2, #0]
 80046f6:	1850      	adds	r0, r2, r1
 80046f8:	42a0      	cmp	r0, r4
 80046fa:	d10b      	bne.n	8004714 <_free_r+0x6c>
 80046fc:	6820      	ldr	r0, [r4, #0]
 80046fe:	4401      	add	r1, r0
 8004700:	1850      	adds	r0, r2, r1
 8004702:	4283      	cmp	r3, r0
 8004704:	6011      	str	r1, [r2, #0]
 8004706:	d1e0      	bne.n	80046ca <_free_r+0x22>
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	6053      	str	r3, [r2, #4]
 800470e:	4408      	add	r0, r1
 8004710:	6010      	str	r0, [r2, #0]
 8004712:	e7da      	b.n	80046ca <_free_r+0x22>
 8004714:	d902      	bls.n	800471c <_free_r+0x74>
 8004716:	230c      	movs	r3, #12
 8004718:	602b      	str	r3, [r5, #0]
 800471a:	e7d6      	b.n	80046ca <_free_r+0x22>
 800471c:	6820      	ldr	r0, [r4, #0]
 800471e:	1821      	adds	r1, r4, r0
 8004720:	428b      	cmp	r3, r1
 8004722:	bf04      	itt	eq
 8004724:	6819      	ldreq	r1, [r3, #0]
 8004726:	685b      	ldreq	r3, [r3, #4]
 8004728:	6063      	str	r3, [r4, #4]
 800472a:	bf04      	itt	eq
 800472c:	1809      	addeq	r1, r1, r0
 800472e:	6021      	streq	r1, [r4, #0]
 8004730:	6054      	str	r4, [r2, #4]
 8004732:	e7ca      	b.n	80046ca <_free_r+0x22>
 8004734:	bd38      	pop	{r3, r4, r5, pc}
 8004736:	bf00      	nop
 8004738:	20000434 	.word	0x20000434

0800473c <sbrk_aligned>:
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	4e0f      	ldr	r6, [pc, #60]	@ (800477c <sbrk_aligned+0x40>)
 8004740:	460c      	mov	r4, r1
 8004742:	6831      	ldr	r1, [r6, #0]
 8004744:	4605      	mov	r5, r0
 8004746:	b911      	cbnz	r1, 800474e <sbrk_aligned+0x12>
 8004748:	f000 fca6 	bl	8005098 <_sbrk_r>
 800474c:	6030      	str	r0, [r6, #0]
 800474e:	4621      	mov	r1, r4
 8004750:	4628      	mov	r0, r5
 8004752:	f000 fca1 	bl	8005098 <_sbrk_r>
 8004756:	1c43      	adds	r3, r0, #1
 8004758:	d103      	bne.n	8004762 <sbrk_aligned+0x26>
 800475a:	f04f 34ff 	mov.w	r4, #4294967295
 800475e:	4620      	mov	r0, r4
 8004760:	bd70      	pop	{r4, r5, r6, pc}
 8004762:	1cc4      	adds	r4, r0, #3
 8004764:	f024 0403 	bic.w	r4, r4, #3
 8004768:	42a0      	cmp	r0, r4
 800476a:	d0f8      	beq.n	800475e <sbrk_aligned+0x22>
 800476c:	1a21      	subs	r1, r4, r0
 800476e:	4628      	mov	r0, r5
 8004770:	f000 fc92 	bl	8005098 <_sbrk_r>
 8004774:	3001      	adds	r0, #1
 8004776:	d1f2      	bne.n	800475e <sbrk_aligned+0x22>
 8004778:	e7ef      	b.n	800475a <sbrk_aligned+0x1e>
 800477a:	bf00      	nop
 800477c:	20000430 	.word	0x20000430

08004780 <_malloc_r>:
 8004780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004784:	1ccd      	adds	r5, r1, #3
 8004786:	f025 0503 	bic.w	r5, r5, #3
 800478a:	3508      	adds	r5, #8
 800478c:	2d0c      	cmp	r5, #12
 800478e:	bf38      	it	cc
 8004790:	250c      	movcc	r5, #12
 8004792:	2d00      	cmp	r5, #0
 8004794:	4606      	mov	r6, r0
 8004796:	db01      	blt.n	800479c <_malloc_r+0x1c>
 8004798:	42a9      	cmp	r1, r5
 800479a:	d904      	bls.n	80047a6 <_malloc_r+0x26>
 800479c:	230c      	movs	r3, #12
 800479e:	6033      	str	r3, [r6, #0]
 80047a0:	2000      	movs	r0, #0
 80047a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800487c <_malloc_r+0xfc>
 80047aa:	f000 f869 	bl	8004880 <__malloc_lock>
 80047ae:	f8d8 3000 	ldr.w	r3, [r8]
 80047b2:	461c      	mov	r4, r3
 80047b4:	bb44      	cbnz	r4, 8004808 <_malloc_r+0x88>
 80047b6:	4629      	mov	r1, r5
 80047b8:	4630      	mov	r0, r6
 80047ba:	f7ff ffbf 	bl	800473c <sbrk_aligned>
 80047be:	1c43      	adds	r3, r0, #1
 80047c0:	4604      	mov	r4, r0
 80047c2:	d158      	bne.n	8004876 <_malloc_r+0xf6>
 80047c4:	f8d8 4000 	ldr.w	r4, [r8]
 80047c8:	4627      	mov	r7, r4
 80047ca:	2f00      	cmp	r7, #0
 80047cc:	d143      	bne.n	8004856 <_malloc_r+0xd6>
 80047ce:	2c00      	cmp	r4, #0
 80047d0:	d04b      	beq.n	800486a <_malloc_r+0xea>
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	4639      	mov	r1, r7
 80047d6:	4630      	mov	r0, r6
 80047d8:	eb04 0903 	add.w	r9, r4, r3
 80047dc:	f000 fc5c 	bl	8005098 <_sbrk_r>
 80047e0:	4581      	cmp	r9, r0
 80047e2:	d142      	bne.n	800486a <_malloc_r+0xea>
 80047e4:	6821      	ldr	r1, [r4, #0]
 80047e6:	1a6d      	subs	r5, r5, r1
 80047e8:	4629      	mov	r1, r5
 80047ea:	4630      	mov	r0, r6
 80047ec:	f7ff ffa6 	bl	800473c <sbrk_aligned>
 80047f0:	3001      	adds	r0, #1
 80047f2:	d03a      	beq.n	800486a <_malloc_r+0xea>
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	442b      	add	r3, r5
 80047f8:	6023      	str	r3, [r4, #0]
 80047fa:	f8d8 3000 	ldr.w	r3, [r8]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	bb62      	cbnz	r2, 800485c <_malloc_r+0xdc>
 8004802:	f8c8 7000 	str.w	r7, [r8]
 8004806:	e00f      	b.n	8004828 <_malloc_r+0xa8>
 8004808:	6822      	ldr	r2, [r4, #0]
 800480a:	1b52      	subs	r2, r2, r5
 800480c:	d420      	bmi.n	8004850 <_malloc_r+0xd0>
 800480e:	2a0b      	cmp	r2, #11
 8004810:	d917      	bls.n	8004842 <_malloc_r+0xc2>
 8004812:	1961      	adds	r1, r4, r5
 8004814:	42a3      	cmp	r3, r4
 8004816:	6025      	str	r5, [r4, #0]
 8004818:	bf18      	it	ne
 800481a:	6059      	strne	r1, [r3, #4]
 800481c:	6863      	ldr	r3, [r4, #4]
 800481e:	bf08      	it	eq
 8004820:	f8c8 1000 	streq.w	r1, [r8]
 8004824:	5162      	str	r2, [r4, r5]
 8004826:	604b      	str	r3, [r1, #4]
 8004828:	4630      	mov	r0, r6
 800482a:	f000 f82f 	bl	800488c <__malloc_unlock>
 800482e:	f104 000b 	add.w	r0, r4, #11
 8004832:	1d23      	adds	r3, r4, #4
 8004834:	f020 0007 	bic.w	r0, r0, #7
 8004838:	1ac2      	subs	r2, r0, r3
 800483a:	bf1c      	itt	ne
 800483c:	1a1b      	subne	r3, r3, r0
 800483e:	50a3      	strne	r3, [r4, r2]
 8004840:	e7af      	b.n	80047a2 <_malloc_r+0x22>
 8004842:	6862      	ldr	r2, [r4, #4]
 8004844:	42a3      	cmp	r3, r4
 8004846:	bf0c      	ite	eq
 8004848:	f8c8 2000 	streq.w	r2, [r8]
 800484c:	605a      	strne	r2, [r3, #4]
 800484e:	e7eb      	b.n	8004828 <_malloc_r+0xa8>
 8004850:	4623      	mov	r3, r4
 8004852:	6864      	ldr	r4, [r4, #4]
 8004854:	e7ae      	b.n	80047b4 <_malloc_r+0x34>
 8004856:	463c      	mov	r4, r7
 8004858:	687f      	ldr	r7, [r7, #4]
 800485a:	e7b6      	b.n	80047ca <_malloc_r+0x4a>
 800485c:	461a      	mov	r2, r3
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	42a3      	cmp	r3, r4
 8004862:	d1fb      	bne.n	800485c <_malloc_r+0xdc>
 8004864:	2300      	movs	r3, #0
 8004866:	6053      	str	r3, [r2, #4]
 8004868:	e7de      	b.n	8004828 <_malloc_r+0xa8>
 800486a:	230c      	movs	r3, #12
 800486c:	6033      	str	r3, [r6, #0]
 800486e:	4630      	mov	r0, r6
 8004870:	f000 f80c 	bl	800488c <__malloc_unlock>
 8004874:	e794      	b.n	80047a0 <_malloc_r+0x20>
 8004876:	6005      	str	r5, [r0, #0]
 8004878:	e7d6      	b.n	8004828 <_malloc_r+0xa8>
 800487a:	bf00      	nop
 800487c:	20000434 	.word	0x20000434

08004880 <__malloc_lock>:
 8004880:	4801      	ldr	r0, [pc, #4]	@ (8004888 <__malloc_lock+0x8>)
 8004882:	f7ff bf0e 	b.w	80046a2 <__retarget_lock_acquire_recursive>
 8004886:	bf00      	nop
 8004888:	2000042c 	.word	0x2000042c

0800488c <__malloc_unlock>:
 800488c:	4801      	ldr	r0, [pc, #4]	@ (8004894 <__malloc_unlock+0x8>)
 800488e:	f7ff bf09 	b.w	80046a4 <__retarget_lock_release_recursive>
 8004892:	bf00      	nop
 8004894:	2000042c 	.word	0x2000042c

08004898 <__sfputc_r>:
 8004898:	6893      	ldr	r3, [r2, #8]
 800489a:	3b01      	subs	r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	b410      	push	{r4}
 80048a0:	6093      	str	r3, [r2, #8]
 80048a2:	da08      	bge.n	80048b6 <__sfputc_r+0x1e>
 80048a4:	6994      	ldr	r4, [r2, #24]
 80048a6:	42a3      	cmp	r3, r4
 80048a8:	db01      	blt.n	80048ae <__sfputc_r+0x16>
 80048aa:	290a      	cmp	r1, #10
 80048ac:	d103      	bne.n	80048b6 <__sfputc_r+0x1e>
 80048ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048b2:	f7ff bde8 	b.w	8004486 <__swbuf_r>
 80048b6:	6813      	ldr	r3, [r2, #0]
 80048b8:	1c58      	adds	r0, r3, #1
 80048ba:	6010      	str	r0, [r2, #0]
 80048bc:	7019      	strb	r1, [r3, #0]
 80048be:	4608      	mov	r0, r1
 80048c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <__sfputs_r>:
 80048c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c8:	4606      	mov	r6, r0
 80048ca:	460f      	mov	r7, r1
 80048cc:	4614      	mov	r4, r2
 80048ce:	18d5      	adds	r5, r2, r3
 80048d0:	42ac      	cmp	r4, r5
 80048d2:	d101      	bne.n	80048d8 <__sfputs_r+0x12>
 80048d4:	2000      	movs	r0, #0
 80048d6:	e007      	b.n	80048e8 <__sfputs_r+0x22>
 80048d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048dc:	463a      	mov	r2, r7
 80048de:	4630      	mov	r0, r6
 80048e0:	f7ff ffda 	bl	8004898 <__sfputc_r>
 80048e4:	1c43      	adds	r3, r0, #1
 80048e6:	d1f3      	bne.n	80048d0 <__sfputs_r+0xa>
 80048e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048ec <_vfiprintf_r>:
 80048ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f0:	460d      	mov	r5, r1
 80048f2:	b09d      	sub	sp, #116	@ 0x74
 80048f4:	4614      	mov	r4, r2
 80048f6:	4698      	mov	r8, r3
 80048f8:	4606      	mov	r6, r0
 80048fa:	b118      	cbz	r0, 8004904 <_vfiprintf_r+0x18>
 80048fc:	6a03      	ldr	r3, [r0, #32]
 80048fe:	b90b      	cbnz	r3, 8004904 <_vfiprintf_r+0x18>
 8004900:	f7ff fcd8 	bl	80042b4 <__sinit>
 8004904:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004906:	07d9      	lsls	r1, r3, #31
 8004908:	d405      	bmi.n	8004916 <_vfiprintf_r+0x2a>
 800490a:	89ab      	ldrh	r3, [r5, #12]
 800490c:	059a      	lsls	r2, r3, #22
 800490e:	d402      	bmi.n	8004916 <_vfiprintf_r+0x2a>
 8004910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004912:	f7ff fec6 	bl	80046a2 <__retarget_lock_acquire_recursive>
 8004916:	89ab      	ldrh	r3, [r5, #12]
 8004918:	071b      	lsls	r3, r3, #28
 800491a:	d501      	bpl.n	8004920 <_vfiprintf_r+0x34>
 800491c:	692b      	ldr	r3, [r5, #16]
 800491e:	b99b      	cbnz	r3, 8004948 <_vfiprintf_r+0x5c>
 8004920:	4629      	mov	r1, r5
 8004922:	4630      	mov	r0, r6
 8004924:	f7ff fdee 	bl	8004504 <__swsetup_r>
 8004928:	b170      	cbz	r0, 8004948 <_vfiprintf_r+0x5c>
 800492a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800492c:	07dc      	lsls	r4, r3, #31
 800492e:	d504      	bpl.n	800493a <_vfiprintf_r+0x4e>
 8004930:	f04f 30ff 	mov.w	r0, #4294967295
 8004934:	b01d      	add	sp, #116	@ 0x74
 8004936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800493a:	89ab      	ldrh	r3, [r5, #12]
 800493c:	0598      	lsls	r0, r3, #22
 800493e:	d4f7      	bmi.n	8004930 <_vfiprintf_r+0x44>
 8004940:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004942:	f7ff feaf 	bl	80046a4 <__retarget_lock_release_recursive>
 8004946:	e7f3      	b.n	8004930 <_vfiprintf_r+0x44>
 8004948:	2300      	movs	r3, #0
 800494a:	9309      	str	r3, [sp, #36]	@ 0x24
 800494c:	2320      	movs	r3, #32
 800494e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004952:	f8cd 800c 	str.w	r8, [sp, #12]
 8004956:	2330      	movs	r3, #48	@ 0x30
 8004958:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004b08 <_vfiprintf_r+0x21c>
 800495c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004960:	f04f 0901 	mov.w	r9, #1
 8004964:	4623      	mov	r3, r4
 8004966:	469a      	mov	sl, r3
 8004968:	f813 2b01 	ldrb.w	r2, [r3], #1
 800496c:	b10a      	cbz	r2, 8004972 <_vfiprintf_r+0x86>
 800496e:	2a25      	cmp	r2, #37	@ 0x25
 8004970:	d1f9      	bne.n	8004966 <_vfiprintf_r+0x7a>
 8004972:	ebba 0b04 	subs.w	fp, sl, r4
 8004976:	d00b      	beq.n	8004990 <_vfiprintf_r+0xa4>
 8004978:	465b      	mov	r3, fp
 800497a:	4622      	mov	r2, r4
 800497c:	4629      	mov	r1, r5
 800497e:	4630      	mov	r0, r6
 8004980:	f7ff ffa1 	bl	80048c6 <__sfputs_r>
 8004984:	3001      	adds	r0, #1
 8004986:	f000 80a7 	beq.w	8004ad8 <_vfiprintf_r+0x1ec>
 800498a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800498c:	445a      	add	r2, fp
 800498e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004990:	f89a 3000 	ldrb.w	r3, [sl]
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 809f 	beq.w	8004ad8 <_vfiprintf_r+0x1ec>
 800499a:	2300      	movs	r3, #0
 800499c:	f04f 32ff 	mov.w	r2, #4294967295
 80049a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049a4:	f10a 0a01 	add.w	sl, sl, #1
 80049a8:	9304      	str	r3, [sp, #16]
 80049aa:	9307      	str	r3, [sp, #28]
 80049ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80049b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80049b2:	4654      	mov	r4, sl
 80049b4:	2205      	movs	r2, #5
 80049b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ba:	4853      	ldr	r0, [pc, #332]	@ (8004b08 <_vfiprintf_r+0x21c>)
 80049bc:	f7fb fc08 	bl	80001d0 <memchr>
 80049c0:	9a04      	ldr	r2, [sp, #16]
 80049c2:	b9d8      	cbnz	r0, 80049fc <_vfiprintf_r+0x110>
 80049c4:	06d1      	lsls	r1, r2, #27
 80049c6:	bf44      	itt	mi
 80049c8:	2320      	movmi	r3, #32
 80049ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049ce:	0713      	lsls	r3, r2, #28
 80049d0:	bf44      	itt	mi
 80049d2:	232b      	movmi	r3, #43	@ 0x2b
 80049d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049d8:	f89a 3000 	ldrb.w	r3, [sl]
 80049dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80049de:	d015      	beq.n	8004a0c <_vfiprintf_r+0x120>
 80049e0:	9a07      	ldr	r2, [sp, #28]
 80049e2:	4654      	mov	r4, sl
 80049e4:	2000      	movs	r0, #0
 80049e6:	f04f 0c0a 	mov.w	ip, #10
 80049ea:	4621      	mov	r1, r4
 80049ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049f0:	3b30      	subs	r3, #48	@ 0x30
 80049f2:	2b09      	cmp	r3, #9
 80049f4:	d94b      	bls.n	8004a8e <_vfiprintf_r+0x1a2>
 80049f6:	b1b0      	cbz	r0, 8004a26 <_vfiprintf_r+0x13a>
 80049f8:	9207      	str	r2, [sp, #28]
 80049fa:	e014      	b.n	8004a26 <_vfiprintf_r+0x13a>
 80049fc:	eba0 0308 	sub.w	r3, r0, r8
 8004a00:	fa09 f303 	lsl.w	r3, r9, r3
 8004a04:	4313      	orrs	r3, r2
 8004a06:	9304      	str	r3, [sp, #16]
 8004a08:	46a2      	mov	sl, r4
 8004a0a:	e7d2      	b.n	80049b2 <_vfiprintf_r+0xc6>
 8004a0c:	9b03      	ldr	r3, [sp, #12]
 8004a0e:	1d19      	adds	r1, r3, #4
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	9103      	str	r1, [sp, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	bfbb      	ittet	lt
 8004a18:	425b      	neglt	r3, r3
 8004a1a:	f042 0202 	orrlt.w	r2, r2, #2
 8004a1e:	9307      	strge	r3, [sp, #28]
 8004a20:	9307      	strlt	r3, [sp, #28]
 8004a22:	bfb8      	it	lt
 8004a24:	9204      	strlt	r2, [sp, #16]
 8004a26:	7823      	ldrb	r3, [r4, #0]
 8004a28:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a2a:	d10a      	bne.n	8004a42 <_vfiprintf_r+0x156>
 8004a2c:	7863      	ldrb	r3, [r4, #1]
 8004a2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a30:	d132      	bne.n	8004a98 <_vfiprintf_r+0x1ac>
 8004a32:	9b03      	ldr	r3, [sp, #12]
 8004a34:	1d1a      	adds	r2, r3, #4
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	9203      	str	r2, [sp, #12]
 8004a3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a3e:	3402      	adds	r4, #2
 8004a40:	9305      	str	r3, [sp, #20]
 8004a42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004b18 <_vfiprintf_r+0x22c>
 8004a46:	7821      	ldrb	r1, [r4, #0]
 8004a48:	2203      	movs	r2, #3
 8004a4a:	4650      	mov	r0, sl
 8004a4c:	f7fb fbc0 	bl	80001d0 <memchr>
 8004a50:	b138      	cbz	r0, 8004a62 <_vfiprintf_r+0x176>
 8004a52:	9b04      	ldr	r3, [sp, #16]
 8004a54:	eba0 000a 	sub.w	r0, r0, sl
 8004a58:	2240      	movs	r2, #64	@ 0x40
 8004a5a:	4082      	lsls	r2, r0
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	3401      	adds	r4, #1
 8004a60:	9304      	str	r3, [sp, #16]
 8004a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a66:	4829      	ldr	r0, [pc, #164]	@ (8004b0c <_vfiprintf_r+0x220>)
 8004a68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a6c:	2206      	movs	r2, #6
 8004a6e:	f7fb fbaf 	bl	80001d0 <memchr>
 8004a72:	2800      	cmp	r0, #0
 8004a74:	d03f      	beq.n	8004af6 <_vfiprintf_r+0x20a>
 8004a76:	4b26      	ldr	r3, [pc, #152]	@ (8004b10 <_vfiprintf_r+0x224>)
 8004a78:	bb1b      	cbnz	r3, 8004ac2 <_vfiprintf_r+0x1d6>
 8004a7a:	9b03      	ldr	r3, [sp, #12]
 8004a7c:	3307      	adds	r3, #7
 8004a7e:	f023 0307 	bic.w	r3, r3, #7
 8004a82:	3308      	adds	r3, #8
 8004a84:	9303      	str	r3, [sp, #12]
 8004a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a88:	443b      	add	r3, r7
 8004a8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a8c:	e76a      	b.n	8004964 <_vfiprintf_r+0x78>
 8004a8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a92:	460c      	mov	r4, r1
 8004a94:	2001      	movs	r0, #1
 8004a96:	e7a8      	b.n	80049ea <_vfiprintf_r+0xfe>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	3401      	adds	r4, #1
 8004a9c:	9305      	str	r3, [sp, #20]
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	f04f 0c0a 	mov.w	ip, #10
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004aaa:	3a30      	subs	r2, #48	@ 0x30
 8004aac:	2a09      	cmp	r2, #9
 8004aae:	d903      	bls.n	8004ab8 <_vfiprintf_r+0x1cc>
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0c6      	beq.n	8004a42 <_vfiprintf_r+0x156>
 8004ab4:	9105      	str	r1, [sp, #20]
 8004ab6:	e7c4      	b.n	8004a42 <_vfiprintf_r+0x156>
 8004ab8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004abc:	4604      	mov	r4, r0
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e7f0      	b.n	8004aa4 <_vfiprintf_r+0x1b8>
 8004ac2:	ab03      	add	r3, sp, #12
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	462a      	mov	r2, r5
 8004ac8:	4b12      	ldr	r3, [pc, #72]	@ (8004b14 <_vfiprintf_r+0x228>)
 8004aca:	a904      	add	r1, sp, #16
 8004acc:	4630      	mov	r0, r6
 8004ace:	f3af 8000 	nop.w
 8004ad2:	4607      	mov	r7, r0
 8004ad4:	1c78      	adds	r0, r7, #1
 8004ad6:	d1d6      	bne.n	8004a86 <_vfiprintf_r+0x19a>
 8004ad8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ada:	07d9      	lsls	r1, r3, #31
 8004adc:	d405      	bmi.n	8004aea <_vfiprintf_r+0x1fe>
 8004ade:	89ab      	ldrh	r3, [r5, #12]
 8004ae0:	059a      	lsls	r2, r3, #22
 8004ae2:	d402      	bmi.n	8004aea <_vfiprintf_r+0x1fe>
 8004ae4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ae6:	f7ff fddd 	bl	80046a4 <__retarget_lock_release_recursive>
 8004aea:	89ab      	ldrh	r3, [r5, #12]
 8004aec:	065b      	lsls	r3, r3, #25
 8004aee:	f53f af1f 	bmi.w	8004930 <_vfiprintf_r+0x44>
 8004af2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004af4:	e71e      	b.n	8004934 <_vfiprintf_r+0x48>
 8004af6:	ab03      	add	r3, sp, #12
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	462a      	mov	r2, r5
 8004afc:	4b05      	ldr	r3, [pc, #20]	@ (8004b14 <_vfiprintf_r+0x228>)
 8004afe:	a904      	add	r1, sp, #16
 8004b00:	4630      	mov	r0, r6
 8004b02:	f000 f879 	bl	8004bf8 <_printf_i>
 8004b06:	e7e4      	b.n	8004ad2 <_vfiprintf_r+0x1e6>
 8004b08:	08005135 	.word	0x08005135
 8004b0c:	0800513f 	.word	0x0800513f
 8004b10:	00000000 	.word	0x00000000
 8004b14:	080048c7 	.word	0x080048c7
 8004b18:	0800513b 	.word	0x0800513b

08004b1c <_printf_common>:
 8004b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b20:	4616      	mov	r6, r2
 8004b22:	4698      	mov	r8, r3
 8004b24:	688a      	ldr	r2, [r1, #8]
 8004b26:	690b      	ldr	r3, [r1, #16]
 8004b28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	bfb8      	it	lt
 8004b30:	4613      	movlt	r3, r2
 8004b32:	6033      	str	r3, [r6, #0]
 8004b34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b38:	4607      	mov	r7, r0
 8004b3a:	460c      	mov	r4, r1
 8004b3c:	b10a      	cbz	r2, 8004b42 <_printf_common+0x26>
 8004b3e:	3301      	adds	r3, #1
 8004b40:	6033      	str	r3, [r6, #0]
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	0699      	lsls	r1, r3, #26
 8004b46:	bf42      	ittt	mi
 8004b48:	6833      	ldrmi	r3, [r6, #0]
 8004b4a:	3302      	addmi	r3, #2
 8004b4c:	6033      	strmi	r3, [r6, #0]
 8004b4e:	6825      	ldr	r5, [r4, #0]
 8004b50:	f015 0506 	ands.w	r5, r5, #6
 8004b54:	d106      	bne.n	8004b64 <_printf_common+0x48>
 8004b56:	f104 0a19 	add.w	sl, r4, #25
 8004b5a:	68e3      	ldr	r3, [r4, #12]
 8004b5c:	6832      	ldr	r2, [r6, #0]
 8004b5e:	1a9b      	subs	r3, r3, r2
 8004b60:	42ab      	cmp	r3, r5
 8004b62:	dc26      	bgt.n	8004bb2 <_printf_common+0x96>
 8004b64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b68:	6822      	ldr	r2, [r4, #0]
 8004b6a:	3b00      	subs	r3, #0
 8004b6c:	bf18      	it	ne
 8004b6e:	2301      	movne	r3, #1
 8004b70:	0692      	lsls	r2, r2, #26
 8004b72:	d42b      	bmi.n	8004bcc <_printf_common+0xb0>
 8004b74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b78:	4641      	mov	r1, r8
 8004b7a:	4638      	mov	r0, r7
 8004b7c:	47c8      	blx	r9
 8004b7e:	3001      	adds	r0, #1
 8004b80:	d01e      	beq.n	8004bc0 <_printf_common+0xa4>
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	6922      	ldr	r2, [r4, #16]
 8004b86:	f003 0306 	and.w	r3, r3, #6
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	bf02      	ittt	eq
 8004b8e:	68e5      	ldreq	r5, [r4, #12]
 8004b90:	6833      	ldreq	r3, [r6, #0]
 8004b92:	1aed      	subeq	r5, r5, r3
 8004b94:	68a3      	ldr	r3, [r4, #8]
 8004b96:	bf0c      	ite	eq
 8004b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b9c:	2500      	movne	r5, #0
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	bfc4      	itt	gt
 8004ba2:	1a9b      	subgt	r3, r3, r2
 8004ba4:	18ed      	addgt	r5, r5, r3
 8004ba6:	2600      	movs	r6, #0
 8004ba8:	341a      	adds	r4, #26
 8004baa:	42b5      	cmp	r5, r6
 8004bac:	d11a      	bne.n	8004be4 <_printf_common+0xc8>
 8004bae:	2000      	movs	r0, #0
 8004bb0:	e008      	b.n	8004bc4 <_printf_common+0xa8>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	4652      	mov	r2, sl
 8004bb6:	4641      	mov	r1, r8
 8004bb8:	4638      	mov	r0, r7
 8004bba:	47c8      	blx	r9
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	d103      	bne.n	8004bc8 <_printf_common+0xac>
 8004bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc8:	3501      	adds	r5, #1
 8004bca:	e7c6      	b.n	8004b5a <_printf_common+0x3e>
 8004bcc:	18e1      	adds	r1, r4, r3
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	2030      	movs	r0, #48	@ 0x30
 8004bd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004bd6:	4422      	add	r2, r4
 8004bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004bdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004be0:	3302      	adds	r3, #2
 8004be2:	e7c7      	b.n	8004b74 <_printf_common+0x58>
 8004be4:	2301      	movs	r3, #1
 8004be6:	4622      	mov	r2, r4
 8004be8:	4641      	mov	r1, r8
 8004bea:	4638      	mov	r0, r7
 8004bec:	47c8      	blx	r9
 8004bee:	3001      	adds	r0, #1
 8004bf0:	d0e6      	beq.n	8004bc0 <_printf_common+0xa4>
 8004bf2:	3601      	adds	r6, #1
 8004bf4:	e7d9      	b.n	8004baa <_printf_common+0x8e>
	...

08004bf8 <_printf_i>:
 8004bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bfc:	7e0f      	ldrb	r7, [r1, #24]
 8004bfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c00:	2f78      	cmp	r7, #120	@ 0x78
 8004c02:	4691      	mov	r9, r2
 8004c04:	4680      	mov	r8, r0
 8004c06:	460c      	mov	r4, r1
 8004c08:	469a      	mov	sl, r3
 8004c0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c0e:	d807      	bhi.n	8004c20 <_printf_i+0x28>
 8004c10:	2f62      	cmp	r7, #98	@ 0x62
 8004c12:	d80a      	bhi.n	8004c2a <_printf_i+0x32>
 8004c14:	2f00      	cmp	r7, #0
 8004c16:	f000 80d2 	beq.w	8004dbe <_printf_i+0x1c6>
 8004c1a:	2f58      	cmp	r7, #88	@ 0x58
 8004c1c:	f000 80b9 	beq.w	8004d92 <_printf_i+0x19a>
 8004c20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c28:	e03a      	b.n	8004ca0 <_printf_i+0xa8>
 8004c2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c2e:	2b15      	cmp	r3, #21
 8004c30:	d8f6      	bhi.n	8004c20 <_printf_i+0x28>
 8004c32:	a101      	add	r1, pc, #4	@ (adr r1, 8004c38 <_printf_i+0x40>)
 8004c34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c38:	08004c91 	.word	0x08004c91
 8004c3c:	08004ca5 	.word	0x08004ca5
 8004c40:	08004c21 	.word	0x08004c21
 8004c44:	08004c21 	.word	0x08004c21
 8004c48:	08004c21 	.word	0x08004c21
 8004c4c:	08004c21 	.word	0x08004c21
 8004c50:	08004ca5 	.word	0x08004ca5
 8004c54:	08004c21 	.word	0x08004c21
 8004c58:	08004c21 	.word	0x08004c21
 8004c5c:	08004c21 	.word	0x08004c21
 8004c60:	08004c21 	.word	0x08004c21
 8004c64:	08004da5 	.word	0x08004da5
 8004c68:	08004ccf 	.word	0x08004ccf
 8004c6c:	08004d5f 	.word	0x08004d5f
 8004c70:	08004c21 	.word	0x08004c21
 8004c74:	08004c21 	.word	0x08004c21
 8004c78:	08004dc7 	.word	0x08004dc7
 8004c7c:	08004c21 	.word	0x08004c21
 8004c80:	08004ccf 	.word	0x08004ccf
 8004c84:	08004c21 	.word	0x08004c21
 8004c88:	08004c21 	.word	0x08004c21
 8004c8c:	08004d67 	.word	0x08004d67
 8004c90:	6833      	ldr	r3, [r6, #0]
 8004c92:	1d1a      	adds	r2, r3, #4
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6032      	str	r2, [r6, #0]
 8004c98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e09d      	b.n	8004de0 <_printf_i+0x1e8>
 8004ca4:	6833      	ldr	r3, [r6, #0]
 8004ca6:	6820      	ldr	r0, [r4, #0]
 8004ca8:	1d19      	adds	r1, r3, #4
 8004caa:	6031      	str	r1, [r6, #0]
 8004cac:	0606      	lsls	r6, r0, #24
 8004cae:	d501      	bpl.n	8004cb4 <_printf_i+0xbc>
 8004cb0:	681d      	ldr	r5, [r3, #0]
 8004cb2:	e003      	b.n	8004cbc <_printf_i+0xc4>
 8004cb4:	0645      	lsls	r5, r0, #25
 8004cb6:	d5fb      	bpl.n	8004cb0 <_printf_i+0xb8>
 8004cb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004cbc:	2d00      	cmp	r5, #0
 8004cbe:	da03      	bge.n	8004cc8 <_printf_i+0xd0>
 8004cc0:	232d      	movs	r3, #45	@ 0x2d
 8004cc2:	426d      	negs	r5, r5
 8004cc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cc8:	4859      	ldr	r0, [pc, #356]	@ (8004e30 <_printf_i+0x238>)
 8004cca:	230a      	movs	r3, #10
 8004ccc:	e011      	b.n	8004cf2 <_printf_i+0xfa>
 8004cce:	6821      	ldr	r1, [r4, #0]
 8004cd0:	6833      	ldr	r3, [r6, #0]
 8004cd2:	0608      	lsls	r0, r1, #24
 8004cd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004cd8:	d402      	bmi.n	8004ce0 <_printf_i+0xe8>
 8004cda:	0649      	lsls	r1, r1, #25
 8004cdc:	bf48      	it	mi
 8004cde:	b2ad      	uxthmi	r5, r5
 8004ce0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ce2:	4853      	ldr	r0, [pc, #332]	@ (8004e30 <_printf_i+0x238>)
 8004ce4:	6033      	str	r3, [r6, #0]
 8004ce6:	bf14      	ite	ne
 8004ce8:	230a      	movne	r3, #10
 8004cea:	2308      	moveq	r3, #8
 8004cec:	2100      	movs	r1, #0
 8004cee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cf2:	6866      	ldr	r6, [r4, #4]
 8004cf4:	60a6      	str	r6, [r4, #8]
 8004cf6:	2e00      	cmp	r6, #0
 8004cf8:	bfa2      	ittt	ge
 8004cfa:	6821      	ldrge	r1, [r4, #0]
 8004cfc:	f021 0104 	bicge.w	r1, r1, #4
 8004d00:	6021      	strge	r1, [r4, #0]
 8004d02:	b90d      	cbnz	r5, 8004d08 <_printf_i+0x110>
 8004d04:	2e00      	cmp	r6, #0
 8004d06:	d04b      	beq.n	8004da0 <_printf_i+0x1a8>
 8004d08:	4616      	mov	r6, r2
 8004d0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d0e:	fb03 5711 	mls	r7, r3, r1, r5
 8004d12:	5dc7      	ldrb	r7, [r0, r7]
 8004d14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d18:	462f      	mov	r7, r5
 8004d1a:	42bb      	cmp	r3, r7
 8004d1c:	460d      	mov	r5, r1
 8004d1e:	d9f4      	bls.n	8004d0a <_printf_i+0x112>
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d10b      	bne.n	8004d3c <_printf_i+0x144>
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	07df      	lsls	r7, r3, #31
 8004d28:	d508      	bpl.n	8004d3c <_printf_i+0x144>
 8004d2a:	6923      	ldr	r3, [r4, #16]
 8004d2c:	6861      	ldr	r1, [r4, #4]
 8004d2e:	4299      	cmp	r1, r3
 8004d30:	bfde      	ittt	le
 8004d32:	2330      	movle	r3, #48	@ 0x30
 8004d34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d3c:	1b92      	subs	r2, r2, r6
 8004d3e:	6122      	str	r2, [r4, #16]
 8004d40:	f8cd a000 	str.w	sl, [sp]
 8004d44:	464b      	mov	r3, r9
 8004d46:	aa03      	add	r2, sp, #12
 8004d48:	4621      	mov	r1, r4
 8004d4a:	4640      	mov	r0, r8
 8004d4c:	f7ff fee6 	bl	8004b1c <_printf_common>
 8004d50:	3001      	adds	r0, #1
 8004d52:	d14a      	bne.n	8004dea <_printf_i+0x1f2>
 8004d54:	f04f 30ff 	mov.w	r0, #4294967295
 8004d58:	b004      	add	sp, #16
 8004d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	f043 0320 	orr.w	r3, r3, #32
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	4833      	ldr	r0, [pc, #204]	@ (8004e34 <_printf_i+0x23c>)
 8004d68:	2778      	movs	r7, #120	@ 0x78
 8004d6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	6831      	ldr	r1, [r6, #0]
 8004d72:	061f      	lsls	r7, r3, #24
 8004d74:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d78:	d402      	bmi.n	8004d80 <_printf_i+0x188>
 8004d7a:	065f      	lsls	r7, r3, #25
 8004d7c:	bf48      	it	mi
 8004d7e:	b2ad      	uxthmi	r5, r5
 8004d80:	6031      	str	r1, [r6, #0]
 8004d82:	07d9      	lsls	r1, r3, #31
 8004d84:	bf44      	itt	mi
 8004d86:	f043 0320 	orrmi.w	r3, r3, #32
 8004d8a:	6023      	strmi	r3, [r4, #0]
 8004d8c:	b11d      	cbz	r5, 8004d96 <_printf_i+0x19e>
 8004d8e:	2310      	movs	r3, #16
 8004d90:	e7ac      	b.n	8004cec <_printf_i+0xf4>
 8004d92:	4827      	ldr	r0, [pc, #156]	@ (8004e30 <_printf_i+0x238>)
 8004d94:	e7e9      	b.n	8004d6a <_printf_i+0x172>
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	f023 0320 	bic.w	r3, r3, #32
 8004d9c:	6023      	str	r3, [r4, #0]
 8004d9e:	e7f6      	b.n	8004d8e <_printf_i+0x196>
 8004da0:	4616      	mov	r6, r2
 8004da2:	e7bd      	b.n	8004d20 <_printf_i+0x128>
 8004da4:	6833      	ldr	r3, [r6, #0]
 8004da6:	6825      	ldr	r5, [r4, #0]
 8004da8:	6961      	ldr	r1, [r4, #20]
 8004daa:	1d18      	adds	r0, r3, #4
 8004dac:	6030      	str	r0, [r6, #0]
 8004dae:	062e      	lsls	r6, r5, #24
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	d501      	bpl.n	8004db8 <_printf_i+0x1c0>
 8004db4:	6019      	str	r1, [r3, #0]
 8004db6:	e002      	b.n	8004dbe <_printf_i+0x1c6>
 8004db8:	0668      	lsls	r0, r5, #25
 8004dba:	d5fb      	bpl.n	8004db4 <_printf_i+0x1bc>
 8004dbc:	8019      	strh	r1, [r3, #0]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	6123      	str	r3, [r4, #16]
 8004dc2:	4616      	mov	r6, r2
 8004dc4:	e7bc      	b.n	8004d40 <_printf_i+0x148>
 8004dc6:	6833      	ldr	r3, [r6, #0]
 8004dc8:	1d1a      	adds	r2, r3, #4
 8004dca:	6032      	str	r2, [r6, #0]
 8004dcc:	681e      	ldr	r6, [r3, #0]
 8004dce:	6862      	ldr	r2, [r4, #4]
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	f7fb f9fc 	bl	80001d0 <memchr>
 8004dd8:	b108      	cbz	r0, 8004dde <_printf_i+0x1e6>
 8004dda:	1b80      	subs	r0, r0, r6
 8004ddc:	6060      	str	r0, [r4, #4]
 8004dde:	6863      	ldr	r3, [r4, #4]
 8004de0:	6123      	str	r3, [r4, #16]
 8004de2:	2300      	movs	r3, #0
 8004de4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004de8:	e7aa      	b.n	8004d40 <_printf_i+0x148>
 8004dea:	6923      	ldr	r3, [r4, #16]
 8004dec:	4632      	mov	r2, r6
 8004dee:	4649      	mov	r1, r9
 8004df0:	4640      	mov	r0, r8
 8004df2:	47d0      	blx	sl
 8004df4:	3001      	adds	r0, #1
 8004df6:	d0ad      	beq.n	8004d54 <_printf_i+0x15c>
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	079b      	lsls	r3, r3, #30
 8004dfc:	d413      	bmi.n	8004e26 <_printf_i+0x22e>
 8004dfe:	68e0      	ldr	r0, [r4, #12]
 8004e00:	9b03      	ldr	r3, [sp, #12]
 8004e02:	4298      	cmp	r0, r3
 8004e04:	bfb8      	it	lt
 8004e06:	4618      	movlt	r0, r3
 8004e08:	e7a6      	b.n	8004d58 <_printf_i+0x160>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	4632      	mov	r2, r6
 8004e0e:	4649      	mov	r1, r9
 8004e10:	4640      	mov	r0, r8
 8004e12:	47d0      	blx	sl
 8004e14:	3001      	adds	r0, #1
 8004e16:	d09d      	beq.n	8004d54 <_printf_i+0x15c>
 8004e18:	3501      	adds	r5, #1
 8004e1a:	68e3      	ldr	r3, [r4, #12]
 8004e1c:	9903      	ldr	r1, [sp, #12]
 8004e1e:	1a5b      	subs	r3, r3, r1
 8004e20:	42ab      	cmp	r3, r5
 8004e22:	dcf2      	bgt.n	8004e0a <_printf_i+0x212>
 8004e24:	e7eb      	b.n	8004dfe <_printf_i+0x206>
 8004e26:	2500      	movs	r5, #0
 8004e28:	f104 0619 	add.w	r6, r4, #25
 8004e2c:	e7f5      	b.n	8004e1a <_printf_i+0x222>
 8004e2e:	bf00      	nop
 8004e30:	08005146 	.word	0x08005146
 8004e34:	08005157 	.word	0x08005157

08004e38 <__sflush_r>:
 8004e38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e40:	0716      	lsls	r6, r2, #28
 8004e42:	4605      	mov	r5, r0
 8004e44:	460c      	mov	r4, r1
 8004e46:	d454      	bmi.n	8004ef2 <__sflush_r+0xba>
 8004e48:	684b      	ldr	r3, [r1, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	dc02      	bgt.n	8004e54 <__sflush_r+0x1c>
 8004e4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	dd48      	ble.n	8004ee6 <__sflush_r+0xae>
 8004e54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e56:	2e00      	cmp	r6, #0
 8004e58:	d045      	beq.n	8004ee6 <__sflush_r+0xae>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004e60:	682f      	ldr	r7, [r5, #0]
 8004e62:	6a21      	ldr	r1, [r4, #32]
 8004e64:	602b      	str	r3, [r5, #0]
 8004e66:	d030      	beq.n	8004eca <__sflush_r+0x92>
 8004e68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e6a:	89a3      	ldrh	r3, [r4, #12]
 8004e6c:	0759      	lsls	r1, r3, #29
 8004e6e:	d505      	bpl.n	8004e7c <__sflush_r+0x44>
 8004e70:	6863      	ldr	r3, [r4, #4]
 8004e72:	1ad2      	subs	r2, r2, r3
 8004e74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004e76:	b10b      	cbz	r3, 8004e7c <__sflush_r+0x44>
 8004e78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e7a:	1ad2      	subs	r2, r2, r3
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e80:	6a21      	ldr	r1, [r4, #32]
 8004e82:	4628      	mov	r0, r5
 8004e84:	47b0      	blx	r6
 8004e86:	1c43      	adds	r3, r0, #1
 8004e88:	89a3      	ldrh	r3, [r4, #12]
 8004e8a:	d106      	bne.n	8004e9a <__sflush_r+0x62>
 8004e8c:	6829      	ldr	r1, [r5, #0]
 8004e8e:	291d      	cmp	r1, #29
 8004e90:	d82b      	bhi.n	8004eea <__sflush_r+0xb2>
 8004e92:	4a2a      	ldr	r2, [pc, #168]	@ (8004f3c <__sflush_r+0x104>)
 8004e94:	410a      	asrs	r2, r1
 8004e96:	07d6      	lsls	r6, r2, #31
 8004e98:	d427      	bmi.n	8004eea <__sflush_r+0xb2>
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	6062      	str	r2, [r4, #4]
 8004e9e:	04d9      	lsls	r1, r3, #19
 8004ea0:	6922      	ldr	r2, [r4, #16]
 8004ea2:	6022      	str	r2, [r4, #0]
 8004ea4:	d504      	bpl.n	8004eb0 <__sflush_r+0x78>
 8004ea6:	1c42      	adds	r2, r0, #1
 8004ea8:	d101      	bne.n	8004eae <__sflush_r+0x76>
 8004eaa:	682b      	ldr	r3, [r5, #0]
 8004eac:	b903      	cbnz	r3, 8004eb0 <__sflush_r+0x78>
 8004eae:	6560      	str	r0, [r4, #84]	@ 0x54
 8004eb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004eb2:	602f      	str	r7, [r5, #0]
 8004eb4:	b1b9      	cbz	r1, 8004ee6 <__sflush_r+0xae>
 8004eb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004eba:	4299      	cmp	r1, r3
 8004ebc:	d002      	beq.n	8004ec4 <__sflush_r+0x8c>
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	f7ff fbf2 	bl	80046a8 <_free_r>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ec8:	e00d      	b.n	8004ee6 <__sflush_r+0xae>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	4628      	mov	r0, r5
 8004ece:	47b0      	blx	r6
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	1c50      	adds	r0, r2, #1
 8004ed4:	d1c9      	bne.n	8004e6a <__sflush_r+0x32>
 8004ed6:	682b      	ldr	r3, [r5, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0c6      	beq.n	8004e6a <__sflush_r+0x32>
 8004edc:	2b1d      	cmp	r3, #29
 8004ede:	d001      	beq.n	8004ee4 <__sflush_r+0xac>
 8004ee0:	2b16      	cmp	r3, #22
 8004ee2:	d11e      	bne.n	8004f22 <__sflush_r+0xea>
 8004ee4:	602f      	str	r7, [r5, #0]
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	e022      	b.n	8004f30 <__sflush_r+0xf8>
 8004eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004eee:	b21b      	sxth	r3, r3
 8004ef0:	e01b      	b.n	8004f2a <__sflush_r+0xf2>
 8004ef2:	690f      	ldr	r7, [r1, #16]
 8004ef4:	2f00      	cmp	r7, #0
 8004ef6:	d0f6      	beq.n	8004ee6 <__sflush_r+0xae>
 8004ef8:	0793      	lsls	r3, r2, #30
 8004efa:	680e      	ldr	r6, [r1, #0]
 8004efc:	bf08      	it	eq
 8004efe:	694b      	ldreq	r3, [r1, #20]
 8004f00:	600f      	str	r7, [r1, #0]
 8004f02:	bf18      	it	ne
 8004f04:	2300      	movne	r3, #0
 8004f06:	eba6 0807 	sub.w	r8, r6, r7
 8004f0a:	608b      	str	r3, [r1, #8]
 8004f0c:	f1b8 0f00 	cmp.w	r8, #0
 8004f10:	dde9      	ble.n	8004ee6 <__sflush_r+0xae>
 8004f12:	6a21      	ldr	r1, [r4, #32]
 8004f14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004f16:	4643      	mov	r3, r8
 8004f18:	463a      	mov	r2, r7
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	47b0      	blx	r6
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	dc08      	bgt.n	8004f34 <__sflush_r+0xfc>
 8004f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f2a:	81a3      	strh	r3, [r4, #12]
 8004f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f34:	4407      	add	r7, r0
 8004f36:	eba8 0800 	sub.w	r8, r8, r0
 8004f3a:	e7e7      	b.n	8004f0c <__sflush_r+0xd4>
 8004f3c:	dfbffffe 	.word	0xdfbffffe

08004f40 <_fflush_r>:
 8004f40:	b538      	push	{r3, r4, r5, lr}
 8004f42:	690b      	ldr	r3, [r1, #16]
 8004f44:	4605      	mov	r5, r0
 8004f46:	460c      	mov	r4, r1
 8004f48:	b913      	cbnz	r3, 8004f50 <_fflush_r+0x10>
 8004f4a:	2500      	movs	r5, #0
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	bd38      	pop	{r3, r4, r5, pc}
 8004f50:	b118      	cbz	r0, 8004f5a <_fflush_r+0x1a>
 8004f52:	6a03      	ldr	r3, [r0, #32]
 8004f54:	b90b      	cbnz	r3, 8004f5a <_fflush_r+0x1a>
 8004f56:	f7ff f9ad 	bl	80042b4 <__sinit>
 8004f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0f3      	beq.n	8004f4a <_fflush_r+0xa>
 8004f62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004f64:	07d0      	lsls	r0, r2, #31
 8004f66:	d404      	bmi.n	8004f72 <_fflush_r+0x32>
 8004f68:	0599      	lsls	r1, r3, #22
 8004f6a:	d402      	bmi.n	8004f72 <_fflush_r+0x32>
 8004f6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f6e:	f7ff fb98 	bl	80046a2 <__retarget_lock_acquire_recursive>
 8004f72:	4628      	mov	r0, r5
 8004f74:	4621      	mov	r1, r4
 8004f76:	f7ff ff5f 	bl	8004e38 <__sflush_r>
 8004f7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f7c:	07da      	lsls	r2, r3, #31
 8004f7e:	4605      	mov	r5, r0
 8004f80:	d4e4      	bmi.n	8004f4c <_fflush_r+0xc>
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	059b      	lsls	r3, r3, #22
 8004f86:	d4e1      	bmi.n	8004f4c <_fflush_r+0xc>
 8004f88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f8a:	f7ff fb8b 	bl	80046a4 <__retarget_lock_release_recursive>
 8004f8e:	e7dd      	b.n	8004f4c <_fflush_r+0xc>

08004f90 <__swhatbuf_r>:
 8004f90:	b570      	push	{r4, r5, r6, lr}
 8004f92:	460c      	mov	r4, r1
 8004f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f98:	2900      	cmp	r1, #0
 8004f9a:	b096      	sub	sp, #88	@ 0x58
 8004f9c:	4615      	mov	r5, r2
 8004f9e:	461e      	mov	r6, r3
 8004fa0:	da0d      	bge.n	8004fbe <__swhatbuf_r+0x2e>
 8004fa2:	89a3      	ldrh	r3, [r4, #12]
 8004fa4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004fa8:	f04f 0100 	mov.w	r1, #0
 8004fac:	bf14      	ite	ne
 8004fae:	2340      	movne	r3, #64	@ 0x40
 8004fb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	6031      	str	r1, [r6, #0]
 8004fb8:	602b      	str	r3, [r5, #0]
 8004fba:	b016      	add	sp, #88	@ 0x58
 8004fbc:	bd70      	pop	{r4, r5, r6, pc}
 8004fbe:	466a      	mov	r2, sp
 8004fc0:	f000 f848 	bl	8005054 <_fstat_r>
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	dbec      	blt.n	8004fa2 <__swhatbuf_r+0x12>
 8004fc8:	9901      	ldr	r1, [sp, #4]
 8004fca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004fce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004fd2:	4259      	negs	r1, r3
 8004fd4:	4159      	adcs	r1, r3
 8004fd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fda:	e7eb      	b.n	8004fb4 <__swhatbuf_r+0x24>

08004fdc <__smakebuf_r>:
 8004fdc:	898b      	ldrh	r3, [r1, #12]
 8004fde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fe0:	079d      	lsls	r5, r3, #30
 8004fe2:	4606      	mov	r6, r0
 8004fe4:	460c      	mov	r4, r1
 8004fe6:	d507      	bpl.n	8004ff8 <__smakebuf_r+0x1c>
 8004fe8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004fec:	6023      	str	r3, [r4, #0]
 8004fee:	6123      	str	r3, [r4, #16]
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	6163      	str	r3, [r4, #20]
 8004ff4:	b003      	add	sp, #12
 8004ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ff8:	ab01      	add	r3, sp, #4
 8004ffa:	466a      	mov	r2, sp
 8004ffc:	f7ff ffc8 	bl	8004f90 <__swhatbuf_r>
 8005000:	9f00      	ldr	r7, [sp, #0]
 8005002:	4605      	mov	r5, r0
 8005004:	4639      	mov	r1, r7
 8005006:	4630      	mov	r0, r6
 8005008:	f7ff fbba 	bl	8004780 <_malloc_r>
 800500c:	b948      	cbnz	r0, 8005022 <__smakebuf_r+0x46>
 800500e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005012:	059a      	lsls	r2, r3, #22
 8005014:	d4ee      	bmi.n	8004ff4 <__smakebuf_r+0x18>
 8005016:	f023 0303 	bic.w	r3, r3, #3
 800501a:	f043 0302 	orr.w	r3, r3, #2
 800501e:	81a3      	strh	r3, [r4, #12]
 8005020:	e7e2      	b.n	8004fe8 <__smakebuf_r+0xc>
 8005022:	89a3      	ldrh	r3, [r4, #12]
 8005024:	6020      	str	r0, [r4, #0]
 8005026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800502a:	81a3      	strh	r3, [r4, #12]
 800502c:	9b01      	ldr	r3, [sp, #4]
 800502e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005032:	b15b      	cbz	r3, 800504c <__smakebuf_r+0x70>
 8005034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005038:	4630      	mov	r0, r6
 800503a:	f000 f81d 	bl	8005078 <_isatty_r>
 800503e:	b128      	cbz	r0, 800504c <__smakebuf_r+0x70>
 8005040:	89a3      	ldrh	r3, [r4, #12]
 8005042:	f023 0303 	bic.w	r3, r3, #3
 8005046:	f043 0301 	orr.w	r3, r3, #1
 800504a:	81a3      	strh	r3, [r4, #12]
 800504c:	89a3      	ldrh	r3, [r4, #12]
 800504e:	431d      	orrs	r5, r3
 8005050:	81a5      	strh	r5, [r4, #12]
 8005052:	e7cf      	b.n	8004ff4 <__smakebuf_r+0x18>

08005054 <_fstat_r>:
 8005054:	b538      	push	{r3, r4, r5, lr}
 8005056:	4d07      	ldr	r5, [pc, #28]	@ (8005074 <_fstat_r+0x20>)
 8005058:	2300      	movs	r3, #0
 800505a:	4604      	mov	r4, r0
 800505c:	4608      	mov	r0, r1
 800505e:	4611      	mov	r1, r2
 8005060:	602b      	str	r3, [r5, #0]
 8005062:	f7fb fe5a 	bl	8000d1a <_fstat>
 8005066:	1c43      	adds	r3, r0, #1
 8005068:	d102      	bne.n	8005070 <_fstat_r+0x1c>
 800506a:	682b      	ldr	r3, [r5, #0]
 800506c:	b103      	cbz	r3, 8005070 <_fstat_r+0x1c>
 800506e:	6023      	str	r3, [r4, #0]
 8005070:	bd38      	pop	{r3, r4, r5, pc}
 8005072:	bf00      	nop
 8005074:	20000428 	.word	0x20000428

08005078 <_isatty_r>:
 8005078:	b538      	push	{r3, r4, r5, lr}
 800507a:	4d06      	ldr	r5, [pc, #24]	@ (8005094 <_isatty_r+0x1c>)
 800507c:	2300      	movs	r3, #0
 800507e:	4604      	mov	r4, r0
 8005080:	4608      	mov	r0, r1
 8005082:	602b      	str	r3, [r5, #0]
 8005084:	f7fb fe59 	bl	8000d3a <_isatty>
 8005088:	1c43      	adds	r3, r0, #1
 800508a:	d102      	bne.n	8005092 <_isatty_r+0x1a>
 800508c:	682b      	ldr	r3, [r5, #0]
 800508e:	b103      	cbz	r3, 8005092 <_isatty_r+0x1a>
 8005090:	6023      	str	r3, [r4, #0]
 8005092:	bd38      	pop	{r3, r4, r5, pc}
 8005094:	20000428 	.word	0x20000428

08005098 <_sbrk_r>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	4d06      	ldr	r5, [pc, #24]	@ (80050b4 <_sbrk_r+0x1c>)
 800509c:	2300      	movs	r3, #0
 800509e:	4604      	mov	r4, r0
 80050a0:	4608      	mov	r0, r1
 80050a2:	602b      	str	r3, [r5, #0]
 80050a4:	f7fb fe62 	bl	8000d6c <_sbrk>
 80050a8:	1c43      	adds	r3, r0, #1
 80050aa:	d102      	bne.n	80050b2 <_sbrk_r+0x1a>
 80050ac:	682b      	ldr	r3, [r5, #0]
 80050ae:	b103      	cbz	r3, 80050b2 <_sbrk_r+0x1a>
 80050b0:	6023      	str	r3, [r4, #0]
 80050b2:	bd38      	pop	{r3, r4, r5, pc}
 80050b4:	20000428 	.word	0x20000428

080050b8 <_init>:
 80050b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ba:	bf00      	nop
 80050bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050be:	bc08      	pop	{r3}
 80050c0:	469e      	mov	lr, r3
 80050c2:	4770      	bx	lr

080050c4 <_fini>:
 80050c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c6:	bf00      	nop
 80050c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ca:	bc08      	pop	{r3}
 80050cc:	469e      	mov	lr, r3
 80050ce:	4770      	bx	lr
